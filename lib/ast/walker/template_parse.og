!walker

import
	path
	"github.com/champii/og/lib/ast"
	"github.com/champii/og/lib/common"

struct TemplateParse
	AstWalker
	Root        common.INode
	Package     string
	Templates   *Templates
	ImportName string

	*StructType(n common.INode): common.INode ->
		structType := n.(*ast.StructType)
		if structType.TemplateSpec != nil
			types := []string{}
			for _, t in structType.TemplateSpec.Result.Types
				types = append(types, t.Eval())

			@Templates.Add(structType.Name, @ImportName, NewTemplate(structType.Name, @ImportName, types, structType))
		n

	*Signature(n common.INode): common.INode ->
		sig := n.(*ast.Signature)
		if sig.TemplateSpec != nil

			if f, ok := sig.GetParent().(*ast.Function); ok
				fDecl := f.GetParent().(*ast.FunctionDecl)

				types := []string{}
				for _, t in sig.TemplateSpec.Result.Types
					types = append(types, t.Eval())

				@Templates.Add(fDecl.Name, @ImportName, NewTemplate(fDecl.Name, @ImportName, types, fDecl))
		n

RunTemplateParse(file *common.File, templates *Templates) ->
	templateParse := TemplateParse
		Root:      file.Ast
		Templates: templates
		Package:   file.Ast.(*ast.SourceFile).Package.Name
		ImportName: path.Dir(file.FullPath)

	templateParse.type_ = &templateParse

	templateParse.Walk(file.Ast)
