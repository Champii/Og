!walker

import
	os
	path
	strings
	"github.com/champii/og/lib/ast"
	"github.com/champii/og/lib/common"

struct TemplateUsage
	AstWalker
	File      *common.File
	Root      common.INode
	Package   string
	Templates *Templates

	*computeTypes(callee common.INode, templateSpec *ast.TemplateSpec): string ->
		calleeName := callee.Eval()

		types := []string{}

		for _, t in templateSpec.Result.Types
			types = append(types, t.Eval())

		splited := strings.Split(calleeName, ".")
		pack := @Package
		if len(splited) > 1
			pack = @File.Imports[splited[0]]
			calleeName = splited[1]

		template := @Templates.Get(calleeName, pack)

		if template == nil
			err := @File.Error(callee.Line(), callee.Col(), "Unknown template name", callee.Eval())
			common.Print.Error(err)
			os.Exit(1)
			return calleeName

		template.AddUsedFor(types)

		prefix := path.Base(template.Pack) + "_"

		prefix + calleeName + "_" + strings.Join(types, "_")

	*Arguments(n common.INode): common.INode ->
		args := n.(*ast.Arguments)

		if args.TemplateSpec != nil
			callee := args.GetParent().(*ast.SecondaryExpr).GetParent().(*ast.PrimaryExpr).PrimaryExpr.Operand
			callee.OperandName.Name = @computeTypes(callee, args.TemplateSpec)

		n

	*CompositeLit(n common.INode): common.INode ->
		composite := n.(*ast.CompositeLit)

		if composite.TemplateSpec != nil
			callee := composite.LiteralType
			callee.Type = @computeTypes(callee, composite.TemplateSpec)

		n

RunTemplateUsage(file *common.File, templates *Templates) ->
	templateUsage := TemplateUsage
		Root: file.Ast
		File: file
		Templates: templates
		Package:   path.Dir(file.FullPath)

	templateUsage.type_ = &templateUsage

	templateUsage.Walk(file.Ast)
