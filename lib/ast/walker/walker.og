!walker

import
	// fmt
	reflect
	"github.com/champii/og/lib/ast"

struct AstWalker
	type_ interface

	*callDelegate(name string, arg reflect.Value): []reflect.Value, bool ->
		method := reflect.ValueOf(@type_).MethodByName(name)

		if method.IsValid()
			res := method.Call([]reflect.Value{arg})
			if len(res) == 0
				return []reflect.Value{reflect.Zero(arg.Type())}, false
			else
				return res, true

		return []reflect.Value{reflect.Zero(arg.Type())}, false

	*Trigger(arg reflect.Value, parentField reflect.Value, parentNode ast.INode): reflect.Value, bool->
		node := arg.Interface().(ast.INode)

		if node == nil
			return reflect.Zero(arg.Type()), false

		node.SetParent(parentNode)

		name := arg.Type().String()[5:]

		@callDelegate("Before", arg)
		@callDelegate("Before" + name, arg)

		res, ok := @callDelegate("Each", arg)
		if ok
			node = res[0].Interface().(ast.INode)
			parentField.Set(reflect.ValueOf(node))

		@callDelegate(name, arg)

		parentField.Set(reflect.ValueOf(@Walk(node)))
		res, ok = @callDelegate("After", arg)
		if ok
			node = res[0].Interface().(ast.INode)
			parentField.Set(reflect.ValueOf(node))

		@callDelegate("After" + name, arg)

		return reflect.ValueOf(node), true

	*Walk(tree ast.INode): ast.INode ->
		val := reflect.ValueOf(tree).Elem()

		for i := 0; i < val.NumField(); i++
			valueField := val.Field(i)
			valueType := val.Type().Field(i)

			valueKind := valueField.Kind()

			if valueKind == reflect.String || valueKind == reflect.Bool || valueType.Name == "Node"
				continue

			if valueKind == reflect.Slice
				for j := 0; j < valueField.Len(); j++
					if valueField.Index(j).Kind() == reflect.String
						continue

					if !valueField.Index(j).IsValid()
						continue

					res, ok := @Trigger(valueField.Index(j), valueField.Index(j), tree)
					if ok
						valueField.Index(j).Set(res)

				continue

			if valueField.IsNil()
				continue

			res, ok := @Trigger(valueField, val.Field(i), tree)
			if ok
				val.Field(i).Set(res)

		tree
