!common

import
  fmt
  strconv
  "github.com/fatih/color"
  "github.com/buger/goterm": tm
  "github.com/k0kubun/go-ansi": curs

var yellow = color.New(color.FgHiYellow).SprintFunc()
var red = color.New(color.FgHiRed).SprintFunc()
var cyan = color.New(color.FgCyan).SprintFunc()
var magenta = color.New(color.Bold, color.FgHiMagenta).SprintFunc()
var blue = color.New(color.Bold, color.FgHiBlue).SprintfFunc()
var green = color.New(color.FgHiGreen).SprintfFunc()

struct Printer
  Config *OgConfig
  spinner int

  Compiling(nbFiles int) ->
    if @Config.Quiet
      return

    tm.Print("                                          \r")
    tm.Println(tm.Color("[", tm.RED), tm.Color(strconv.Itoa(nbFiles), tm.GREEN), tm.Color("/", tm.RED), tm.Color(strconv.Itoa(nbFiles), tm.GREEN), tm.Color("]", tm.RED), tm.Color("Compiling go", tm.YELLOW))
    tm.MoveCursorUp(1)
    tm.Flush()

  Compiled(nbFiles int) ->
    if @Config.Quiet
      return

    tm.MoveCursorUp(1)
    tm.Print("                                          \r")
    tm.Print(blue("~> "), tm.Color("Oglang: ", tm.MAGENTA), tm.Color("Compiled ", tm.GREEN), tm.Color(strconv.Itoa(nbFiles), tm.YELLOW), tm.Color(" files.", tm.GREEN))
    tm.Flush()

  Running ->
    if @Config.Quiet
      return

    tm.MoveCursorUp(1)
    tm.Print("                                          \r")
    tm.Print(blue("~> "), tm.Color("Oglang: ", tm.MAGENTA), tm.Color("Running... \n", tm.GREEN))
    tm.Flush()

  NothingToDo ->
    if @Config.Quiet
      return

    tm.Print("                                          \r")
    tm.Print(blue("~> "), tm.Color("Oglang: ", tm.MAGENTA), tm.Color("Nothing to do.", tm.GREEN))
    tm.Flush()

  *CompileList(files []string, workerIds []int, nbWorkers, finished, total int) ->
    if @Config.Quiet
      return

    spinners := []string{"|", "/", "-", "\\"}
    tm.Print("                                          \r")
    tm.Println(spinners[@spinner], tm.Color("[", tm.RED), tm.Color(strconv.Itoa(finished), tm.YELLOW), tm.Color("/", tm.RED), tm.Color(strconv.Itoa(total), tm.GREEN), tm.Color("]", tm.RED), tm.Color("Building sources", tm.YELLOW))

    for i, file in files
      tm.Print("                                          \r")
      tm.Println(tm.Color(strconv.Itoa(workerIds[i]), tm.CYAN), tm.Color(":", tm.RED), tm.Color(file, tm.MAGENTA))

    workers := nbWorkers
    for len(files) < workers
      tm.Print("                                          \n")
      workers--

    tm.MoveCursorUp(nbWorkers + 2)
    tm.Flush()

    @spinner += 1
    @spinner %= 4

  *Error(err *Error) ->
    for i := 0; i < 8; i++
      tm.Println("                                                                          ")
    tm.MoveCursorUp(9)
    tm.Flush()

    fileInfo := fmt.Sprintf("%s (%s:%s)", green(err.Path), yellow(err.Line), yellow(err.Column))
    fmt.Printf("%s: %s '%s'\n", fileInfo, red(err.Msg), magenta(err.Msg2))

    if err.Line - 1 >= len(err.Source) || err.Column >= len(err.Source[err.Line-1])
      return

    badLine := err.Source[err.Line-1]
    badLine = cyan(badLine[:err.Column]) + magenta(err.Msg2) + cyan(badLine[err.Column+len(err.Msg2):])

    fmt.Println(badLine)
    fmt.Print(blue("%"+strconv.Itoa(err.Column+1)+"s\n","^"))

  CursorHide -> if !@Config.Quiet => curs.CursorHide()
  CursorShow -> if !@Config.Quiet => curs.CursorShow()


NewPrinter(config *OgConfig): *Printer ->
  &Printer
    Config: config

var Print *Printer
