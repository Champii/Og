!og

import
  os
  fmt
  path
  "os/exec"

struct OgConfig
  Blocks      bool
  Dirty       bool
  Print       bool
  Compile     bool
  Ast         bool
  Quiet       bool
  Interpreter bool
  Paths       []string // from command line
  Files       []string
  Workers     int
  OutPath     string
  NoBuild     bool
  Run         bool

NewOgConfig: *OgConfig ->
  &OgConfig{}

struct Og
  Config   *OgConfig
  Compiler *OgCompiler
  Printer  *Printer
  Files    []string // after walk

  Run: error ->
    if @Config.Print || @Config.Ast || @Config.Dirty || @Config.Blocks
      @Config.Quiet = true

    if len(@Config.Paths) == 0
      @Config.Paths = []string{"."}

    if @Config.Interpreter
      RunInterpreter(@Compiler)
      return nil

    if err := @Compiler.Compile(); err != nil
      return err

    if len(@Config.Files) == 0
      @Printer.NothingToDo()
      if !@Config.Run
        return nil

    if !@Config.NoBuild
      if err := @Build(); err != nil
        return err

    if @Config.Run
      if err := @RunBinary(); err != nil
        return err

    return nil

  Build: error ->
    @Printer.Compiling()

    cmd := exec.Command("go", "build")

    out, err := cmd.CombinedOutput()

    if err != nil
      fmt.Println(string(out))
      return err

    if len(@Config.Files) > 0
      @Printer.Compiled()

    nil

  RunBinary: error ->
    dir, err := os.Getwd()

    if err != nil
      return err

    current := path.Base(dir)

    @Printer.Running()

    cmd := exec.Command("./" + current)
    cmd.Stdout = os.Stdout
    cmd.Stderr = os.Stderr

    if err = cmd.Start(); err != nil
      return err

    cmd.Wait()

    return nil

NewOg(config *OgConfig): *Og ->
  printer := NewPrinter(config);

  &Og
    Config: config
    Compiler: NewOgCompiler(config, printer)
    Printer: printer
