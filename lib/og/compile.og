!og

import
  fmt
  os
  path
  strings
  "path/filepath"
  "github.com/champii/og/lib/common"
  "github.com/champii/og/lib/ast/walker"

struct OgCompiler
  Config   *OgConfig
  Parser   *OgParser
  Preproc  *OgPreproc
  Printer  *Printer
  Files    []*common.File

  *Compile: error ->
    for _, p in @Config.Paths
      if err := filepath.Walk(p, @walker); err != nil
        fmt.Println("Error", err)

        return err

    if len(@Files) == 0
      if @Config.Run
        return nil

    poolSize := @Config.Workers

    if len(@Files) < poolSize
      poolSize = len(@Files)

    pool := NewPool(poolSize, len(@Files), @Printer, @ParseFile)

    for _, file in @Files
      pool.Queue(file)

    if err := pool.Run(); err != nil
      return err

    if @Config.Blocks
      return nil

    walker.NewDesugar().Run(@Files)

    @outputFiles()

  *outputFiles: error ->
    for _, file in @Files
      file.Output = file.Ast.Eval()

      if !@Config.Dirty
        if err := file.Format(); err != nil
          return err

      if @Config.Print || @Config.Dirty || @Config.Blocks
        fmt.Println(file.Output)
      else
        file.Write()

    nil

  *walker(filePath string, info os.FileInfo, err error): error ->
    if err != nil
      return err

    if info.IsDir()
      return nil

    if path.Ext(filePath) != ".og"
      return nil

    if !@mustCompile(filePath, info)
      return nil

    @Files = append(@Files, common.NewFile(filePath, @getNewPath(filePath)))

    nil

  mustCompile(filePath string, info os.FileInfo): bool ->
    newPath := @getNewPath(filePath)

    stat, err := os.Stat(newPath)
    if err != nil
      return true

    if @Config.Ast || @Config.Print || @Config.Dirty || @Config.Blocks || @Config.Force
      return true

    return info.ModTime().After(stat.ModTime())

  *ParseFile(file *common.File): error ->
    @Preproc.Run(file)

    if @Config.Blocks
      fmt.Println(file.Output)
      return nil

    var err error
    if !@Config.Interpreter
      err = @Parser.Parse(file)
    else
      err = @Parser.ParseInterpret(file)

    if err != nil
      return err

    return nil

  getNewPath(filePath string): string ->
    if @Config.OutPath != "./"
      splited := strings.SplitN(filePath, "/", 2)
      filePath = splited[1]

    strings.Replace(path.Join(@Config.OutPath, filePath), ".og", ".go", 1)

NewOgCompiler(config *OgConfig, printer *Printer): *OgCompiler ->
  &OgCompiler
    Config:  config
    Printer: printer
    Parser:  NewOgParser(config)
    Preproc: NewOgPreproc()
    Files:   []*common.File{}
