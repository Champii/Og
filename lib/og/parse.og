!og

import
  os
  strings
  errors
  "github.com/champii/og/parser"
  "github.com/champii/og/lib/ast"
  "github.com/champii/og/lib/common"
  "github.com/champii/og/lib/ast/walker"
  "github.com/champii/og/lib/translator"
  "github.com/antlr/antlr4/runtime/Go/antlr"

struct ErrorHandler
  *antlr.DefaultErrorStrategy

  Recover(p antlr.Parser, r antlr.RecognitionException) ->
    os.Exit(1)

NewErrorHandler: *ErrorHandler ->
  &ErrorHandler
    DefaultErrorStrategy: antlr.NewDefaultErrorStrategy()

struct ErrorListener
  *antlr.DefaultErrorListener
  filePath string
  source []string

  *SyntaxError(rec antlr.Recognizer, offendingSymbol interface, line, column int, msg string, e antlr.RecognitionException) ->
    err := common.NewError(@filePath, @source, line, column, "Unexpected", offendingSymbol.(antlr.Token).GetText())
    common.Print.Error(err)

NewErrorListener(filePath, source string): *ErrorListener ->
  &ErrorListener
    DefaultErrorListener: antlr.NewDefaultErrorListener()
    filePath: filePath
    source: strings.Split(source, "\n")

struct OgParser
  Config *common.OgConfig

  parserInit(file *common.File): *parser.OgParser ->
    input := antlr.NewInputStream(string(file.Output))
    lexer := parser.NewOgLexer(input)

    stream := antlr.NewCommonTokenStream(lexer, 0)

    p := parser.NewOgParser(stream)

    p.GetInterpreter().SetPredictionMode(antlr.PredictionModeSLL)

    p.RemoveErrorListeners()
    p.SetErrorHandler(NewErrorHandler())
    p.AddErrorListener(NewErrorListener(file.Path, string(file.Source)))
    p.AddErrorListener(antlr.NewDiagnosticErrorListener(true))
    // p.SetErrorHandler(antlr.NewBailErrorStrategy())

    p

  Parse(file *common.File): error ->
    p := @parserInit(file)

    res := p.SourceFile()

    if res == nil
      return errors.New("Cannot parse file: " + file.Path)

    t := new(translator.OgVisitor)

    t.File = file

    tree := t.VisitSourceFile(res.(*parser.SourceFileContext), t).(*ast.SourceFile)

    if @Config.Ast || @Config.SimpleAst
      walker.Print(tree, @Config.SimpleAst)

    file.Ast = tree

    nil

  ParseStmt(file *common.File): error ->
    p := @parserInit(file)

    res := p.Statement()

    t := new(translator.OgVisitor)

    file.Ast = t.VisitStatement(res.(*parser.StatementContext), t).(*ast.Statement)

    nil

  ParseInterpret(file *common.File): error ->
    p := @parserInit(file)

    res := p.Interp()

    t := new(translator.OgVisitor)

    file.Ast = t.VisitInterp(res.(*parser.InterpContext), t).(*ast.Interpret)

    nil

NewOgParser(config *common.OgConfig): *OgParser ->
  &OgParser
    Config: config
