!og

import
  time

type WorkerCallback (fn(*File): error)

struct Worker
  In chan *File
  Out chan error
  Processing *File
  Job WorkerCallback

  *Run ->
    for todo in @In
      @Processing = todo

      res := @Job(todo)

      @Processing = nil

      @Out <- res

NewWorker(i chan *File, out chan error, job WorkerCallback): *Worker ->
  &Worker
    Processing: nil
    In: i
    Out: out
    Job: job

struct Pool
  Size int
  Workers []*Worker
  Total int
  Finished int
  In chan *File
  Out chan error
  Printer *Printer

  Queue(job *File) ->
    @In <- job

  Run: error ->
    for _, worker in @Workers
      go worker.Run()

    close(@In)

    @Printer.CursorHide()
    defer @Printer.CursorShow()

    ticker := time.NewTicker(100 * time.Millisecond)
    go ->
      for true
        <-ticker.C
        @Print()

    for @Finished < @Total
      if err := <-@Out; err != nil
        ticker.Stop()
        return err

      @Finished++

    ticker.Stop()
    @Print()

    nil

  Print ->
    workerIds := []int{}
    files := []string{}

    for i, worker in @Workers
      if worker.Processing != nil
        files = append(files, worker.Processing.Path)
        workerIds = append(workerIds, i + 1)

    @Printer.CompileList(files, workerIds, len(@Workers), @Finished, @Total)

    // spinners := []string{"|", "/", "-", "\\"}
    // tm.Print("                                          \r")
    // tm.Println(spinners[@spinner], tm.Color("[", tm.RED), tm.Color(strconv.Itoa(@Finished), tm.YELLOW), tm.Color("/", tm.RED), tm.Color(strconv.Itoa(@Total), tm.GREEN), tm.Color("]", tm.RED), tm.Color("Building sources", tm.YELLOW))

    // working := 0

    // for i, worker in @Workers
    // 	tm.Print("                                          \r")
    // 	if worker.Processing != "."
    // 		working++
    // 		tm.Println(tm.Color(strconv.Itoa(i + 1), tm.CYAN), tm.Color(":", tm.RED), tm.Color(worker.Processing, tm.MAGENTA))

    // for working < len(@Workers)
    // 	tm.Print("                                          \n")
    // 	working++

    // tm.MoveCursorUp(len(@Workers)+2)
    // tm.Flush()

NewPool(size int, nbJobs int, printer *Printer, cb WorkerCallback): *Pool ->
  pool := &Pool
    Size: size
    Total: nbJobs
    Finished: 0
    In: make(chan *File, nbJobs)
    Out: make(chan error, nbJobs)
    Printer: printer

  for i := 0; i < pool.Size; i++
    pool.Workers = append(pool.Workers, NewWorker(pool.In, pool.Out, cb))

  pool