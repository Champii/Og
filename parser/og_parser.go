// Generated from ./parser/Og.g4 by ANTLR 4.7.1.

package parser // Og

import (
	"fmt"
	"reflect"
	"strconv"
	"strings"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 84, 966,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97,
	9, 97, 4, 98, 9, 98, 4, 99, 9, 99, 4, 100, 9, 100, 4, 101, 9, 101, 4, 102,
	9, 102, 4, 103, 9, 103, 4, 104, 9, 104, 4, 105, 9, 105, 3, 2, 3, 2, 3,
	2, 3, 2, 3, 2, 7, 2, 216, 10, 2, 12, 2, 14, 2, 219, 11, 2, 3, 2, 3, 2,
	3, 2, 7, 2, 224, 10, 2, 12, 2, 14, 2, 227, 11, 2, 3, 2, 3, 2, 3, 3, 3,
	3, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 240, 10, 4, 12, 4, 14,
	4, 243, 11, 4, 3, 4, 5, 4, 246, 10, 4, 3, 5, 3, 5, 3, 5, 5, 5, 251, 10,
	5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 5, 7, 258, 10, 7, 3, 8, 3, 8, 3, 8, 5,
	8, 263, 10, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 7, 9, 271, 10, 9, 12,
	9, 14, 9, 274, 11, 9, 3, 9, 5, 9, 277, 10, 9, 3, 10, 3, 10, 5, 10, 281,
	10, 10, 3, 10, 3, 10, 5, 10, 285, 10, 10, 3, 11, 3, 11, 3, 11, 7, 11, 290,
	10, 11, 12, 11, 14, 11, 293, 11, 11, 3, 12, 3, 12, 3, 12, 5, 12, 298, 10,
	12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 7, 13, 306, 10, 13, 12, 13,
	14, 13, 309, 11, 13, 3, 13, 5, 13, 312, 10, 13, 3, 14, 3, 14, 3, 14, 3,
	15, 3, 15, 3, 15, 5, 15, 320, 10, 15, 3, 16, 3, 16, 3, 16, 3, 16, 5, 16,
	326, 10, 16, 3, 17, 3, 17, 3, 17, 5, 17, 331, 10, 17, 3, 18, 3, 18, 3,
	18, 3, 18, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 19, 7, 19, 343, 10, 19,
	12, 19, 14, 19, 346, 11, 19, 3, 19, 5, 19, 349, 10, 19, 3, 20, 3, 20, 3,
	20, 3, 20, 5, 20, 355, 10, 20, 3, 20, 3, 20, 5, 20, 359, 10, 20, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 22, 7, 22, 368, 10, 22, 12, 22, 14,
	22, 371, 11, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23,
	3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 23, 5, 23, 387, 10, 23, 3, 24, 3,
	24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 5, 24, 404, 10, 24, 3, 25, 3, 25, 3, 25, 3, 25, 3,
	25, 3, 25, 5, 25, 412, 10, 25, 3, 26, 3, 26, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 28, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 30, 5, 30, 428, 10,
	30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 32, 3, 32, 3, 33, 3, 33,
	3, 33, 3, 33, 3, 34, 3, 34, 5, 34, 444, 10, 34, 3, 35, 3, 35, 5, 35, 448,
	10, 35, 3, 36, 3, 36, 5, 36, 452, 10, 36, 3, 37, 3, 37, 3, 37, 3, 38, 3,
	38, 3, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 466, 10, 40,
	3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40, 473, 10, 40, 5, 40, 475, 10,
	40, 3, 41, 3, 41, 5, 41, 479, 10, 41, 3, 42, 3, 42, 3, 42, 3, 42, 5, 42,
	485, 10, 42, 3, 42, 5, 42, 488, 10, 42, 3, 42, 3, 42, 7, 42, 492, 10, 42,
	12, 42, 14, 42, 495, 11, 42, 3, 42, 3, 42, 3, 43, 3, 43, 3, 43, 3, 43,
	3, 44, 3, 44, 5, 44, 505, 10, 44, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 511,
	10, 45, 3, 45, 3, 45, 3, 45, 7, 45, 516, 10, 45, 12, 45, 14, 45, 519, 11,
	45, 3, 45, 3, 45, 3, 46, 3, 46, 5, 46, 525, 10, 46, 3, 46, 3, 46, 3, 46,
	3, 46, 3, 46, 3, 46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 48, 3, 48, 5, 48, 539,
	10, 48, 3, 49, 3, 49, 3, 49, 7, 49, 544, 10, 49, 12, 49, 14, 49, 547, 11,
	49, 3, 50, 3, 50, 3, 50, 7, 50, 552, 10, 50, 12, 50, 14, 50, 555, 11, 50,
	3, 50, 3, 50, 3, 51, 3, 51, 3, 51, 3, 51, 3, 52, 3, 52, 3, 52, 5, 52, 566,
	10, 52, 3, 52, 5, 52, 569, 10, 52, 3, 53, 3, 53, 3, 53, 3, 53, 3, 53, 3,
	53, 5, 53, 577, 10, 53, 3, 53, 3, 53, 3, 54, 3, 54, 3, 54, 3, 54, 5, 54,
	585, 10, 54, 3, 54, 3, 54, 3, 55, 5, 55, 590, 10, 55, 3, 55, 3, 55, 5,
	55, 594, 10, 55, 3, 55, 3, 55, 5, 55, 598, 10, 55, 3, 56, 3, 56, 5, 56,
	602, 10, 56, 3, 56, 3, 56, 3, 56, 3, 57, 3, 57, 3, 57, 5, 57, 610, 10,
	57, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 5, 58, 618, 10, 58, 3, 59,
	3, 59, 5, 59, 622, 10, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3, 60, 3,
	60, 3, 60, 5, 60, 632, 10, 60, 3, 61, 3, 61, 3, 61, 3, 61, 3, 61, 3, 62,
	3, 62, 3, 63, 3, 63, 3, 64, 3, 64, 3, 64, 3, 65, 3, 65, 3, 65, 3, 65, 3,
	65, 7, 65, 651, 10, 65, 12, 65, 14, 65, 654, 11, 65, 3, 65, 3, 65, 3, 66,
	3, 66, 3, 66, 3, 66, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 68, 3,
	68, 3, 68, 3, 68, 3, 68, 5, 68, 673, 10, 68, 3, 68, 3, 68, 3, 69, 3, 69,
	3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 5, 69, 685, 10, 69, 3, 70, 3,
	70, 3, 70, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 3, 71, 5, 71, 696, 10, 71,
	3, 72, 3, 72, 3, 72, 7, 72, 701, 10, 72, 12, 72, 14, 72, 704, 11, 72, 3,
	73, 3, 73, 3, 73, 5, 73, 709, 10, 73, 5, 73, 711, 10, 73, 3, 73, 5, 73,
	714, 10, 73, 3, 74, 3, 74, 3, 74, 7, 74, 719, 10, 74, 12, 74, 14, 74, 722,
	11, 74, 3, 75, 5, 75, 725, 10, 75, 3, 75, 5, 75, 728, 10, 75, 3, 75, 3,
	75, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 3, 76, 5, 76, 739, 10, 76,
	3, 77, 3, 77, 3, 77, 5, 77, 744, 10, 77, 3, 78, 3, 78, 3, 78, 3, 78, 3,
	78, 3, 78, 3, 78, 5, 78, 753, 10, 78, 3, 79, 3, 79, 3, 79, 5, 79, 758,
	10, 79, 3, 80, 3, 80, 3, 80, 3, 80, 3, 81, 3, 81, 3, 81, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 3, 82, 5, 82, 776, 10, 82, 3,
	83, 3, 83, 3, 83, 5, 83, 781, 10, 83, 5, 83, 783, 10, 83, 3, 83, 3, 83,
	3, 84, 3, 84, 5, 84, 789, 10, 84, 3, 84, 7, 84, 792, 10, 84, 12, 84, 14,
	84, 795, 11, 84, 3, 85, 3, 85, 3, 85, 5, 85, 800, 10, 85, 3, 85, 3, 85,
	3, 86, 3, 86, 3, 86, 5, 86, 807, 10, 86, 3, 87, 3, 87, 5, 87, 811, 10,
	87, 3, 88, 3, 88, 3, 88, 3, 88, 3, 88, 7, 88, 818, 10, 88, 12, 88, 14,
	88, 821, 11, 88, 3, 88, 3, 88, 3, 89, 3, 89, 3, 89, 3, 89, 3, 89, 5, 89,
	830, 10, 89, 3, 89, 5, 89, 833, 10, 89, 3, 90, 5, 90, 836, 10, 90, 3, 90,
	3, 90, 3, 91, 3, 91, 3, 91, 3, 92, 3, 92, 3, 92, 5, 92, 846, 10, 92, 3,
	92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 7, 92,
	858, 10, 92, 12, 92, 14, 92, 861, 11, 92, 3, 93, 3, 93, 3, 93, 3, 94, 3,
	94, 3, 94, 3, 94, 3, 95, 3, 95, 5, 95, 872, 10, 95, 3, 95, 3, 95, 5, 95,
	876, 10, 95, 3, 95, 5, 95, 879, 10, 95, 3, 95, 3, 95, 3, 95, 3, 95, 3,
	95, 5, 95, 886, 10, 95, 3, 95, 3, 95, 3, 96, 3, 96, 3, 96, 3, 96, 3, 96,
	3, 97, 3, 97, 3, 97, 3, 97, 3, 97, 5, 97, 900, 10, 97, 5, 97, 902, 10,
	97, 3, 97, 5, 97, 905, 10, 97, 3, 97, 5, 97, 908, 10, 97, 5, 97, 910, 10,
	97, 3, 97, 3, 97, 3, 98, 3, 98, 3, 98, 3, 98, 3, 99, 3, 99, 3, 99, 3, 99,
	3, 99, 3, 99, 3, 99, 3, 99, 3, 99, 3, 99, 5, 99, 928, 10, 99, 3, 100, 3,
	100, 3, 100, 3, 100, 3, 100, 3, 100, 3, 100, 7, 100, 937, 10, 100, 12,
	100, 14, 100, 940, 11, 100, 3, 101, 3, 101, 3, 102, 3, 102, 3, 102, 3,
	102, 5, 102, 948, 10, 102, 3, 103, 3, 103, 3, 104, 3, 104, 3, 104, 3, 104,
	5, 104, 956, 10, 104, 3, 104, 3, 104, 3, 105, 3, 105, 3, 105, 3, 105, 5,
	105, 964, 10, 105, 3, 105, 2, 4, 182, 198, 106, 2, 4, 6, 8, 10, 12, 14,
	16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50,
	52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86,
	88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118,
	120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148,
	150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178,
	180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208,
	2, 10, 4, 2, 8, 8, 71, 71, 4, 2, 71, 71, 80, 80, 4, 2, 13, 13, 71, 71,
	3, 2, 20, 21, 3, 2, 22, 32, 3, 2, 58, 59, 4, 2, 22, 32, 62, 69, 7, 2, 19,
	19, 22, 23, 25, 26, 31, 31, 70, 70, 2, 1024, 2, 210, 3, 2, 2, 2, 4, 230,
	3, 2, 2, 2, 6, 233, 3, 2, 2, 2, 8, 247, 3, 2, 2, 2, 10, 252, 3, 2, 2, 2,
	12, 257, 3, 2, 2, 2, 14, 262, 3, 2, 2, 2, 16, 264, 3, 2, 2, 2, 18, 278,
	3, 2, 2, 2, 20, 286, 3, 2, 2, 2, 22, 294, 3, 2, 2, 2, 24, 299, 3, 2, 2,
	2, 26, 313, 3, 2, 2, 2, 28, 316, 3, 2, 2, 2, 30, 321, 3, 2, 2, 2, 32, 327,
	3, 2, 2, 2, 34, 332, 3, 2, 2, 2, 36, 336, 3, 2, 2, 2, 38, 350, 3, 2, 2,
	2, 40, 360, 3, 2, 2, 2, 42, 369, 3, 2, 2, 2, 44, 386, 3, 2, 2, 2, 46, 403,
	3, 2, 2, 2, 48, 411, 3, 2, 2, 2, 50, 413, 3, 2, 2, 2, 52, 415, 3, 2, 2,
	2, 54, 419, 3, 2, 2, 2, 56, 422, 3, 2, 2, 2, 58, 427, 3, 2, 2, 2, 60, 431,
	3, 2, 2, 2, 62, 435, 3, 2, 2, 2, 64, 437, 3, 2, 2, 2, 66, 441, 3, 2, 2,
	2, 68, 445, 3, 2, 2, 2, 70, 449, 3, 2, 2, 2, 72, 453, 3, 2, 2, 2, 74, 456,
	3, 2, 2, 2, 76, 458, 3, 2, 2, 2, 78, 461, 3, 2, 2, 2, 80, 478, 3, 2, 2,
	2, 82, 480, 3, 2, 2, 2, 84, 498, 3, 2, 2, 2, 86, 504, 3, 2, 2, 2, 88, 506,
	3, 2, 2, 2, 90, 524, 3, 2, 2, 2, 92, 532, 3, 2, 2, 2, 94, 538, 3, 2, 2,
	2, 96, 540, 3, 2, 2, 2, 98, 548, 3, 2, 2, 2, 100, 558, 3, 2, 2, 2, 102,
	568, 3, 2, 2, 2, 104, 576, 3, 2, 2, 2, 106, 580, 3, 2, 2, 2, 108, 589,
	3, 2, 2, 2, 110, 601, 3, 2, 2, 2, 112, 606, 3, 2, 2, 2, 114, 617, 3, 2,
	2, 2, 116, 621, 3, 2, 2, 2, 118, 631, 3, 2, 2, 2, 120, 633, 3, 2, 2, 2,
	122, 638, 3, 2, 2, 2, 124, 640, 3, 2, 2, 2, 126, 642, 3, 2, 2, 2, 128,
	645, 3, 2, 2, 2, 130, 657, 3, 2, 2, 2, 132, 661, 3, 2, 2, 2, 134, 672,
	3, 2, 2, 2, 136, 684, 3, 2, 2, 2, 138, 686, 3, 2, 2, 2, 140, 695, 3, 2,
	2, 2, 142, 697, 3, 2, 2, 2, 144, 713, 3, 2, 2, 2, 146, 715, 3, 2, 2, 2,
	148, 724, 3, 2, 2, 2, 150, 738, 3, 2, 2, 2, 152, 743, 3, 2, 2, 2, 154,
	752, 3, 2, 2, 2, 156, 757, 3, 2, 2, 2, 158, 759, 3, 2, 2, 2, 160, 763,
	3, 2, 2, 2, 162, 775, 3, 2, 2, 2, 164, 777, 3, 2, 2, 2, 166, 786, 3, 2,
	2, 2, 168, 799, 3, 2, 2, 2, 170, 806, 3, 2, 2, 2, 172, 810, 3, 2, 2, 2,
	174, 812, 3, 2, 2, 2, 176, 829, 3, 2, 2, 2, 178, 835, 3, 2, 2, 2, 180,
	839, 3, 2, 2, 2, 182, 845, 3, 2, 2, 2, 184, 862, 3, 2, 2, 2, 186, 865,
	3, 2, 2, 2, 188, 869, 3, 2, 2, 2, 190, 889, 3, 2, 2, 2, 192, 894, 3, 2,
	2, 2, 194, 913, 3, 2, 2, 2, 196, 927, 3, 2, 2, 2, 198, 929, 3, 2, 2, 2,
	200, 941, 3, 2, 2, 2, 202, 947, 3, 2, 2, 2, 204, 949, 3, 2, 2, 2, 206,
	951, 3, 2, 2, 2, 208, 963, 3, 2, 2, 2, 210, 211, 5, 4, 3, 2, 211, 217,
	5, 208, 105, 2, 212, 213, 5, 6, 4, 2, 213, 214, 5, 208, 105, 2, 214, 216,
	3, 2, 2, 2, 215, 212, 3, 2, 2, 2, 216, 219, 3, 2, 2, 2, 217, 215, 3, 2,
	2, 2, 217, 218, 3, 2, 2, 2, 218, 225, 3, 2, 2, 2, 219, 217, 3, 2, 2, 2,
	220, 221, 5, 12, 7, 2, 221, 222, 5, 208, 105, 2, 222, 224, 3, 2, 2, 2,
	223, 220, 3, 2, 2, 2, 224, 227, 3, 2, 2, 2, 225, 223, 3, 2, 2, 2, 225,
	226, 3, 2, 2, 2, 226, 228, 3, 2, 2, 2, 227, 225, 3, 2, 2, 2, 228, 229,
	7, 2, 2, 3, 229, 3, 3, 2, 2, 2, 230, 231, 7, 3, 2, 2, 231, 232, 7, 71,
	2, 2, 232, 5, 3, 2, 2, 2, 233, 245, 7, 4, 2, 2, 234, 246, 5, 8, 5, 2, 235,
	241, 7, 5, 2, 2, 236, 237, 5, 8, 5, 2, 237, 238, 5, 208, 105, 2, 238, 240,
	3, 2, 2, 2, 239, 236, 3, 2, 2, 2, 240, 243, 3, 2, 2, 2, 241, 239, 3, 2,
	2, 2, 241, 242, 3, 2, 2, 2, 242, 244, 3, 2, 2, 2, 243, 241, 3, 2, 2, 2,
	244, 246, 7, 6, 2, 2, 245, 234, 3, 2, 2, 2, 245, 235, 3, 2, 2, 2, 246,
	7, 3, 2, 2, 2, 247, 250, 5, 10, 6, 2, 248, 249, 7, 7, 2, 2, 249, 251, 9,
	2, 2, 2, 250, 248, 3, 2, 2, 2, 250, 251, 3, 2, 2, 2, 251, 9, 3, 2, 2, 2,
	252, 253, 9, 3, 2, 2, 253, 11, 3, 2, 2, 2, 254, 258, 5, 14, 8, 2, 255,
	258, 5, 28, 15, 2, 256, 258, 5, 32, 17, 2, 257, 254, 3, 2, 2, 2, 257, 255,
	3, 2, 2, 2, 257, 256, 3, 2, 2, 2, 258, 13, 3, 2, 2, 2, 259, 263, 5, 16,
	9, 2, 260, 263, 5, 24, 13, 2, 261, 263, 5, 36, 19, 2, 262, 259, 3, 2, 2,
	2, 262, 260, 3, 2, 2, 2, 262, 261, 3, 2, 2, 2, 263, 15, 3, 2, 2, 2, 264,
	276, 7, 9, 2, 2, 265, 277, 5, 18, 10, 2, 266, 272, 7, 10, 2, 2, 267, 268,
	5, 18, 10, 2, 268, 269, 5, 208, 105, 2, 269, 271, 3, 2, 2, 2, 270, 267,
	3, 2, 2, 2, 271, 274, 3, 2, 2, 2, 272, 270, 3, 2, 2, 2, 272, 273, 3, 2,
	2, 2, 273, 275, 3, 2, 2, 2, 274, 272, 3, 2, 2, 2, 275, 277, 7, 11, 2, 2,
	276, 265, 3, 2, 2, 2, 276, 266, 3, 2, 2, 2, 277, 17, 3, 2, 2, 2, 278, 284,
	5, 20, 11, 2, 279, 281, 5, 114, 58, 2, 280, 279, 3, 2, 2, 2, 280, 281,
	3, 2, 2, 2, 281, 282, 3, 2, 2, 2, 282, 283, 7, 12, 2, 2, 283, 285, 5, 22,
	12, 2, 284, 280, 3, 2, 2, 2, 284, 285, 3, 2, 2, 2, 285, 19, 3, 2, 2, 2,
	286, 291, 9, 4, 2, 2, 287, 288, 7, 14, 2, 2, 288, 290, 9, 4, 2, 2, 289,
	287, 3, 2, 2, 2, 290, 293, 3, 2, 2, 2, 291, 289, 3, 2, 2, 2, 291, 292,
	3, 2, 2, 2, 292, 21, 3, 2, 2, 2, 293, 291, 3, 2, 2, 2, 294, 297, 5, 198,
	100, 2, 295, 296, 7, 14, 2, 2, 296, 298, 5, 22, 12, 2, 297, 295, 3, 2,
	2, 2, 297, 298, 3, 2, 2, 2, 298, 23, 3, 2, 2, 2, 299, 311, 7, 15, 2, 2,
	300, 312, 5, 26, 14, 2, 301, 307, 7, 10, 2, 2, 302, 303, 5, 26, 14, 2,
	303, 304, 5, 208, 105, 2, 304, 306, 3, 2, 2, 2, 305, 302, 3, 2, 2, 2, 306,
	309, 3, 2, 2, 2, 307, 305, 3, 2, 2, 2, 307, 308, 3, 2, 2, 2, 308, 310,
	3, 2, 2, 2, 309, 307, 3, 2, 2, 2, 310, 312, 7, 11, 2, 2, 311, 300, 3, 2,
	2, 2, 311, 301, 3, 2, 2, 2, 312, 25, 3, 2, 2, 2, 313, 314, 7, 71, 2, 2,
	314, 315, 5, 114, 58, 2, 315, 27, 3, 2, 2, 2, 316, 319, 7, 71, 2, 2, 317,
	320, 5, 30, 16, 2, 318, 320, 5, 140, 71, 2, 319, 317, 3, 2, 2, 2, 319,
	318, 3, 2, 2, 2, 320, 29, 3, 2, 2, 2, 321, 322, 5, 140, 71, 2, 322, 325,
	7, 16, 2, 2, 323, 326, 5, 40, 21, 2, 324, 326, 5, 44, 23, 2, 325, 323,
	3, 2, 2, 2, 325, 324, 3, 2, 2, 2, 326, 31, 3, 2, 2, 2, 327, 330, 5, 34,
	18, 2, 328, 331, 5, 30, 16, 2, 329, 331, 5, 140, 71, 2, 330, 328, 3, 2,
	2, 2, 330, 329, 3, 2, 2, 2, 331, 33, 3, 2, 2, 2, 332, 333, 7, 71, 2, 2,
	333, 334, 7, 17, 2, 2, 334, 335, 7, 71, 2, 2, 335, 35, 3, 2, 2, 2, 336,
	348, 7, 18, 2, 2, 337, 349, 5, 38, 20, 2, 338, 344, 7, 10, 2, 2, 339, 340,
	5, 38, 20, 2, 340, 341, 5, 208, 105, 2, 341, 343, 3, 2, 2, 2, 342, 339,
	3, 2, 2, 2, 343, 346, 3, 2, 2, 2, 344, 342, 3, 2, 2, 2, 344, 345, 3, 2,
	2, 2, 345, 347, 3, 2, 2, 2, 346, 344, 3, 2, 2, 2, 347, 349, 7, 11, 2, 2,
	348, 337, 3, 2, 2, 2, 348, 338, 3, 2, 2, 2, 349, 37, 3, 2, 2, 2, 350, 358,
	5, 20, 11, 2, 351, 354, 5, 114, 58, 2, 352, 353, 7, 12, 2, 2, 353, 355,
	5, 22, 12, 2, 354, 352, 3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355, 359, 3,
	2, 2, 2, 356, 357, 7, 12, 2, 2, 357, 359, 5, 22, 12, 2, 358, 351, 3, 2,
	2, 2, 358, 356, 3, 2, 2, 2, 359, 39, 3, 2, 2, 2, 360, 361, 7, 5, 2, 2,
	361, 362, 5, 42, 22, 2, 362, 363, 7, 6, 2, 2, 363, 41, 3, 2, 2, 2, 364,
	365, 5, 46, 24, 2, 365, 366, 5, 208, 105, 2, 366, 368, 3, 2, 2, 2, 367,
	364, 3, 2, 2, 2, 368, 371, 3, 2, 2, 2, 369, 367, 3, 2, 2, 2, 369, 370,
	3, 2, 2, 2, 370, 43, 3, 2, 2, 2, 371, 369, 3, 2, 2, 2, 372, 387, 5, 14,
	8, 2, 373, 387, 5, 64, 33, 2, 374, 387, 5, 48, 25, 2, 375, 387, 5, 112,
	57, 2, 376, 387, 5, 66, 34, 2, 377, 387, 5, 68, 35, 2, 378, 387, 5, 70,
	36, 2, 379, 387, 5, 72, 37, 2, 380, 387, 5, 74, 38, 2, 381, 387, 5, 78,
	40, 2, 382, 387, 5, 80, 41, 2, 383, 387, 5, 98, 50, 2, 384, 387, 5, 106,
	54, 2, 385, 387, 5, 76, 39, 2, 386, 372, 3, 2, 2, 2, 386, 373, 3, 2, 2,
	2, 386, 374, 3, 2, 2, 2, 386, 375, 3, 2, 2, 2, 386, 376, 3, 2, 2, 2, 386,
	377, 3, 2, 2, 2, 386, 378, 3, 2, 2, 2, 386, 379, 3, 2, 2, 2, 386, 380,
	3, 2, 2, 2, 386, 381, 3, 2, 2, 2, 386, 382, 3, 2, 2, 2, 386, 383, 3, 2,
	2, 2, 386, 384, 3, 2, 2, 2, 386, 385, 3, 2, 2, 2, 387, 45, 3, 2, 2, 2,
	388, 404, 5, 14, 8, 2, 389, 404, 5, 48, 25, 2, 390, 404, 5, 64, 33, 2,
	391, 404, 5, 112, 57, 2, 392, 404, 5, 66, 34, 2, 393, 404, 5, 68, 35, 2,
	394, 404, 5, 70, 36, 2, 395, 404, 5, 72, 37, 2, 396, 404, 5, 74, 38, 2,
	397, 404, 5, 78, 40, 2, 398, 404, 5, 80, 41, 2, 399, 404, 5, 98, 50, 2,
	400, 404, 5, 106, 54, 2, 401, 404, 5, 40, 21, 2, 402, 404, 5, 76, 39, 2,
	403, 388, 3, 2, 2, 2, 403, 389, 3, 2, 2, 2, 403, 390, 3, 2, 2, 2, 403,
	391, 3, 2, 2, 2, 403, 392, 3, 2, 2, 2, 403, 393, 3, 2, 2, 2, 403, 394,
	3, 2, 2, 2, 403, 395, 3, 2, 2, 2, 403, 396, 3, 2, 2, 2, 403, 397, 3, 2,
	2, 2, 403, 398, 3, 2, 2, 2, 403, 399, 3, 2, 2, 2, 403, 400, 3, 2, 2, 2,
	403, 401, 3, 2, 2, 2, 403, 402, 3, 2, 2, 2, 404, 47, 3, 2, 2, 2, 405, 412,
	5, 52, 27, 2, 406, 412, 5, 50, 26, 2, 407, 412, 5, 54, 28, 2, 408, 412,
	5, 60, 31, 2, 409, 412, 5, 56, 29, 2, 410, 412, 5, 62, 32, 2, 411, 405,
	3, 2, 2, 2, 411, 406, 3, 2, 2, 2, 411, 407, 3, 2, 2, 2, 411, 408, 3, 2,
	2, 2, 411, 409, 3, 2, 2, 2, 411, 410, 3, 2, 2, 2, 412, 49, 3, 2, 2, 2,
	413, 414, 5, 198, 100, 2, 414, 51, 3, 2, 2, 2, 415, 416, 5, 198, 100, 2,
	416, 417, 7, 19, 2, 2, 417, 418, 5, 198, 100, 2, 418, 53, 3, 2, 2, 2, 419,
	420, 5, 198, 100, 2, 420, 421, 9, 5, 2, 2, 421, 55, 3, 2, 2, 2, 422, 423,
	5, 22, 12, 2, 423, 424, 5, 58, 30, 2, 424, 425, 5, 22, 12, 2, 425, 57,
	3, 2, 2, 2, 426, 428, 9, 6, 2, 2, 427, 426, 3, 2, 2, 2, 427, 428, 3, 2,
	2, 2, 428, 429, 3, 2, 2, 2, 429, 430, 7, 12, 2, 2, 430, 59, 3, 2, 2, 2,
	431, 432, 5, 20, 11, 2, 432, 433, 7, 33, 2, 2, 433, 434, 5, 22, 12, 2,
	434, 61, 3, 2, 2, 2, 435, 436, 7, 34, 2, 2, 436, 63, 3, 2, 2, 2, 437, 438,
	7, 71, 2, 2, 438, 439, 7, 7, 2, 2, 439, 440, 5, 46, 24, 2, 440, 65, 3,
	2, 2, 2, 441, 443, 7, 35, 2, 2, 442, 444, 5, 22, 12, 2, 443, 442, 3, 2,
	2, 2, 443, 444, 3, 2, 2, 2, 444, 67, 3, 2, 2, 2, 445, 447, 7, 36, 2, 2,
	446, 448, 7, 71, 2, 2, 447, 446, 3, 2, 2, 2, 447, 448, 3, 2, 2, 2, 448,
	69, 3, 2, 2, 2, 449, 451, 7, 37, 2, 2, 450, 452, 7, 71, 2, 2, 451, 450,
	3, 2, 2, 2, 451, 452, 3, 2, 2, 2, 452, 71, 3, 2, 2, 2, 453, 454, 7, 38,
	2, 2, 454, 455, 7, 71, 2, 2, 455, 73, 3, 2, 2, 2, 456, 457, 7, 39, 2, 2,
	457, 75, 3, 2, 2, 2, 458, 459, 7, 40, 2, 2, 459, 460, 5, 198, 100, 2, 460,
	77, 3, 2, 2, 2, 461, 465, 7, 41, 2, 2, 462, 463, 5, 48, 25, 2, 463, 464,
	7, 34, 2, 2, 464, 466, 3, 2, 2, 2, 465, 462, 3, 2, 2, 2, 465, 466, 3, 2,
	2, 2, 466, 467, 3, 2, 2, 2, 467, 468, 5, 198, 100, 2, 468, 474, 5, 40,
	21, 2, 469, 472, 7, 42, 2, 2, 470, 473, 5, 78, 40, 2, 471, 473, 5, 40,
	21, 2, 472, 470, 3, 2, 2, 2, 472, 471, 3, 2, 2, 2, 473, 475, 3, 2, 2, 2,
	474, 469, 3, 2, 2, 2, 474, 475, 3, 2, 2, 2, 475, 79, 3, 2, 2, 2, 476, 479,
	5, 82, 42, 2, 477, 479, 5, 88, 45, 2, 478, 476, 3, 2, 2, 2, 478, 477, 3,
	2, 2, 2, 479, 81, 3, 2, 2, 2, 480, 484, 7, 43, 2, 2, 481, 482, 5, 48, 25,
	2, 482, 483, 7, 34, 2, 2, 483, 485, 3, 2, 2, 2, 484, 481, 3, 2, 2, 2, 484,
	485, 3, 2, 2, 2, 485, 487, 3, 2, 2, 2, 486, 488, 5, 198, 100, 2, 487, 486,
	3, 2, 2, 2, 487, 488, 3, 2, 2, 2, 488, 489, 3, 2, 2, 2, 489, 493, 7, 5,
	2, 2, 490, 492, 5, 84, 43, 2, 491, 490, 3, 2, 2, 2, 492, 495, 3, 2, 2,
	2, 493, 491, 3, 2, 2, 2, 493, 494, 3, 2, 2, 2, 494, 496, 3, 2, 2, 2, 495,
	493, 3, 2, 2, 2, 496, 497, 7, 6, 2, 2, 497, 83, 3, 2, 2, 2, 498, 499, 5,
	86, 44, 2, 499, 500, 7, 44, 2, 2, 500, 501, 5, 42, 22, 2, 501, 85, 3, 2,
	2, 2, 502, 505, 5, 22, 12, 2, 503, 505, 7, 13, 2, 2, 504, 502, 3, 2, 2,
	2, 504, 503, 3, 2, 2, 2, 505, 87, 3, 2, 2, 2, 506, 510, 7, 43, 2, 2, 507,
	508, 5, 48, 25, 2, 508, 509, 7, 34, 2, 2, 509, 511, 3, 2, 2, 2, 510, 507,
	3, 2, 2, 2, 510, 511, 3, 2, 2, 2, 511, 512, 3, 2, 2, 2, 512, 513, 5, 90,
	46, 2, 513, 517, 7, 5, 2, 2, 514, 516, 5, 92, 47, 2, 515, 514, 3, 2, 2,
	2, 516, 519, 3, 2, 2, 2, 517, 515, 3, 2, 2, 2, 517, 518, 3, 2, 2, 2, 518,
	520, 3, 2, 2, 2, 519, 517, 3, 2, 2, 2, 520, 521, 7, 6, 2, 2, 521, 89, 3,
	2, 2, 2, 522, 523, 7, 71, 2, 2, 523, 525, 7, 12, 2, 2, 524, 522, 3, 2,
	2, 2, 524, 525, 3, 2, 2, 2, 525, 526, 3, 2, 2, 2, 526, 527, 5, 182, 92,
	2, 527, 528, 7, 8, 2, 2, 528, 529, 7, 10, 2, 2, 529, 530, 7, 15, 2, 2,
	530, 531, 7, 11, 2, 2, 531, 91, 3, 2, 2, 2, 532, 533, 5, 94, 48, 2, 533,
	534, 7, 44, 2, 2, 534, 535, 5, 42, 22, 2, 535, 93, 3, 2, 2, 2, 536, 539,
	5, 96, 49, 2, 537, 539, 7, 13, 2, 2, 538, 536, 3, 2, 2, 2, 538, 537, 3,
	2, 2, 2, 539, 95, 3, 2, 2, 2, 540, 545, 5, 114, 58, 2, 541, 542, 7, 14,
	2, 2, 542, 544, 5, 114, 58, 2, 543, 541, 3, 2, 2, 2, 544, 547, 3, 2, 2,
	2, 545, 543, 3, 2, 2, 2, 545, 546, 3, 2, 2, 2, 546, 97, 3, 2, 2, 2, 547,
	545, 3, 2, 2, 2, 548, 549, 7, 45, 2, 2, 549, 553, 7, 5, 2, 2, 550, 552,
	5, 100, 51, 2, 551, 550, 3, 2, 2, 2, 552, 555, 3, 2, 2, 2, 553, 551, 3,
	2, 2, 2, 553, 554, 3, 2, 2, 2, 554, 556, 3, 2, 2, 2, 555, 553, 3, 2, 2,
	2, 556, 557, 7, 6, 2, 2, 557, 99, 3, 2, 2, 2, 558, 559, 5, 102, 52, 2,
	559, 560, 7, 7, 2, 2, 560, 561, 5, 42, 22, 2, 561, 101, 3, 2, 2, 2, 562,
	565, 7, 46, 2, 2, 563, 566, 5, 52, 27, 2, 564, 566, 5, 104, 53, 2, 565,
	563, 3, 2, 2, 2, 565, 564, 3, 2, 2, 2, 566, 569, 3, 2, 2, 2, 567, 569,
	7, 47, 2, 2, 568, 562, 3, 2, 2, 2, 568, 567, 3, 2, 2, 2, 569, 103, 3, 2,
	2, 2, 570, 571, 5, 22, 12, 2, 571, 572, 7, 12, 2, 2, 572, 577, 3, 2, 2,
	2, 573, 574, 5, 20, 11, 2, 574, 575, 7, 33, 2, 2, 575, 577, 3, 2, 2, 2,
	576, 570, 3, 2, 2, 2, 576, 573, 3, 2, 2, 2, 576, 577, 3, 2, 2, 2, 577,
	578, 3, 2, 2, 2, 578, 579, 5, 198, 100, 2, 579, 105, 3, 2, 2, 2, 580, 584,
	7, 48, 2, 2, 581, 585, 5, 198, 100, 2, 582, 585, 5, 108, 55, 2, 583, 585,
	5, 110, 56, 2, 584, 581, 3, 2, 2, 2, 584, 582, 3, 2, 2, 2, 584, 583, 3,
	2, 2, 2, 584, 585, 3, 2, 2, 2, 585, 586, 3, 2, 2, 2, 586, 587, 5, 40, 21,
	2, 587, 107, 3, 2, 2, 2, 588, 590, 5, 48, 25, 2, 589, 588, 3, 2, 2, 2,
	589, 590, 3, 2, 2, 2, 590, 591, 3, 2, 2, 2, 591, 593, 7, 34, 2, 2, 592,
	594, 5, 198, 100, 2, 593, 592, 3, 2, 2, 2, 593, 594, 3, 2, 2, 2, 594, 595,
	3, 2, 2, 2, 595, 597, 7, 34, 2, 2, 596, 598, 5, 48, 25, 2, 597, 596, 3,
	2, 2, 2, 597, 598, 3, 2, 2, 2, 598, 109, 3, 2, 2, 2, 599, 602, 5, 22, 12,
	2, 600, 602, 5, 20, 11, 2, 601, 599, 3, 2, 2, 2, 601, 600, 3, 2, 2, 2,
	602, 603, 3, 2, 2, 2, 603, 604, 7, 49, 2, 2, 604, 605, 5, 198, 100, 2,
	605, 111, 3, 2, 2, 2, 606, 609, 7, 50, 2, 2, 607, 610, 5, 198, 100, 2,
	608, 610, 5, 30, 16, 2, 609, 607, 3, 2, 2, 2, 609, 608, 3, 2, 2, 2, 610,
	113, 3, 2, 2, 2, 611, 618, 5, 116, 59, 2, 612, 618, 5, 118, 60, 2, 613,
	614, 7, 10, 2, 2, 614, 615, 5, 114, 58, 2, 615, 616, 7, 11, 2, 2, 616,
	618, 3, 2, 2, 2, 617, 611, 3, 2, 2, 2, 617, 612, 3, 2, 2, 2, 617, 613,
	3, 2, 2, 2, 618, 115, 3, 2, 2, 2, 619, 622, 7, 71, 2, 2, 620, 622, 5, 158,
	80, 2, 621, 619, 3, 2, 2, 2, 621, 620, 3, 2, 2, 2, 622, 117, 3, 2, 2, 2,
	623, 632, 5, 120, 61, 2, 624, 632, 5, 174, 88, 2, 625, 632, 5, 126, 64,
	2, 626, 632, 5, 138, 70, 2, 627, 632, 5, 128, 65, 2, 628, 632, 5, 130,
	66, 2, 629, 632, 5, 132, 67, 2, 630, 632, 5, 134, 68, 2, 631, 623, 3, 2,
	2, 2, 631, 624, 3, 2, 2, 2, 631, 625, 3, 2, 2, 2, 631, 626, 3, 2, 2, 2,
	631, 627, 3, 2, 2, 2, 631, 628, 3, 2, 2, 2, 631, 629, 3, 2, 2, 2, 631,
	630, 3, 2, 2, 2, 632, 119, 3, 2, 2, 2, 633, 634, 7, 51, 2, 2, 634, 635,
	5, 122, 62, 2, 635, 636, 7, 52, 2, 2, 636, 637, 5, 124, 63, 2, 637, 121,
	3, 2, 2, 2, 638, 639, 5, 198, 100, 2, 639, 123, 3, 2, 2, 2, 640, 641, 5,
	114, 58, 2, 641, 125, 3, 2, 2, 2, 642, 643, 7, 26, 2, 2, 643, 644, 5, 114,
	58, 2, 644, 127, 3, 2, 2, 2, 645, 646, 7, 53, 2, 2, 646, 652, 7, 5, 2,
	2, 647, 648, 5, 136, 69, 2, 648, 649, 5, 208, 105, 2, 649, 651, 3, 2, 2,
	2, 650, 647, 3, 2, 2, 2, 651, 654, 3, 2, 2, 2, 652, 650, 3, 2, 2, 2, 652,
	653, 3, 2, 2, 2, 653, 655, 3, 2, 2, 2, 654, 652, 3, 2, 2, 2, 655, 656,
	7, 6, 2, 2, 656, 129, 3, 2, 2, 2, 657, 658, 7, 51, 2, 2, 658, 659, 7, 52,
	2, 2, 659, 660, 5, 124, 63, 2, 660, 131, 3, 2, 2, 2, 661, 662, 7, 54, 2,
	2, 662, 663, 7, 51, 2, 2, 663, 664, 5, 114, 58, 2, 664, 665, 7, 52, 2,
	2, 665, 666, 5, 124, 63, 2, 666, 133, 3, 2, 2, 2, 667, 673, 7, 55, 2, 2,
	668, 669, 7, 55, 2, 2, 669, 673, 7, 19, 2, 2, 670, 671, 7, 19, 2, 2, 671,
	673, 7, 55, 2, 2, 672, 667, 3, 2, 2, 2, 672, 668, 3, 2, 2, 2, 672, 670,
	3, 2, 2, 2, 673, 674, 3, 2, 2, 2, 674, 675, 5, 124, 63, 2, 675, 135, 3,
	2, 2, 2, 676, 677, 6, 69, 2, 2, 677, 678, 7, 71, 2, 2, 678, 679, 5, 144,
	73, 2, 679, 680, 5, 142, 72, 2, 680, 685, 3, 2, 2, 2, 681, 685, 5, 116,
	59, 2, 682, 683, 7, 71, 2, 2, 683, 685, 5, 144, 73, 2, 684, 676, 3, 2,
	2, 2, 684, 681, 3, 2, 2, 2, 684, 682, 3, 2, 2, 2, 685, 137, 3, 2, 2, 2,
	686, 687, 7, 56, 2, 2, 687, 688, 5, 140, 71, 2, 688, 139, 3, 2, 2, 2, 689,
	690, 6, 71, 3, 2, 690, 691, 5, 144, 73, 2, 691, 692, 7, 7, 2, 2, 692, 693,
	5, 142, 72, 2, 693, 696, 3, 2, 2, 2, 694, 696, 5, 144, 73, 2, 695, 689,
	3, 2, 2, 2, 695, 694, 3, 2, 2, 2, 696, 141, 3, 2, 2, 2, 697, 702, 5, 114,
	58, 2, 698, 699, 7, 14, 2, 2, 699, 701, 5, 114, 58, 2, 700, 698, 3, 2,
	2, 2, 701, 704, 3, 2, 2, 2, 702, 700, 3, 2, 2, 2, 702, 703, 3, 2, 2, 2,
	703, 143, 3, 2, 2, 2, 704, 702, 3, 2, 2, 2, 705, 710, 7, 10, 2, 2, 706,
	708, 5, 146, 74, 2, 707, 709, 7, 14, 2, 2, 708, 707, 3, 2, 2, 2, 708, 709,
	3, 2, 2, 2, 709, 711, 3, 2, 2, 2, 710, 706, 3, 2, 2, 2, 710, 711, 3, 2,
	2, 2, 711, 712, 3, 2, 2, 2, 712, 714, 7, 11, 2, 2, 713, 705, 3, 2, 2, 2,
	713, 714, 3, 2, 2, 2, 714, 145, 3, 2, 2, 2, 715, 720, 5, 148, 75, 2, 716,
	717, 7, 14, 2, 2, 717, 719, 5, 148, 75, 2, 718, 716, 3, 2, 2, 2, 719, 722,
	3, 2, 2, 2, 720, 718, 3, 2, 2, 2, 720, 721, 3, 2, 2, 2, 721, 147, 3, 2,
	2, 2, 722, 720, 3, 2, 2, 2, 723, 725, 5, 20, 11, 2, 724, 723, 3, 2, 2,
	2, 724, 725, 3, 2, 2, 2, 725, 727, 3, 2, 2, 2, 726, 728, 7, 57, 2, 2, 727,
	726, 3, 2, 2, 2, 727, 728, 3, 2, 2, 2, 728, 729, 3, 2, 2, 2, 729, 730,
	5, 114, 58, 2, 730, 149, 3, 2, 2, 2, 731, 739, 5, 152, 77, 2, 732, 739,
	5, 156, 79, 2, 733, 739, 5, 194, 98, 2, 734, 735, 7, 10, 2, 2, 735, 736,
	5, 198, 100, 2, 736, 737, 7, 11, 2, 2, 737, 739, 3, 2, 2, 2, 738, 731,
	3, 2, 2, 2, 738, 732, 3, 2, 2, 2, 738, 733, 3, 2, 2, 2, 738, 734, 3, 2,
	2, 2, 739, 151, 3, 2, 2, 2, 740, 744, 5, 154, 78, 2, 741, 744, 5, 160,
	81, 2, 742, 744, 5, 180, 91, 2, 743, 740, 3, 2, 2, 2, 743, 741, 3, 2, 2,
	2, 743, 742, 3, 2, 2, 2, 744, 153, 3, 2, 2, 2, 745, 753, 7, 74, 2, 2, 746,
	753, 7, 75, 2, 2, 747, 753, 7, 76, 2, 2, 748, 753, 7, 77, 2, 2, 749, 753,
	7, 80, 2, 2, 750, 753, 9, 7, 2, 2, 751, 753, 7, 60, 2, 2, 752, 745, 3,
	2, 2, 2, 752, 746, 3, 2, 2, 2, 752, 747, 3, 2, 2, 2, 752, 748, 3, 2, 2,
	2, 752, 749, 3, 2, 2, 2, 752, 750, 3, 2, 2, 2, 752, 751, 3, 2, 2, 2, 753,
	155, 3, 2, 2, 2, 754, 758, 7, 13, 2, 2, 755, 758, 7, 71, 2, 2, 756, 758,
	5, 158, 80, 2, 757, 754, 3, 2, 2, 2, 757, 755, 3, 2, 2, 2, 757, 756, 3,
	2, 2, 2, 758, 157, 3, 2, 2, 2, 759, 760, 7, 71, 2, 2, 760, 761, 7, 8, 2,
	2, 761, 762, 7, 71, 2, 2, 762, 159, 3, 2, 2, 2, 763, 764, 5, 162, 82, 2,
	764, 765, 5, 164, 83, 2, 765, 161, 3, 2, 2, 2, 766, 776, 5, 174, 88, 2,
	767, 776, 5, 120, 61, 2, 768, 769, 7, 51, 2, 2, 769, 770, 7, 57, 2, 2,
	770, 771, 7, 52, 2, 2, 771, 776, 5, 124, 63, 2, 772, 776, 5, 130, 66, 2,
	773, 776, 5, 132, 67, 2, 774, 776, 5, 116, 59, 2, 775, 766, 3, 2, 2, 2,
	775, 767, 3, 2, 2, 2, 775, 768, 3, 2, 2, 2, 775, 772, 3, 2, 2, 2, 775,
	773, 3, 2, 2, 2, 775, 774, 3, 2, 2, 2, 776, 163, 3, 2, 2, 2, 777, 782,
	7, 5, 2, 2, 778, 780, 5, 166, 84, 2, 779, 781, 7, 14, 2, 2, 780, 779, 3,
	2, 2, 2, 780, 781, 3, 2, 2, 2, 781, 783, 3, 2, 2, 2, 782, 778, 3, 2, 2,
	2, 782, 783, 3, 2, 2, 2, 783, 784, 3, 2, 2, 2, 784, 785, 7, 6, 2, 2, 785,
	165, 3, 2, 2, 2, 786, 793, 5, 168, 85, 2, 787, 789, 7, 14, 2, 2, 788, 787,
	3, 2, 2, 2, 788, 789, 3, 2, 2, 2, 789, 790, 3, 2, 2, 2, 790, 792, 5, 168,
	85, 2, 791, 788, 3, 2, 2, 2, 792, 795, 3, 2, 2, 2, 793, 791, 3, 2, 2, 2,
	793, 794, 3, 2, 2, 2, 794, 167, 3, 2, 2, 2, 795, 793, 3, 2, 2, 2, 796,
	797, 5, 170, 86, 2, 797, 798, 7, 7, 2, 2, 798, 800, 3, 2, 2, 2, 799, 796,
	3, 2, 2, 2, 799, 800, 3, 2, 2, 2, 800, 801, 3, 2, 2, 2, 801, 802, 5, 172,
	87, 2, 802, 169, 3, 2, 2, 2, 803, 807, 7, 71, 2, 2, 804, 807, 5, 198, 100,
	2, 805, 807, 5, 164, 83, 2, 806, 803, 3, 2, 2, 2, 806, 804, 3, 2, 2, 2,
	806, 805, 3, 2, 2, 2, 807, 171, 3, 2, 2, 2, 808, 811, 5, 198, 100, 2, 809,
	811, 5, 164, 83, 2, 810, 808, 3, 2, 2, 2, 810, 809, 3, 2, 2, 2, 811, 173,
	3, 2, 2, 2, 812, 813, 7, 61, 2, 2, 813, 819, 7, 5, 2, 2, 814, 815, 5, 176,
	89, 2, 815, 816, 5, 208, 105, 2, 816, 818, 3, 2, 2, 2, 817, 814, 3, 2,
	2, 2, 818, 821, 3, 2, 2, 2, 819, 817, 3, 2, 2, 2, 819, 820, 3, 2, 2, 2,
	820, 822, 3, 2, 2, 2, 821, 819, 3, 2, 2, 2, 822, 823, 7, 6, 2, 2, 823,
	175, 3, 2, 2, 2, 824, 825, 6, 89, 4, 2, 825, 826, 5, 20, 11, 2, 826, 827,
	5, 114, 58, 2, 827, 830, 3, 2, 2, 2, 828, 830, 5, 178, 90, 2, 829, 824,
	3, 2, 2, 2, 829, 828, 3, 2, 2, 2, 830, 832, 3, 2, 2, 2, 831, 833, 7, 80,
	2, 2, 832, 831, 3, 2, 2, 2, 832, 833, 3, 2, 2, 2, 833, 177, 3, 2, 2, 2,
	834, 836, 7, 26, 2, 2, 835, 834, 3, 2, 2, 2, 835, 836, 3, 2, 2, 2, 836,
	837, 3, 2, 2, 2, 837, 838, 5, 116, 59, 2, 838, 179, 3, 2, 2, 2, 839, 840,
	7, 56, 2, 2, 840, 841, 5, 30, 16, 2, 841, 181, 3, 2, 2, 2, 842, 843, 8,
	92, 1, 2, 843, 846, 5, 150, 76, 2, 844, 846, 5, 206, 104, 2, 845, 842,
	3, 2, 2, 2, 845, 844, 3, 2, 2, 2, 846, 859, 3, 2, 2, 2, 847, 848, 12, 7,
	2, 2, 848, 858, 5, 184, 93, 2, 849, 850, 12, 6, 2, 2, 850, 858, 5, 186,
	94, 2, 851, 852, 12, 5, 2, 2, 852, 858, 5, 188, 95, 2, 853, 854, 12, 4,
	2, 2, 854, 858, 5, 190, 96, 2, 855, 856, 12, 3, 2, 2, 856, 858, 5, 192,
	97, 2, 857, 847, 3, 2, 2, 2, 857, 849, 3, 2, 2, 2, 857, 851, 3, 2, 2, 2,
	857, 853, 3, 2, 2, 2, 857, 855, 3, 2, 2, 2, 858, 861, 3, 2, 2, 2, 859,
	857, 3, 2, 2, 2, 859, 860, 3, 2, 2, 2, 860, 183, 3, 2, 2, 2, 861, 859,
	3, 2, 2, 2, 862, 863, 7, 8, 2, 2, 863, 864, 7, 71, 2, 2, 864, 185, 3, 2,
	2, 2, 865, 866, 7, 51, 2, 2, 866, 867, 5, 198, 100, 2, 867, 868, 7, 52,
	2, 2, 868, 187, 3, 2, 2, 2, 869, 885, 7, 51, 2, 2, 870, 872, 5, 198, 100,
	2, 871, 870, 3, 2, 2, 2, 871, 872, 3, 2, 2, 2, 872, 873, 3, 2, 2, 2, 873,
	875, 7, 7, 2, 2, 874, 876, 5, 198, 100, 2, 875, 874, 3, 2, 2, 2, 875, 876,
	3, 2, 2, 2, 876, 886, 3, 2, 2, 2, 877, 879, 5, 198, 100, 2, 878, 877, 3,
	2, 2, 2, 878, 879, 3, 2, 2, 2, 879, 880, 3, 2, 2, 2, 880, 881, 7, 7, 2,
	2, 881, 882, 5, 198, 100, 2, 882, 883, 7, 7, 2, 2, 883, 884, 5, 198, 100,
	2, 884, 886, 3, 2, 2, 2, 885, 871, 3, 2, 2, 2, 885, 878, 3, 2, 2, 2, 886,
	887, 3, 2, 2, 2, 887, 888, 7, 52, 2, 2, 888, 189, 3, 2, 2, 2, 889, 890,
	7, 8, 2, 2, 890, 891, 7, 10, 2, 2, 891, 892, 5, 114, 58, 2, 892, 893, 7,
	11, 2, 2, 893, 191, 3, 2, 2, 2, 894, 909, 7, 10, 2, 2, 895, 902, 5, 22,
	12, 2, 896, 899, 5, 114, 58, 2, 897, 898, 7, 14, 2, 2, 898, 900, 5, 22,
	12, 2, 899, 897, 3, 2, 2, 2, 899, 900, 3, 2, 2, 2, 900, 902, 3, 2, 2, 2,
	901, 895, 3, 2, 2, 2, 901, 896, 3, 2, 2, 2, 902, 904, 3, 2, 2, 2, 903,
	905, 7, 57, 2, 2, 904, 903, 3, 2, 2, 2, 904, 905, 3, 2, 2, 2, 905, 907,
	3, 2, 2, 2, 906, 908, 7, 14, 2, 2, 907, 906, 3, 2, 2, 2, 907, 908, 3, 2,
	2, 2, 908, 910, 3, 2, 2, 2, 909, 901, 3, 2, 2, 2, 909, 910, 3, 2, 2, 2,
	910, 911, 3, 2, 2, 2, 911, 912, 7, 11, 2, 2, 912, 193, 3, 2, 2, 2, 913,
	914, 5, 196, 99, 2, 914, 915, 7, 8, 2, 2, 915, 916, 7, 71, 2, 2, 916, 195,
	3, 2, 2, 2, 917, 928, 5, 116, 59, 2, 918, 919, 7, 10, 2, 2, 919, 920, 7,
	26, 2, 2, 920, 921, 5, 116, 59, 2, 921, 922, 7, 11, 2, 2, 922, 928, 3,
	2, 2, 2, 923, 924, 7, 10, 2, 2, 924, 925, 5, 196, 99, 2, 925, 926, 7, 11,
	2, 2, 926, 928, 3, 2, 2, 2, 927, 917, 3, 2, 2, 2, 927, 918, 3, 2, 2, 2,
	927, 923, 3, 2, 2, 2, 928, 197, 3, 2, 2, 2, 929, 930, 8, 100, 1, 2, 930,
	931, 5, 202, 102, 2, 931, 938, 3, 2, 2, 2, 932, 933, 12, 3, 2, 2, 933,
	934, 5, 200, 101, 2, 934, 935, 5, 198, 100, 4, 935, 937, 3, 2, 2, 2, 936,
	932, 3, 2, 2, 2, 937, 940, 3, 2, 2, 2, 938, 936, 3, 2, 2, 2, 938, 939,
	3, 2, 2, 2, 939, 199, 3, 2, 2, 2, 940, 938, 3, 2, 2, 2, 941, 942, 9, 8,
	2, 2, 942, 201, 3, 2, 2, 2, 943, 948, 5, 182, 92, 2, 944, 945, 5, 204,
	103, 2, 945, 946, 5, 202, 102, 2, 946, 948, 3, 2, 2, 2, 947, 943, 3, 2,
	2, 2, 947, 944, 3, 2, 2, 2, 948, 203, 3, 2, 2, 2, 949, 950, 9, 9, 2, 2,
	950, 205, 3, 2, 2, 2, 951, 952, 5, 114, 58, 2, 952, 953, 7, 10, 2, 2, 953,
	955, 5, 198, 100, 2, 954, 956, 7, 14, 2, 2, 955, 954, 3, 2, 2, 2, 955,
	956, 3, 2, 2, 2, 956, 957, 3, 2, 2, 2, 957, 958, 7, 11, 2, 2, 958, 207,
	3, 2, 2, 2, 959, 964, 7, 34, 2, 2, 960, 964, 7, 2, 2, 3, 961, 964, 6, 105,
	11, 2, 962, 964, 6, 105, 12, 2, 963, 959, 3, 2, 2, 2, 963, 960, 3, 2, 2,
	2, 963, 961, 3, 2, 2, 2, 963, 962, 3, 2, 2, 2, 964, 209, 3, 2, 2, 2, 102,
	217, 225, 241, 245, 250, 257, 262, 272, 276, 280, 284, 291, 297, 307, 311,
	319, 325, 330, 344, 348, 354, 358, 369, 386, 403, 411, 427, 443, 447, 451,
	465, 472, 474, 478, 484, 487, 493, 504, 510, 517, 524, 538, 545, 553, 565,
	568, 576, 584, 589, 593, 597, 601, 609, 617, 621, 631, 652, 672, 684, 695,
	702, 708, 710, 713, 720, 724, 727, 738, 743, 752, 757, 775, 780, 782, 788,
	793, 799, 806, 810, 819, 829, 832, 835, 845, 857, 859, 871, 875, 878, 885,
	899, 901, 904, 907, 909, 927, 938, 947, 955, 963,
}
var deserializer = antlr.NewATNDeserializer(nil)
var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)

var literalNames = []string{
	"", "'package'", "'import'", "'{'", "'}'", "':'", "'.'", "'const'", "'('",
	"')'", "'='", "'_'", "','", "'type'", "'->'", "'::'", "'var'", "'<-'",
	"'++'", "'--'", "'+'", "'-'", "'|'", "'^'", "'*'", "'/'", "'%'", "'<<'",
	"'>>'", "'&'", "'&^'", "':='", "';'", "'return'", "'break'", "'continue'",
	"'goto'", "'fallthrough'", "'defer'", "'if'", "'else'", "'switch'", "'=>'",
	"'select'", "'case'", "'default'", "'for'", "'in'", "'go'", "'['", "']'",
	"'interface'", "'map'", "'chan'", "'func'", "'...'", "'true'", "'false'",
	"'nil'", "'struct'", "'||'", "'&&'", "'=='", "'!='", "'<'", "'<='", "'>'",
	"'>='", "'!'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "IDENTIFIER",
	"KEYWORD", "BINARY_OP", "INT_LIT", "FLOAT_LIT", "IMAGINARY_LIT", "RUNE_LIT",
	"LITTLE_U_VALUE", "BIG_U_VALUE", "STRING_LIT", "WS", "COMMENT", "TERMINATOR",
	"LINE_COMMENT",
}

var ruleNames = []string{
	"sourceFile", "packageClause", "importDecl", "importSpec", "importPath",
	"topLevelDecl", "declaration", "constDecl", "constSpec", "identifierList",
	"expressionList", "typeDecl", "typeSpec", "functionDecl", "function", "methodDecl",
	"receiver", "varDecl", "varSpec", "block", "statementList", "statementNoBlock",
	"statement", "simpleStmt", "expressionStmt", "sendStmt", "incDecStmt",
	"assignment", "assign_op", "shortVarDecl", "emptyStmt", "labeledStmt",
	"returnStmt", "breakStmt", "continueStmt", "gotoStmt", "fallthroughStmt",
	"deferStmt", "ifStmt", "switchStmt", "exprSwitchStmt", "exprCaseClause",
	"exprSwitchCase", "typeSwitchStmt", "typeSwitchGuard", "typeCaseClause",
	"typeSwitchCase", "typeList", "selectStmt", "commClause", "commCase", "recvStmt",
	"forStmt", "forClause", "rangeClause", "goStmt", "type_", "typeName", "typeLit",
	"arrayType", "arrayLength", "elementType", "pointerType", "interfaceType",
	"sliceType", "mapType", "channelType", "methodSpec", "functionType", "signature",
	"result", "parameters", "parameterList", "parameterDecl", "operand", "literal",
	"basicLit", "operandName", "qualifiedIdent", "compositeLit", "literalType",
	"literalValue", "elementList", "keyedElement", "key", "element", "structType",
	"fieldDecl", "anonymousField", "functionLit", "primaryExpr", "selector",
	"index", "slice", "typeAssertion", "arguments", "methodExpr", "receiverType",
	"expression", "binary_op", "unaryExpr", "unary_op", "conversion", "eos",
}
var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))

func init() {
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

type OgParser struct {
	*antlr.BaseParser
}

func NewOgParser(input antlr.TokenStream) *OgParser {
	this := new(OgParser)

	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Og.g4"

	return this
}

/**
 * Returns {@code true} iff on the current index of the parser's
 * token stream a token exists on the {@code HIDDEN} channel which
 * either is a line terminator, or is a multi line comment that
 * contains a line terminator.
 *
 * @return {@code true} iff on the current index of the parser's
 * token stream a token exists on the {@code HIDDEN} channel which
 * either is a line terminator, or is a multi line comment that
 * contains a line terminator.
 */
func (this *OgParser) lineTerminatorAhead() bool {
	// // Get the token ahead of the current index.
	possibleIndexEosToken := this.BaseParser.GetCurrentToken().GetTokenIndex() - 1

	ahead := this.BaseParser.GetTokenStream().Get(possibleIndexEosToken)

	if ahead.GetChannel() != antlr.LexerHidden {
		// We're only interested in tokens on the HIDDEN channel.
		return false
	}

	if ahead.GetTokenType() == OgLexerTERMINATOR {
		// There is definitely a line terminator ahead.
		return true
	}

	if ahead.GetTokenType() == OgLexerWS {
		// Get the token ahead of the current whitespaces.
		possibleIndexEosToken = this.BaseParser.GetCurrentToken().GetTokenIndex() - 2

		ahead = this.BaseParser.GetTokenStream().Get(possibleIndexEosToken)
	}

	// Get the token's text and type.
	text := ahead.GetText()

	t := ahead.GetTokenType()

	// Check if the token is, or contains a line terminator.
	return (t == OgLexerCOMMENT && (strings.Contains(text, "\r") || strings.Contains(text, "\n"))) ||
		(t == OgLexerTERMINATOR)
}

/**
 * Returns {@code true} if no line terminator exists between the specified
 * token offset and the prior one on the {@code HIDDEN} channel.
 *
 * @return {@code true} if no line terminator exists between the specified
 * token offset and the prior one on the {@code HIDDEN} channel.
 */
func (this *OgParser) noTerminatorBetween(tokenOffset int) bool {
	stream := this.BaseParser.GetTokenStream().(*antlr.CommonTokenStream)

	tokens := stream.GetHiddenTokensToLeft(stream.LT(tokenOffset).GetTokenIndex(), antlr.TokenHiddenChannel)

	if tokens == nil {
		return true
	}

	for _, t := range tokens {
		if strings.Contains(t.GetText(), "\n") {
			return false
		}
	}

	return true
}

/**
 * Returns {@code true} if no line terminator exists after any encounterd
 * parameters beyond the specified token offset and the next on the
 * {@code HIDDEN} channel.
 *
 * @return {@code true} if no line terminator exists after any encounterd
 * parameters beyond the specified token offset and the next on the
 * {@code HIDDEN} channel.
 */
func (this *OgParser) noTerminatorAfterParams(tokenOffset int) bool {
	stream := this.BaseParser.GetTokenStream()

	leftParams := 1
	rightParams := 0
	var value string

	if stream.LT(tokenOffset).GetText() == "(" {
		// Scan past parameters
		for leftParams != rightParams {
			tokenOffset++

			value = stream.LT(tokenOffset).GetText()

			if value == "(" {
				leftParams++
			} else if value == ")" {
				rightParams++
			}
		}

		tokenOffset++

		return this.noTerminatorBetween(tokenOffset)
	}

	return true
}

// OgParser tokens.
const (
	OgParserEOF            = antlr.TokenEOF
	OgParserT__0           = 1
	OgParserT__1           = 2
	OgParserT__2           = 3
	OgParserT__3           = 4
	OgParserT__4           = 5
	OgParserT__5           = 6
	OgParserT__6           = 7
	OgParserT__7           = 8
	OgParserT__8           = 9
	OgParserT__9           = 10
	OgParserT__10          = 11
	OgParserT__11          = 12
	OgParserT__12          = 13
	OgParserT__13          = 14
	OgParserT__14          = 15
	OgParserT__15          = 16
	OgParserT__16          = 17
	OgParserT__17          = 18
	OgParserT__18          = 19
	OgParserT__19          = 20
	OgParserT__20          = 21
	OgParserT__21          = 22
	OgParserT__22          = 23
	OgParserT__23          = 24
	OgParserT__24          = 25
	OgParserT__25          = 26
	OgParserT__26          = 27
	OgParserT__27          = 28
	OgParserT__28          = 29
	OgParserT__29          = 30
	OgParserT__30          = 31
	OgParserT__31          = 32
	OgParserT__32          = 33
	OgParserT__33          = 34
	OgParserT__34          = 35
	OgParserT__35          = 36
	OgParserT__36          = 37
	OgParserT__37          = 38
	OgParserT__38          = 39
	OgParserT__39          = 40
	OgParserT__40          = 41
	OgParserT__41          = 42
	OgParserT__42          = 43
	OgParserT__43          = 44
	OgParserT__44          = 45
	OgParserT__45          = 46
	OgParserT__46          = 47
	OgParserT__47          = 48
	OgParserT__48          = 49
	OgParserT__49          = 50
	OgParserT__50          = 51
	OgParserT__51          = 52
	OgParserT__52          = 53
	OgParserT__53          = 54
	OgParserT__54          = 55
	OgParserT__55          = 56
	OgParserT__56          = 57
	OgParserT__57          = 58
	OgParserT__58          = 59
	OgParserT__59          = 60
	OgParserT__60          = 61
	OgParserT__61          = 62
	OgParserT__62          = 63
	OgParserT__63          = 64
	OgParserT__64          = 65
	OgParserT__65          = 66
	OgParserT__66          = 67
	OgParserT__67          = 68
	OgParserIDENTIFIER     = 69
	OgParserKEYWORD        = 70
	OgParserBINARY_OP      = 71
	OgParserINT_LIT        = 72
	OgParserFLOAT_LIT      = 73
	OgParserIMAGINARY_LIT  = 74
	OgParserRUNE_LIT       = 75
	OgParserLITTLE_U_VALUE = 76
	OgParserBIG_U_VALUE    = 77
	OgParserSTRING_LIT     = 78
	OgParserWS             = 79
	OgParserCOMMENT        = 80
	OgParserTERMINATOR     = 81
	OgParserLINE_COMMENT   = 82
)

// OgParser rules.
const (
	OgParserRULE_sourceFile       = 0
	OgParserRULE_packageClause    = 1
	OgParserRULE_importDecl       = 2
	OgParserRULE_importSpec       = 3
	OgParserRULE_importPath       = 4
	OgParserRULE_topLevelDecl     = 5
	OgParserRULE_declaration      = 6
	OgParserRULE_constDecl        = 7
	OgParserRULE_constSpec        = 8
	OgParserRULE_identifierList   = 9
	OgParserRULE_expressionList   = 10
	OgParserRULE_typeDecl         = 11
	OgParserRULE_typeSpec         = 12
	OgParserRULE_functionDecl     = 13
	OgParserRULE_function         = 14
	OgParserRULE_methodDecl       = 15
	OgParserRULE_receiver         = 16
	OgParserRULE_varDecl          = 17
	OgParserRULE_varSpec          = 18
	OgParserRULE_block            = 19
	OgParserRULE_statementList    = 20
	OgParserRULE_statementNoBlock = 21
	OgParserRULE_statement        = 22
	OgParserRULE_simpleStmt       = 23
	OgParserRULE_expressionStmt   = 24
	OgParserRULE_sendStmt         = 25
	OgParserRULE_incDecStmt       = 26
	OgParserRULE_assignment       = 27
	OgParserRULE_assign_op        = 28
	OgParserRULE_shortVarDecl     = 29
	OgParserRULE_emptyStmt        = 30
	OgParserRULE_labeledStmt      = 31
	OgParserRULE_returnStmt       = 32
	OgParserRULE_breakStmt        = 33
	OgParserRULE_continueStmt     = 34
	OgParserRULE_gotoStmt         = 35
	OgParserRULE_fallthroughStmt  = 36
	OgParserRULE_deferStmt        = 37
	OgParserRULE_ifStmt           = 38
	OgParserRULE_switchStmt       = 39
	OgParserRULE_exprSwitchStmt   = 40
	OgParserRULE_exprCaseClause   = 41
	OgParserRULE_exprSwitchCase   = 42
	OgParserRULE_typeSwitchStmt   = 43
	OgParserRULE_typeSwitchGuard  = 44
	OgParserRULE_typeCaseClause   = 45
	OgParserRULE_typeSwitchCase   = 46
	OgParserRULE_typeList         = 47
	OgParserRULE_selectStmt       = 48
	OgParserRULE_commClause       = 49
	OgParserRULE_commCase         = 50
	OgParserRULE_recvStmt         = 51
	OgParserRULE_forStmt          = 52
	OgParserRULE_forClause        = 53
	OgParserRULE_rangeClause      = 54
	OgParserRULE_goStmt           = 55
	OgParserRULE_type_            = 56
	OgParserRULE_typeName         = 57
	OgParserRULE_typeLit          = 58
	OgParserRULE_arrayType        = 59
	OgParserRULE_arrayLength      = 60
	OgParserRULE_elementType      = 61
	OgParserRULE_pointerType      = 62
	OgParserRULE_interfaceType    = 63
	OgParserRULE_sliceType        = 64
	OgParserRULE_mapType          = 65
	OgParserRULE_channelType      = 66
	OgParserRULE_methodSpec       = 67
	OgParserRULE_functionType     = 68
	OgParserRULE_signature        = 69
	OgParserRULE_result           = 70
	OgParserRULE_parameters       = 71
	OgParserRULE_parameterList    = 72
	OgParserRULE_parameterDecl    = 73
	OgParserRULE_operand          = 74
	OgParserRULE_literal          = 75
	OgParserRULE_basicLit         = 76
	OgParserRULE_operandName      = 77
	OgParserRULE_qualifiedIdent   = 78
	OgParserRULE_compositeLit     = 79
	OgParserRULE_literalType      = 80
	OgParserRULE_literalValue     = 81
	OgParserRULE_elementList      = 82
	OgParserRULE_keyedElement     = 83
	OgParserRULE_key              = 84
	OgParserRULE_element          = 85
	OgParserRULE_structType       = 86
	OgParserRULE_fieldDecl        = 87
	OgParserRULE_anonymousField   = 88
	OgParserRULE_functionLit      = 89
	OgParserRULE_primaryExpr      = 90
	OgParserRULE_selector         = 91
	OgParserRULE_index            = 92
	OgParserRULE_slice            = 93
	OgParserRULE_typeAssertion    = 94
	OgParserRULE_arguments        = 95
	OgParserRULE_methodExpr       = 96
	OgParserRULE_receiverType     = 97
	OgParserRULE_expression       = 98
	OgParserRULE_binary_op        = 99
	OgParserRULE_unaryExpr        = 100
	OgParserRULE_unary_op         = 101
	OgParserRULE_conversion       = 102
	OgParserRULE_eos              = 103
)

// ISourceFileContext is an interface to support dynamic dispatch.
type ISourceFileContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSourceFileContext differentiates from other interfaces.
	IsSourceFileContext()
}

type SourceFileContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySourceFileContext() *SourceFileContext {
	var p = new(SourceFileContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_sourceFile
	return p
}

func (*SourceFileContext) IsSourceFileContext() {}

func NewSourceFileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SourceFileContext {
	var p = new(SourceFileContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_sourceFile

	return p
}

func (s *SourceFileContext) GetParser() antlr.Parser { return s.parser }

func (s *SourceFileContext) PackageClause() IPackageClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPackageClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPackageClauseContext)
}

func (s *SourceFileContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *SourceFileContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *SourceFileContext) EOF() antlr.TerminalNode {
	return s.GetToken(OgParserEOF, 0)
}

func (s *SourceFileContext) AllImportDecl() []IImportDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportDeclContext)(nil)).Elem())
	var tst = make([]IImportDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportDeclContext)
		}
	}

	return tst
}

func (s *SourceFileContext) ImportDecl(i int) IImportDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportDeclContext)
}

func (s *SourceFileContext) AllTopLevelDecl() []ITopLevelDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITopLevelDeclContext)(nil)).Elem())
	var tst = make([]ITopLevelDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITopLevelDeclContext)
		}
	}

	return tst
}

func (s *SourceFileContext) TopLevelDecl(i int) ITopLevelDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITopLevelDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITopLevelDeclContext)
}

func (s *SourceFileContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SourceFileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SourceFileContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterSourceFile(s)
	}
}

func (s *SourceFileContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitSourceFile(s)
	}
}

func (s *SourceFileContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case SourceFileVisitor:
		return t.VisitSourceFile(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) SourceFile() (localctx ISourceFileContext) {
	localctx = NewSourceFileContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, OgParserRULE_sourceFile)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(208)
		p.PackageClause()
	}
	{
		p.SetState(209)
		p.Eos()
	}
	p.SetState(215)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == OgParserT__1 {
		{
			p.SetState(210)
			p.ImportDecl()
		}
		{
			p.SetState(211)
			p.Eos()
		}

		p.SetState(217)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(223)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__6)|(1<<OgParserT__12)|(1<<OgParserT__15))) != 0) || _la == OgParserIDENTIFIER {
		{
			p.SetState(218)
			p.TopLevelDecl()
		}
		{
			p.SetState(219)
			p.Eos()
		}

		p.SetState(225)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(226)
		p.Match(OgParserEOF)
	}

	return localctx
}

// IPackageClauseContext is an interface to support dynamic dispatch.
type IPackageClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPackageClauseContext differentiates from other interfaces.
	IsPackageClauseContext()
}

type PackageClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPackageClauseContext() *PackageClauseContext {
	var p = new(PackageClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_packageClause
	return p
}

func (*PackageClauseContext) IsPackageClauseContext() {}

func NewPackageClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PackageClauseContext {
	var p = new(PackageClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_packageClause

	return p
}

func (s *PackageClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *PackageClauseContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *PackageClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PackageClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PackageClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterPackageClause(s)
	}
}

func (s *PackageClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitPackageClause(s)
	}
}

func (s *PackageClauseContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case PackageClauseVisitor:
		return t.VisitPackageClause(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) PackageClause() (localctx IPackageClauseContext) {
	localctx = NewPackageClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, OgParserRULE_packageClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(228)
		p.Match(OgParserT__0)
	}
	{
		p.SetState(229)
		p.Match(OgParserIDENTIFIER)
	}

	return localctx
}

// IImportDeclContext is an interface to support dynamic dispatch.
type IImportDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDeclContext differentiates from other interfaces.
	IsImportDeclContext()
}

type ImportDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclContext() *ImportDeclContext {
	var p = new(ImportDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_importDecl
	return p
}

func (*ImportDeclContext) IsImportDeclContext() {}

func NewImportDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclContext {
	var p = new(ImportDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_importDecl

	return p
}

func (s *ImportDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclContext) AllImportSpec() []IImportSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportSpecContext)(nil)).Elem())
	var tst = make([]IImportSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportSpecContext)
		}
	}

	return tst
}

func (s *ImportDeclContext) ImportSpec(i int) IImportSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportSpecContext)
}

func (s *ImportDeclContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *ImportDeclContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *ImportDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterImportDecl(s)
	}
}

func (s *ImportDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitImportDecl(s)
	}
}

func (s *ImportDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ImportDeclVisitor:
		return t.VisitImportDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ImportDecl() (localctx IImportDeclContext) {
	localctx = NewImportDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, OgParserRULE_importDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(231)
		p.Match(OgParserT__1)
	}
	p.SetState(243)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserIDENTIFIER, OgParserSTRING_LIT:
		{
			p.SetState(232)
			p.ImportSpec()
		}

	case OgParserT__2:
		{
			p.SetState(233)
			p.Match(OgParserT__2)
		}
		p.SetState(239)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == OgParserIDENTIFIER || _la == OgParserSTRING_LIT {
			{
				p.SetState(234)
				p.ImportSpec()
			}
			{
				p.SetState(235)
				p.Eos()
			}

			p.SetState(241)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(242)
			p.Match(OgParserT__3)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IImportSpecContext is an interface to support dynamic dispatch.
type IImportSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportSpecContext differentiates from other interfaces.
	IsImportSpecContext()
}

type ImportSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportSpecContext() *ImportSpecContext {
	var p = new(ImportSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_importSpec
	return p
}

func (*ImportSpecContext) IsImportSpecContext() {}

func NewImportSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportSpecContext {
	var p = new(ImportSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_importSpec

	return p
}

func (s *ImportSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportSpecContext) ImportPath() IImportPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportPathContext)
}

func (s *ImportSpecContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *ImportSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterImportSpec(s)
	}
}

func (s *ImportSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitImportSpec(s)
	}
}

func (s *ImportSpecContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ImportSpecVisitor:
		return t.VisitImportSpec(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ImportSpec() (localctx IImportSpecContext) {
	localctx = NewImportSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, OgParserRULE_importSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(245)
		p.ImportPath()
	}
	p.SetState(248)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 4, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(246)
			p.Match(OgParserT__4)
		}
		p.SetState(247)
		_la = p.GetTokenStream().LA(1)

		if !(_la == OgParserT__5 || _la == OgParserIDENTIFIER) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}

	return localctx
}

// IImportPathContext is an interface to support dynamic dispatch.
type IImportPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportPathContext differentiates from other interfaces.
	IsImportPathContext()
}

type ImportPathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathContext() *ImportPathContext {
	var p = new(ImportPathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_importPath
	return p
}

func (*ImportPathContext) IsImportPathContext() {}

func NewImportPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathContext {
	var p = new(ImportPathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_importPath

	return p
}

func (s *ImportPathContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathContext) STRING_LIT() antlr.TerminalNode {
	return s.GetToken(OgParserSTRING_LIT, 0)
}

func (s *ImportPathContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *ImportPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportPathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterImportPath(s)
	}
}

func (s *ImportPathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitImportPath(s)
	}
}

func (s *ImportPathContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ImportPathVisitor:
		return t.VisitImportPath(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ImportPath() (localctx IImportPathContext) {
	localctx = NewImportPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, OgParserRULE_importPath)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(250)
	_la = p.GetTokenStream().LA(1)

	if !(_la == OgParserIDENTIFIER || _la == OgParserSTRING_LIT) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// ITopLevelDeclContext is an interface to support dynamic dispatch.
type ITopLevelDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTopLevelDeclContext differentiates from other interfaces.
	IsTopLevelDeclContext()
}

type TopLevelDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTopLevelDeclContext() *TopLevelDeclContext {
	var p = new(TopLevelDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_topLevelDecl
	return p
}

func (*TopLevelDeclContext) IsTopLevelDeclContext() {}

func NewTopLevelDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TopLevelDeclContext {
	var p = new(TopLevelDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_topLevelDecl

	return p
}

func (s *TopLevelDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *TopLevelDeclContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *TopLevelDeclContext) FunctionDecl() IFunctionDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDeclContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclContext)
}

func (s *TopLevelDeclContext) MethodDecl() IMethodDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodDeclContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodDeclContext)
}

func (s *TopLevelDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TopLevelDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TopLevelDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTopLevelDecl(s)
	}
}

func (s *TopLevelDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTopLevelDecl(s)
	}
}

func (s *TopLevelDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TopLevelDeclVisitor:
		return t.VisitTopLevelDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TopLevelDecl() (localctx ITopLevelDeclContext) {
	localctx = NewTopLevelDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, OgParserRULE_topLevelDecl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(255)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 5, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(252)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(253)
			p.FunctionDecl()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(254)
			p.MethodDecl()
		}

	}

	return localctx
}

// IDeclarationContext is an interface to support dynamic dispatch.
type IDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeclarationContext differentiates from other interfaces.
	IsDeclarationContext()
}

type DeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeclarationContext() *DeclarationContext {
	var p = new(DeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_declaration
	return p
}

func (*DeclarationContext) IsDeclarationContext() {}

func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeclarationContext {
	var p = new(DeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_declaration

	return p
}

func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *DeclarationContext) ConstDecl() IConstDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstDeclContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstDeclContext)
}

func (s *DeclarationContext) TypeDecl() ITypeDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDeclContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeDeclContext)
}

func (s *DeclarationContext) VarDecl() IVarDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVarDeclContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVarDeclContext)
}

func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterDeclaration(s)
	}
}

func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitDeclaration(s)
	}
}

func (s *DeclarationContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case DeclarationVisitor:
		return t.VisitDeclaration(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Declaration() (localctx IDeclarationContext) {
	localctx = NewDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, OgParserRULE_declaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(260)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserT__6:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(257)
			p.ConstDecl()
		}

	case OgParserT__12:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(258)
			p.TypeDecl()
		}

	case OgParserT__15:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(259)
			p.VarDecl()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstDeclContext is an interface to support dynamic dispatch.
type IConstDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstDeclContext differentiates from other interfaces.
	IsConstDeclContext()
}

type ConstDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstDeclContext() *ConstDeclContext {
	var p = new(ConstDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_constDecl
	return p
}

func (*ConstDeclContext) IsConstDeclContext() {}

func NewConstDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstDeclContext {
	var p = new(ConstDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_constDecl

	return p
}

func (s *ConstDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstDeclContext) AllConstSpec() []IConstSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstSpecContext)(nil)).Elem())
	var tst = make([]IConstSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstSpecContext)
		}
	}

	return tst
}

func (s *ConstDeclContext) ConstSpec(i int) IConstSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstSpecContext)
}

func (s *ConstDeclContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *ConstDeclContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *ConstDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterConstDecl(s)
	}
}

func (s *ConstDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitConstDecl(s)
	}
}

func (s *ConstDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ConstDeclVisitor:
		return t.VisitConstDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ConstDecl() (localctx IConstDeclContext) {
	localctx = NewConstDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, OgParserRULE_constDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(262)
		p.Match(OgParserT__6)
	}
	p.SetState(274)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserT__10, OgParserIDENTIFIER:
		{
			p.SetState(263)
			p.ConstSpec()
		}

	case OgParserT__7:
		{
			p.SetState(264)
			p.Match(OgParserT__7)
		}
		p.SetState(270)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == OgParserT__10 || _la == OgParserIDENTIFIER {
			{
				p.SetState(265)
				p.ConstSpec()
			}
			{
				p.SetState(266)
				p.Eos()
			}

			p.SetState(272)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(273)
			p.Match(OgParserT__8)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IConstSpecContext is an interface to support dynamic dispatch.
type IConstSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConstSpecContext differentiates from other interfaces.
	IsConstSpecContext()
}

type ConstSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstSpecContext() *ConstSpecContext {
	var p = new(ConstSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_constSpec
	return p
}

func (*ConstSpecContext) IsConstSpecContext() {}

func NewConstSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstSpecContext {
	var p = new(ConstSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_constSpec

	return p
}

func (s *ConstSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstSpecContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *ConstSpecContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ConstSpecContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ConstSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterConstSpec(s)
	}
}

func (s *ConstSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitConstSpec(s)
	}
}

func (s *ConstSpecContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ConstSpecVisitor:
		return t.VisitConstSpec(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ConstSpec() (localctx IConstSpecContext) {
	localctx = NewConstSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, OgParserRULE_constSpec)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(276)
		p.IdentifierList()
	}
	p.SetState(282)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 10, p.GetParserRuleContext()) == 1 {
		p.SetState(278)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__16)|(1<<OgParserT__23))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__58-49))|(1<<(OgParserIDENTIFIER-49)))) != 0) {
			{
				p.SetState(277)
				p.Type_()
			}

		}
		{
			p.SetState(280)
			p.Match(OgParserT__9)
		}
		{
			p.SetState(281)
			p.ExpressionList()
		}

	}

	return localctx
}

// IIdentifierListContext is an interface to support dynamic dispatch.
type IIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierListContext differentiates from other interfaces.
	IsIdentifierListContext()
}

type IdentifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierListContext() *IdentifierListContext {
	var p = new(IdentifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_identifierList
	return p
}

func (*IdentifierListContext) IsIdentifierListContext() {}

func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierListContext {
	var p = new(IdentifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_identifierList

	return p
}

func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierListContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(OgParserIDENTIFIER)
}

func (s *IdentifierListContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, i)
}

func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterIdentifierList(s)
	}
}

func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitIdentifierList(s)
	}
}

func (s *IdentifierListContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case IdentifierListVisitor:
		return t.VisitIdentifierList(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) IdentifierList() (localctx IIdentifierListContext) {
	localctx = NewIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, OgParserRULE_identifierList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(284)
	_la = p.GetTokenStream().LA(1)

	if !(_la == OgParserT__10 || _la == OgParserIDENTIFIER) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}
	p.SetState(289)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(285)
				p.Match(OgParserT__11)
			}
			p.SetState(286)
			_la = p.GetTokenStream().LA(1)

			if !(_la == OgParserT__10 || _la == OgParserIDENTIFIER) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}

		}
		p.SetState(291)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext())
	}

	return localctx
}

// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterExpressionList(s)
	}
}

func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitExpressionList(s)
	}
}

func (s *ExpressionListContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ExpressionListVisitor:
		return t.VisitExpressionList(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ExpressionList() (localctx IExpressionListContext) {
	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, OgParserRULE_expressionList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(292)
		p.expression(0)
	}
	p.SetState(295)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(293)
			p.Match(OgParserT__11)
		}
		{
			p.SetState(294)
			p.ExpressionList()
		}

	}

	return localctx
}

// ITypeDeclContext is an interface to support dynamic dispatch.
type ITypeDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeDeclContext differentiates from other interfaces.
	IsTypeDeclContext()
}

type TypeDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDeclContext() *TypeDeclContext {
	var p = new(TypeDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeDecl
	return p
}

func (*TypeDeclContext) IsTypeDeclContext() {}

func NewTypeDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDeclContext {
	var p = new(TypeDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeDecl

	return p
}

func (s *TypeDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDeclContext) AllTypeSpec() []ITypeSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeSpecContext)(nil)).Elem())
	var tst = make([]ITypeSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeSpecContext)
		}
	}

	return tst
}

func (s *TypeDeclContext) TypeSpec(i int) ITypeSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeSpecContext)
}

func (s *TypeDeclContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *TypeDeclContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *TypeDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeDecl(s)
	}
}

func (s *TypeDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeDecl(s)
	}
}

func (s *TypeDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeDeclVisitor:
		return t.VisitTypeDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeDecl() (localctx ITypeDeclContext) {
	localctx = NewTypeDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, OgParserRULE_typeDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(297)
		p.Match(OgParserT__12)
	}
	p.SetState(309)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserIDENTIFIER:
		{
			p.SetState(298)
			p.TypeSpec()
		}

	case OgParserT__7:
		{
			p.SetState(299)
			p.Match(OgParserT__7)
		}
		p.SetState(305)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == OgParserIDENTIFIER {
			{
				p.SetState(300)
				p.TypeSpec()
			}
			{
				p.SetState(301)
				p.Eos()
			}

			p.SetState(307)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(308)
			p.Match(OgParserT__8)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeSpecContext is an interface to support dynamic dispatch.
type ITypeSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSpecContext differentiates from other interfaces.
	IsTypeSpecContext()
}

type TypeSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSpecContext() *TypeSpecContext {
	var p = new(TypeSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeSpec
	return p
}

func (*TypeSpecContext) IsTypeSpecContext() {}

func NewTypeSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSpecContext {
	var p = new(TypeSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeSpec

	return p
}

func (s *TypeSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSpecContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *TypeSpecContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeSpec(s)
	}
}

func (s *TypeSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeSpec(s)
	}
}

func (s *TypeSpecContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeSpecVisitor:
		return t.VisitTypeSpec(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeSpec() (localctx ITypeSpecContext) {
	localctx = NewTypeSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, OgParserRULE_typeSpec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(311)
		p.Match(OgParserIDENTIFIER)
	}
	{
		p.SetState(312)
		p.Type_()
	}

	return localctx
}

// IFunctionDeclContext is an interface to support dynamic dispatch.
type IFunctionDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDeclContext differentiates from other interfaces.
	IsFunctionDeclContext()
}

type FunctionDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclContext() *FunctionDeclContext {
	var p = new(FunctionDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_functionDecl
	return p
}

func (*FunctionDeclContext) IsFunctionDeclContext() {}

func NewFunctionDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclContext {
	var p = new(FunctionDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_functionDecl

	return p
}

func (s *FunctionDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *FunctionDeclContext) Function() IFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionContext)
}

func (s *FunctionDeclContext) Signature() ISignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignatureContext)
}

func (s *FunctionDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterFunctionDecl(s)
	}
}

func (s *FunctionDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitFunctionDecl(s)
	}
}

func (s *FunctionDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case FunctionDeclVisitor:
		return t.VisitFunctionDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) FunctionDecl() (localctx IFunctionDeclContext) {
	localctx = NewFunctionDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, OgParserRULE_functionDecl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(314)
		p.Match(OgParserIDENTIFIER)
	}
	p.SetState(317)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(315)
			p.Function()
		}

	case 2:
		{
			p.SetState(316)
			p.Signature()
		}

	}

	return localctx
}

// IFunctionContext is an interface to support dynamic dispatch.
type IFunctionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionContext differentiates from other interfaces.
	IsFunctionContext()
}

type FunctionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionContext() *FunctionContext {
	var p = new(FunctionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_function
	return p
}

func (*FunctionContext) IsFunctionContext() {}

func NewFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionContext {
	var p = new(FunctionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_function

	return p
}

func (s *FunctionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionContext) Signature() ISignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignatureContext)
}

func (s *FunctionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionContext) StatementNoBlock() IStatementNoBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementNoBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementNoBlockContext)
}

func (s *FunctionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterFunction(s)
	}
}

func (s *FunctionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitFunction(s)
	}
}

func (s *FunctionContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case FunctionVisitor:
		return t.VisitFunction(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Function() (localctx IFunctionContext) {
	localctx = NewFunctionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, OgParserRULE_function)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(319)
		p.Signature()
	}
	{
		p.SetState(320)
		p.Match(OgParserT__13)
	}
	p.SetState(323)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserT__2:
		{
			p.SetState(321)
			p.Block()
		}

	case OgParserT__6, OgParserT__7, OgParserT__10, OgParserT__12, OgParserT__15, OgParserT__16, OgParserT__19, OgParserT__20, OgParserT__22, OgParserT__23, OgParserT__28, OgParserT__31, OgParserT__32, OgParserT__33, OgParserT__34, OgParserT__35, OgParserT__36, OgParserT__37, OgParserT__38, OgParserT__40, OgParserT__42, OgParserT__45, OgParserT__47, OgParserT__48, OgParserT__50, OgParserT__51, OgParserT__52, OgParserT__53, OgParserT__55, OgParserT__56, OgParserT__57, OgParserT__58, OgParserT__67, OgParserIDENTIFIER, OgParserINT_LIT, OgParserFLOAT_LIT, OgParserIMAGINARY_LIT, OgParserRUNE_LIT, OgParserSTRING_LIT:
		{
			p.SetState(322)
			p.StatementNoBlock()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IMethodDeclContext is an interface to support dynamic dispatch.
type IMethodDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethodDeclContext differentiates from other interfaces.
	IsMethodDeclContext()
}

type MethodDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodDeclContext() *MethodDeclContext {
	var p = new(MethodDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_methodDecl
	return p
}

func (*MethodDeclContext) IsMethodDeclContext() {}

func NewMethodDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodDeclContext {
	var p = new(MethodDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_methodDecl

	return p
}

func (s *MethodDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodDeclContext) Receiver() IReceiverContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReceiverContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReceiverContext)
}

func (s *MethodDeclContext) Function() IFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionContext)
}

func (s *MethodDeclContext) Signature() ISignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignatureContext)
}

func (s *MethodDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterMethodDecl(s)
	}
}

func (s *MethodDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitMethodDecl(s)
	}
}

func (s *MethodDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case MethodDeclVisitor:
		return t.VisitMethodDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) MethodDecl() (localctx IMethodDeclContext) {
	localctx = NewMethodDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, OgParserRULE_methodDecl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(325)
		p.Receiver()
	}
	p.SetState(328)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(326)
			p.Function()
		}

	case 2:
		{
			p.SetState(327)
			p.Signature()
		}

	}

	return localctx
}

// IReceiverContext is an interface to support dynamic dispatch.
type IReceiverContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReceiverContext differentiates from other interfaces.
	IsReceiverContext()
}

type ReceiverContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReceiverContext() *ReceiverContext {
	var p = new(ReceiverContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_receiver
	return p
}

func (*ReceiverContext) IsReceiverContext() {}

func NewReceiverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReceiverContext {
	var p = new(ReceiverContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_receiver

	return p
}

func (s *ReceiverContext) GetParser() antlr.Parser { return s.parser }

func (s *ReceiverContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(OgParserIDENTIFIER)
}

func (s *ReceiverContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, i)
}

func (s *ReceiverContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReceiverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReceiverContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterReceiver(s)
	}
}

func (s *ReceiverContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitReceiver(s)
	}
}

func (s *ReceiverContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ReceiverVisitor:
		return t.VisitReceiver(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Receiver() (localctx IReceiverContext) {
	localctx = NewReceiverContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, OgParserRULE_receiver)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(330)
		p.Match(OgParserIDENTIFIER)
	}
	{
		p.SetState(331)
		p.Match(OgParserT__14)
	}
	{
		p.SetState(332)
		p.Match(OgParserIDENTIFIER)
	}

	return localctx
}

// IVarDeclContext is an interface to support dynamic dispatch.
type IVarDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarDeclContext differentiates from other interfaces.
	IsVarDeclContext()
}

type VarDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarDeclContext() *VarDeclContext {
	var p = new(VarDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_varDecl
	return p
}

func (*VarDeclContext) IsVarDeclContext() {}

func NewVarDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarDeclContext {
	var p = new(VarDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_varDecl

	return p
}

func (s *VarDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *VarDeclContext) AllVarSpec() []IVarSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVarSpecContext)(nil)).Elem())
	var tst = make([]IVarSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVarSpecContext)
		}
	}

	return tst
}

func (s *VarDeclContext) VarSpec(i int) IVarSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVarSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVarSpecContext)
}

func (s *VarDeclContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *VarDeclContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *VarDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterVarDecl(s)
	}
}

func (s *VarDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitVarDecl(s)
	}
}

func (s *VarDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case VarDeclVisitor:
		return t.VisitVarDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) VarDecl() (localctx IVarDeclContext) {
	localctx = NewVarDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, OgParserRULE_varDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(334)
		p.Match(OgParserT__15)
	}
	p.SetState(346)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserT__10, OgParserIDENTIFIER:
		{
			p.SetState(335)
			p.VarSpec()
		}

	case OgParserT__7:
		{
			p.SetState(336)
			p.Match(OgParserT__7)
		}
		p.SetState(342)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == OgParserT__10 || _la == OgParserIDENTIFIER {
			{
				p.SetState(337)
				p.VarSpec()
			}
			{
				p.SetState(338)
				p.Eos()
			}

			p.SetState(344)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(345)
			p.Match(OgParserT__8)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IVarSpecContext is an interface to support dynamic dispatch.
type IVarSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVarSpecContext differentiates from other interfaces.
	IsVarSpecContext()
}

type VarSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarSpecContext() *VarSpecContext {
	var p = new(VarSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_varSpec
	return p
}

func (*VarSpecContext) IsVarSpecContext() {}

func NewVarSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarSpecContext {
	var p = new(VarSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_varSpec

	return p
}

func (s *VarSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *VarSpecContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *VarSpecContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *VarSpecContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *VarSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterVarSpec(s)
	}
}

func (s *VarSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitVarSpec(s)
	}
}

func (s *VarSpecContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case VarSpecVisitor:
		return t.VisitVarSpec(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) VarSpec() (localctx IVarSpecContext) {
	localctx = NewVarSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, OgParserRULE_varSpec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(348)
		p.IdentifierList()
	}
	p.SetState(356)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserT__7, OgParserT__16, OgParserT__23, OgParserT__48, OgParserT__50, OgParserT__51, OgParserT__52, OgParserT__53, OgParserT__58, OgParserIDENTIFIER:
		{
			p.SetState(349)
			p.Type_()
		}
		p.SetState(352)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(350)
				p.Match(OgParserT__9)
			}
			{
				p.SetState(351)
				p.ExpressionList()
			}

		}

	case OgParserT__9:
		{
			p.SetState(354)
			p.Match(OgParserT__9)
		}
		{
			p.SetState(355)
			p.ExpressionList()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (s *BlockContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case BlockVisitor:
		return t.VisitBlock(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, OgParserRULE_block)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(358)
		p.Match(OgParserT__2)
	}
	{
		p.SetState(359)
		p.StatementList()
	}
	{
		p.SetState(360)
		p.Match(OgParserT__3)
	}

	return localctx
}

// IStatementListContext is an interface to support dynamic dispatch.
type IStatementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementListContext differentiates from other interfaces.
	IsStatementListContext()
}

type StatementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementListContext() *StatementListContext {
	var p = new(StatementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_statementList
	return p
}

func (*StatementListContext) IsStatementListContext() {}

func NewStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementListContext {
	var p = new(StatementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_statementList

	return p
}

func (s *StatementListContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementListContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *StatementListContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *StatementListContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *StatementListContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *StatementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterStatementList(s)
	}
}

func (s *StatementListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitStatementList(s)
	}
}

func (s *StatementListContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case StatementListVisitor:
		return t.VisitStatementList(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) StatementList() (localctx IStatementListContext) {
	localctx = NewStatementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, OgParserRULE_statementList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(367)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(362)
				p.Statement()
			}
			{
				p.SetState(363)
				p.Eos()
			}

		}
		p.SetState(369)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext())
	}

	return localctx
}

// IStatementNoBlockContext is an interface to support dynamic dispatch.
type IStatementNoBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementNoBlockContext differentiates from other interfaces.
	IsStatementNoBlockContext()
}

type StatementNoBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementNoBlockContext() *StatementNoBlockContext {
	var p = new(StatementNoBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_statementNoBlock
	return p
}

func (*StatementNoBlockContext) IsStatementNoBlockContext() {}

func NewStatementNoBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementNoBlockContext {
	var p = new(StatementNoBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_statementNoBlock

	return p
}

func (s *StatementNoBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementNoBlockContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *StatementNoBlockContext) LabeledStmt() ILabeledStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabeledStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabeledStmtContext)
}

func (s *StatementNoBlockContext) SimpleStmt() ISimpleStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *StatementNoBlockContext) GoStmt() IGoStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGoStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGoStmtContext)
}

func (s *StatementNoBlockContext) ReturnStmt() IReturnStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStmtContext)
}

func (s *StatementNoBlockContext) BreakStmt() IBreakStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStmtContext)
}

func (s *StatementNoBlockContext) ContinueStmt() IContinueStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStmtContext)
}

func (s *StatementNoBlockContext) GotoStmt() IGotoStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGotoStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGotoStmtContext)
}

func (s *StatementNoBlockContext) FallthroughStmt() IFallthroughStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFallthroughStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFallthroughStmtContext)
}

func (s *StatementNoBlockContext) IfStmt() IIfStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *StatementNoBlockContext) SwitchStmt() ISwitchStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStmtContext)
}

func (s *StatementNoBlockContext) SelectStmt() ISelectStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStmtContext)
}

func (s *StatementNoBlockContext) ForStmt() IForStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForStmtContext)
}

func (s *StatementNoBlockContext) DeferStmt() IDeferStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeferStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeferStmtContext)
}

func (s *StatementNoBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementNoBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementNoBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterStatementNoBlock(s)
	}
}

func (s *StatementNoBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitStatementNoBlock(s)
	}
}

func (s *StatementNoBlockContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case StatementNoBlockVisitor:
		return t.VisitStatementNoBlock(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) StatementNoBlock() (localctx IStatementNoBlockContext) {
	localctx = NewStatementNoBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, OgParserRULE_statementNoBlock)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(384)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 23, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(370)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(371)
			p.LabeledStmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(372)
			p.SimpleStmt()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(373)
			p.GoStmt()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(374)
			p.ReturnStmt()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(375)
			p.BreakStmt()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(376)
			p.ContinueStmt()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(377)
			p.GotoStmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(378)
			p.FallthroughStmt()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(379)
			p.IfStmt()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(380)
			p.SwitchStmt()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(381)
			p.SelectStmt()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(382)
			p.ForStmt()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(383)
			p.DeferStmt()
		}

	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Declaration() IDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeclarationContext)
}

func (s *StatementContext) SimpleStmt() ISimpleStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *StatementContext) LabeledStmt() ILabeledStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabeledStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabeledStmtContext)
}

func (s *StatementContext) GoStmt() IGoStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGoStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGoStmtContext)
}

func (s *StatementContext) ReturnStmt() IReturnStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStmtContext)
}

func (s *StatementContext) BreakStmt() IBreakStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStmtContext)
}

func (s *StatementContext) ContinueStmt() IContinueStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStmtContext)
}

func (s *StatementContext) GotoStmt() IGotoStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IGotoStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IGotoStmtContext)
}

func (s *StatementContext) FallthroughStmt() IFallthroughStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFallthroughStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFallthroughStmtContext)
}

func (s *StatementContext) IfStmt() IIfStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *StatementContext) SwitchStmt() ISwitchStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISwitchStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISwitchStmtContext)
}

func (s *StatementContext) SelectStmt() ISelectStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectStmtContext)
}

func (s *StatementContext) ForStmt() IForStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForStmtContext)
}

func (s *StatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementContext) DeferStmt() IDeferStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDeferStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDeferStmtContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (s *StatementContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case StatementVisitor:
		return t.VisitStatement(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, OgParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(401)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 24, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(386)
			p.Declaration()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(387)
			p.SimpleStmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(388)
			p.LabeledStmt()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(389)
			p.GoStmt()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(390)
			p.ReturnStmt()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(391)
			p.BreakStmt()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(392)
			p.ContinueStmt()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(393)
			p.GotoStmt()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(394)
			p.FallthroughStmt()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(395)
			p.IfStmt()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(396)
			p.SwitchStmt()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(397)
			p.SelectStmt()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(398)
			p.ForStmt()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(399)
			p.Block()
		}

	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(400)
			p.DeferStmt()
		}

	}

	return localctx
}

// ISimpleStmtContext is an interface to support dynamic dispatch.
type ISimpleStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleStmtContext differentiates from other interfaces.
	IsSimpleStmtContext()
}

type SimpleStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleStmtContext() *SimpleStmtContext {
	var p = new(SimpleStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_simpleStmt
	return p
}

func (*SimpleStmtContext) IsSimpleStmtContext() {}

func NewSimpleStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleStmtContext {
	var p = new(SimpleStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_simpleStmt

	return p
}

func (s *SimpleStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleStmtContext) SendStmt() ISendStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISendStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISendStmtContext)
}

func (s *SimpleStmtContext) ExpressionStmt() IExpressionStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStmtContext)
}

func (s *SimpleStmtContext) IncDecStmt() IIncDecStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIncDecStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIncDecStmtContext)
}

func (s *SimpleStmtContext) ShortVarDecl() IShortVarDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IShortVarDeclContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IShortVarDeclContext)
}

func (s *SimpleStmtContext) Assignment() IAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignmentContext)
}

func (s *SimpleStmtContext) EmptyStmt() IEmptyStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmptyStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmptyStmtContext)
}

func (s *SimpleStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterSimpleStmt(s)
	}
}

func (s *SimpleStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitSimpleStmt(s)
	}
}

func (s *SimpleStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case SimpleStmtVisitor:
		return t.VisitSimpleStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) SimpleStmt() (localctx ISimpleStmtContext) {
	localctx = NewSimpleStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, OgParserRULE_simpleStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(409)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(403)
			p.SendStmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(404)
			p.ExpressionStmt()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(405)
			p.IncDecStmt()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(406)
			p.ShortVarDecl()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(407)
			p.Assignment()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(408)
			p.EmptyStmt()
		}

	}

	return localctx
}

// IExpressionStmtContext is an interface to support dynamic dispatch.
type IExpressionStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStmtContext differentiates from other interfaces.
	IsExpressionStmtContext()
}

type ExpressionStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStmtContext() *ExpressionStmtContext {
	var p = new(ExpressionStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_expressionStmt
	return p
}

func (*ExpressionStmtContext) IsExpressionStmtContext() {}

func NewExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStmtContext {
	var p = new(ExpressionStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_expressionStmt

	return p
}

func (s *ExpressionStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterExpressionStmt(s)
	}
}

func (s *ExpressionStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitExpressionStmt(s)
	}
}

func (s *ExpressionStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ExpressionStmtVisitor:
		return t.VisitExpressionStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ExpressionStmt() (localctx IExpressionStmtContext) {
	localctx = NewExpressionStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, OgParserRULE_expressionStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(411)
		p.expression(0)
	}

	return localctx
}

// ISendStmtContext is an interface to support dynamic dispatch.
type ISendStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSendStmtContext differentiates from other interfaces.
	IsSendStmtContext()
}

type SendStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySendStmtContext() *SendStmtContext {
	var p = new(SendStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_sendStmt
	return p
}

func (*SendStmtContext) IsSendStmtContext() {}

func NewSendStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SendStmtContext {
	var p = new(SendStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_sendStmt

	return p
}

func (s *SendStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SendStmtContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SendStmtContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SendStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SendStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SendStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterSendStmt(s)
	}
}

func (s *SendStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitSendStmt(s)
	}
}

func (s *SendStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case SendStmtVisitor:
		return t.VisitSendStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) SendStmt() (localctx ISendStmtContext) {
	localctx = NewSendStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, OgParserRULE_sendStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(413)
		p.expression(0)
	}
	{
		p.SetState(414)
		p.Match(OgParserT__16)
	}
	{
		p.SetState(415)
		p.expression(0)
	}

	return localctx
}

// IIncDecStmtContext is an interface to support dynamic dispatch.
type IIncDecStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIncDecStmtContext differentiates from other interfaces.
	IsIncDecStmtContext()
}

type IncDecStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIncDecStmtContext() *IncDecStmtContext {
	var p = new(IncDecStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_incDecStmt
	return p
}

func (*IncDecStmtContext) IsIncDecStmtContext() {}

func NewIncDecStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IncDecStmtContext {
	var p = new(IncDecStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_incDecStmt

	return p
}

func (s *IncDecStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *IncDecStmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IncDecStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IncDecStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IncDecStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterIncDecStmt(s)
	}
}

func (s *IncDecStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitIncDecStmt(s)
	}
}

func (s *IncDecStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case IncDecStmtVisitor:
		return t.VisitIncDecStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) IncDecStmt() (localctx IIncDecStmtContext) {
	localctx = NewIncDecStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, OgParserRULE_incDecStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(417)
		p.expression(0)
	}
	p.SetState(418)
	_la = p.GetTokenStream().LA(1)

	if !(_la == OgParserT__17 || _la == OgParserT__18) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IAssignmentContext is an interface to support dynamic dispatch.
type IAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignmentContext differentiates from other interfaces.
	IsAssignmentContext()
}

type AssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignmentContext() *AssignmentContext {
	var p = new(AssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_assignment
	return p
}

func (*AssignmentContext) IsAssignmentContext() {}

func NewAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignmentContext {
	var p = new(AssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_assignment

	return p
}

func (s *AssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignmentContext) AllExpressionList() []IExpressionListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionListContext)(nil)).Elem())
	var tst = make([]IExpressionListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionListContext)
		}
	}

	return tst
}

func (s *AssignmentContext) ExpressionList(i int) IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *AssignmentContext) Assign_op() IAssign_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssign_opContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssign_opContext)
}

func (s *AssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterAssignment(s)
	}
}

func (s *AssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitAssignment(s)
	}
}

func (s *AssignmentContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case AssignmentVisitor:
		return t.VisitAssignment(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Assignment() (localctx IAssignmentContext) {
	localctx = NewAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, OgParserRULE_assignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(420)
		p.ExpressionList()
	}
	{
		p.SetState(421)
		p.Assign_op()
	}
	{
		p.SetState(422)
		p.ExpressionList()
	}

	return localctx
}

// IAssign_opContext is an interface to support dynamic dispatch.
type IAssign_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssign_opContext differentiates from other interfaces.
	IsAssign_opContext()
}

type Assign_opContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssign_opContext() *Assign_opContext {
	var p = new(Assign_opContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_assign_op
	return p
}

func (*Assign_opContext) IsAssign_opContext() {}

func NewAssign_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Assign_opContext {
	var p = new(Assign_opContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_assign_op

	return p
}

func (s *Assign_opContext) GetParser() antlr.Parser { return s.parser }
func (s *Assign_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Assign_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Assign_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterAssign_op(s)
	}
}

func (s *Assign_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitAssign_op(s)
	}
}

func (s *Assign_opContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case Assign_opVisitor:
		return t.VisitAssign_op(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Assign_op() (localctx IAssign_opContext) {
	localctx = NewAssign_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, OgParserRULE_assign_op)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(425)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__21)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__24)|(1<<OgParserT__25)|(1<<OgParserT__26)|(1<<OgParserT__27)|(1<<OgParserT__28)|(1<<OgParserT__29))) != 0 {
		p.SetState(424)
		_la = p.GetTokenStream().LA(1)

		if !(((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__21)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__24)|(1<<OgParserT__25)|(1<<OgParserT__26)|(1<<OgParserT__27)|(1<<OgParserT__28)|(1<<OgParserT__29))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	}
	{
		p.SetState(427)
		p.Match(OgParserT__9)
	}

	return localctx
}

// IShortVarDeclContext is an interface to support dynamic dispatch.
type IShortVarDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsShortVarDeclContext differentiates from other interfaces.
	IsShortVarDeclContext()
}

type ShortVarDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyShortVarDeclContext() *ShortVarDeclContext {
	var p = new(ShortVarDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_shortVarDecl
	return p
}

func (*ShortVarDeclContext) IsShortVarDeclContext() {}

func NewShortVarDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ShortVarDeclContext {
	var p = new(ShortVarDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_shortVarDecl

	return p
}

func (s *ShortVarDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ShortVarDeclContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *ShortVarDeclContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ShortVarDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShortVarDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ShortVarDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterShortVarDecl(s)
	}
}

func (s *ShortVarDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitShortVarDecl(s)
	}
}

func (s *ShortVarDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ShortVarDeclVisitor:
		return t.VisitShortVarDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ShortVarDecl() (localctx IShortVarDeclContext) {
	localctx = NewShortVarDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, OgParserRULE_shortVarDecl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(429)
		p.IdentifierList()
	}
	{
		p.SetState(430)
		p.Match(OgParserT__30)
	}
	{
		p.SetState(431)
		p.ExpressionList()
	}

	return localctx
}

// IEmptyStmtContext is an interface to support dynamic dispatch.
type IEmptyStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmptyStmtContext differentiates from other interfaces.
	IsEmptyStmtContext()
}

type EmptyStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmptyStmtContext() *EmptyStmtContext {
	var p = new(EmptyStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_emptyStmt
	return p
}

func (*EmptyStmtContext) IsEmptyStmtContext() {}

func NewEmptyStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmptyStmtContext {
	var p = new(EmptyStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_emptyStmt

	return p
}

func (s *EmptyStmtContext) GetParser() antlr.Parser { return s.parser }
func (s *EmptyStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmptyStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmptyStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterEmptyStmt(s)
	}
}

func (s *EmptyStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitEmptyStmt(s)
	}
}

func (s *EmptyStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case EmptyStmtVisitor:
		return t.VisitEmptyStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) EmptyStmt() (localctx IEmptyStmtContext) {
	localctx = NewEmptyStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, OgParserRULE_emptyStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(433)
		p.Match(OgParserT__31)
	}

	return localctx
}

// ILabeledStmtContext is an interface to support dynamic dispatch.
type ILabeledStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabeledStmtContext differentiates from other interfaces.
	IsLabeledStmtContext()
}

type LabeledStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabeledStmtContext() *LabeledStmtContext {
	var p = new(LabeledStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_labeledStmt
	return p
}

func (*LabeledStmtContext) IsLabeledStmtContext() {}

func NewLabeledStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabeledStmtContext {
	var p = new(LabeledStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_labeledStmt

	return p
}

func (s *LabeledStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *LabeledStmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *LabeledStmtContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *LabeledStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabeledStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LabeledStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterLabeledStmt(s)
	}
}

func (s *LabeledStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitLabeledStmt(s)
	}
}

func (s *LabeledStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case LabeledStmtVisitor:
		return t.VisitLabeledStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) LabeledStmt() (localctx ILabeledStmtContext) {
	localctx = NewLabeledStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, OgParserRULE_labeledStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(435)
		p.Match(OgParserIDENTIFIER)
	}
	{
		p.SetState(436)
		p.Match(OgParserT__4)
	}
	{
		p.SetState(437)
		p.Statement()
	}

	return localctx
}

// IReturnStmtContext is an interface to support dynamic dispatch.
type IReturnStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStmtContext differentiates from other interfaces.
	IsReturnStmtContext()
}

type ReturnStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStmtContext() *ReturnStmtContext {
	var p = new(ReturnStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_returnStmt
	return p
}

func (*ReturnStmtContext) IsReturnStmtContext() {}

func NewReturnStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStmtContext {
	var p = new(ReturnStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_returnStmt

	return p
}

func (s *ReturnStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStmtContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ReturnStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterReturnStmt(s)
	}
}

func (s *ReturnStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitReturnStmt(s)
	}
}

func (s *ReturnStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ReturnStmtVisitor:
		return t.VisitReturnStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ReturnStmt() (localctx IReturnStmtContext) {
	localctx = NewReturnStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, OgParserRULE_returnStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(439)
		p.Match(OgParserT__32)
	}
	p.SetState(441)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(440)
			p.ExpressionList()
		}

	}

	return localctx
}

// IBreakStmtContext is an interface to support dynamic dispatch.
type IBreakStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStmtContext differentiates from other interfaces.
	IsBreakStmtContext()
}

type BreakStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStmtContext() *BreakStmtContext {
	var p = new(BreakStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_breakStmt
	return p
}

func (*BreakStmtContext) IsBreakStmtContext() {}

func NewBreakStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStmtContext {
	var p = new(BreakStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_breakStmt

	return p
}

func (s *BreakStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *BreakStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterBreakStmt(s)
	}
}

func (s *BreakStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitBreakStmt(s)
	}
}

func (s *BreakStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case BreakStmtVisitor:
		return t.VisitBreakStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) BreakStmt() (localctx IBreakStmtContext) {
	localctx = NewBreakStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, OgParserRULE_breakStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(443)
		p.Match(OgParserT__33)
	}
	p.SetState(445)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(444)
			p.Match(OgParserIDENTIFIER)
		}

	}

	return localctx
}

// IContinueStmtContext is an interface to support dynamic dispatch.
type IContinueStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStmtContext differentiates from other interfaces.
	IsContinueStmtContext()
}

type ContinueStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStmtContext() *ContinueStmtContext {
	var p = new(ContinueStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_continueStmt
	return p
}

func (*ContinueStmtContext) IsContinueStmtContext() {}

func NewContinueStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStmtContext {
	var p = new(ContinueStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_continueStmt

	return p
}

func (s *ContinueStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *ContinueStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterContinueStmt(s)
	}
}

func (s *ContinueStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitContinueStmt(s)
	}
}

func (s *ContinueStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ContinueStmtVisitor:
		return t.VisitContinueStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ContinueStmt() (localctx IContinueStmtContext) {
	localctx = NewContinueStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, OgParserRULE_continueStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(447)
		p.Match(OgParserT__34)
	}
	p.SetState(449)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 29, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(448)
			p.Match(OgParserIDENTIFIER)
		}

	}

	return localctx
}

// IGotoStmtContext is an interface to support dynamic dispatch.
type IGotoStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGotoStmtContext differentiates from other interfaces.
	IsGotoStmtContext()
}

type GotoStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGotoStmtContext() *GotoStmtContext {
	var p = new(GotoStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_gotoStmt
	return p
}

func (*GotoStmtContext) IsGotoStmtContext() {}

func NewGotoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GotoStmtContext {
	var p = new(GotoStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_gotoStmt

	return p
}

func (s *GotoStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *GotoStmtContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *GotoStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GotoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GotoStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterGotoStmt(s)
	}
}

func (s *GotoStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitGotoStmt(s)
	}
}

func (s *GotoStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case GotoStmtVisitor:
		return t.VisitGotoStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) GotoStmt() (localctx IGotoStmtContext) {
	localctx = NewGotoStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, OgParserRULE_gotoStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(451)
		p.Match(OgParserT__35)
	}
	{
		p.SetState(452)
		p.Match(OgParserIDENTIFIER)
	}

	return localctx
}

// IFallthroughStmtContext is an interface to support dynamic dispatch.
type IFallthroughStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFallthroughStmtContext differentiates from other interfaces.
	IsFallthroughStmtContext()
}

type FallthroughStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFallthroughStmtContext() *FallthroughStmtContext {
	var p = new(FallthroughStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_fallthroughStmt
	return p
}

func (*FallthroughStmtContext) IsFallthroughStmtContext() {}

func NewFallthroughStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FallthroughStmtContext {
	var p = new(FallthroughStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_fallthroughStmt

	return p
}

func (s *FallthroughStmtContext) GetParser() antlr.Parser { return s.parser }
func (s *FallthroughStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FallthroughStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FallthroughStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterFallthroughStmt(s)
	}
}

func (s *FallthroughStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitFallthroughStmt(s)
	}
}

func (s *FallthroughStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case FallthroughStmtVisitor:
		return t.VisitFallthroughStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) FallthroughStmt() (localctx IFallthroughStmtContext) {
	localctx = NewFallthroughStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, OgParserRULE_fallthroughStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(454)
		p.Match(OgParserT__36)
	}

	return localctx
}

// IDeferStmtContext is an interface to support dynamic dispatch.
type IDeferStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDeferStmtContext differentiates from other interfaces.
	IsDeferStmtContext()
}

type DeferStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDeferStmtContext() *DeferStmtContext {
	var p = new(DeferStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_deferStmt
	return p
}

func (*DeferStmtContext) IsDeferStmtContext() {}

func NewDeferStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DeferStmtContext {
	var p = new(DeferStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_deferStmt

	return p
}

func (s *DeferStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *DeferStmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DeferStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DeferStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DeferStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterDeferStmt(s)
	}
}

func (s *DeferStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitDeferStmt(s)
	}
}

func (s *DeferStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case DeferStmtVisitor:
		return t.VisitDeferStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) DeferStmt() (localctx IDeferStmtContext) {
	localctx = NewDeferStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, OgParserRULE_deferStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(456)
		p.Match(OgParserT__37)
	}
	{
		p.SetState(457)
		p.expression(0)
	}

	return localctx
}

// IIfStmtContext is an interface to support dynamic dispatch.
type IIfStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStmtContext differentiates from other interfaces.
	IsIfStmtContext()
}

type IfStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStmtContext() *IfStmtContext {
	var p = new(IfStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_ifStmt
	return p
}

func (*IfStmtContext) IsIfStmtContext() {}

func NewIfStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStmtContext {
	var p = new(IfStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_ifStmt

	return p
}

func (s *IfStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStmtContext) AllBlock() []IBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IBlockContext)(nil)).Elem())
	var tst = make([]IBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IBlockContext)
		}
	}

	return tst
}

func (s *IfStmtContext) Block(i int) IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfStmtContext) SimpleStmt() ISimpleStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *IfStmtContext) IfStmt() IIfStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStmtContext)
}

func (s *IfStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterIfStmt(s)
	}
}

func (s *IfStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitIfStmt(s)
	}
}

func (s *IfStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case IfStmtVisitor:
		return t.VisitIfStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) IfStmt() (localctx IIfStmtContext) {
	localctx = NewIfStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, OgParserRULE_ifStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(459)
		p.Match(OgParserT__38)
	}
	p.SetState(463)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(460)
			p.SimpleStmt()
		}
		{
			p.SetState(461)
			p.Match(OgParserT__31)
		}

	}
	{
		p.SetState(465)
		p.expression(0)
	}
	{
		p.SetState(466)
		p.Block()
	}
	p.SetState(472)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(467)
			p.Match(OgParserT__39)
		}
		p.SetState(470)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case OgParserT__38:
			{
				p.SetState(468)
				p.IfStmt()
			}

		case OgParserT__2:
			{
				p.SetState(469)
				p.Block()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

	}

	return localctx
}

// ISwitchStmtContext is an interface to support dynamic dispatch.
type ISwitchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSwitchStmtContext differentiates from other interfaces.
	IsSwitchStmtContext()
}

type SwitchStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStmtContext() *SwitchStmtContext {
	var p = new(SwitchStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_switchStmt
	return p
}

func (*SwitchStmtContext) IsSwitchStmtContext() {}

func NewSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStmtContext {
	var p = new(SwitchStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_switchStmt

	return p
}

func (s *SwitchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStmtContext) ExprSwitchStmt() IExprSwitchStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprSwitchStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprSwitchStmtContext)
}

func (s *SwitchStmtContext) TypeSwitchStmt() ITypeSwitchStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSwitchStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSwitchStmtContext)
}

func (s *SwitchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterSwitchStmt(s)
	}
}

func (s *SwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitSwitchStmt(s)
	}
}

func (s *SwitchStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case SwitchStmtVisitor:
		return t.VisitSwitchStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) SwitchStmt() (localctx ISwitchStmtContext) {
	localctx = NewSwitchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, OgParserRULE_switchStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(476)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(474)
			p.ExprSwitchStmt()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(475)
			p.TypeSwitchStmt()
		}

	}

	return localctx
}

// IExprSwitchStmtContext is an interface to support dynamic dispatch.
type IExprSwitchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprSwitchStmtContext differentiates from other interfaces.
	IsExprSwitchStmtContext()
}

type ExprSwitchStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprSwitchStmtContext() *ExprSwitchStmtContext {
	var p = new(ExprSwitchStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_exprSwitchStmt
	return p
}

func (*ExprSwitchStmtContext) IsExprSwitchStmtContext() {}

func NewExprSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprSwitchStmtContext {
	var p = new(ExprSwitchStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_exprSwitchStmt

	return p
}

func (s *ExprSwitchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprSwitchStmtContext) SimpleStmt() ISimpleStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *ExprSwitchStmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExprSwitchStmtContext) AllExprCaseClause() []IExprCaseClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExprCaseClauseContext)(nil)).Elem())
	var tst = make([]IExprCaseClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExprCaseClauseContext)
		}
	}

	return tst
}

func (s *ExprSwitchStmtContext) ExprCaseClause(i int) IExprCaseClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprCaseClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExprCaseClauseContext)
}

func (s *ExprSwitchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprSwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprSwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterExprSwitchStmt(s)
	}
}

func (s *ExprSwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitExprSwitchStmt(s)
	}
}

func (s *ExprSwitchStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ExprSwitchStmtVisitor:
		return t.VisitExprSwitchStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ExprSwitchStmt() (localctx IExprSwitchStmtContext) {
	localctx = NewExprSwitchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, OgParserRULE_exprSwitchStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(478)
		p.Match(OgParserT__40)
	}
	p.SetState(482)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(479)
			p.SimpleStmt()
		}
		{
			p.SetState(480)
			p.Match(OgParserT__31)
		}

	}
	p.SetState(485)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__28))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__55-49))|(1<<(OgParserT__56-49))|(1<<(OgParserT__57-49))|(1<<(OgParserT__58-49))|(1<<(OgParserT__67-49))|(1<<(OgParserIDENTIFIER-49))|(1<<(OgParserINT_LIT-49))|(1<<(OgParserFLOAT_LIT-49))|(1<<(OgParserIMAGINARY_LIT-49))|(1<<(OgParserRUNE_LIT-49))|(1<<(OgParserSTRING_LIT-49)))) != 0) {
		{
			p.SetState(484)
			p.expression(0)
		}

	}
	{
		p.SetState(487)
		p.Match(OgParserT__2)
	}
	p.SetState(491)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__28))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__55-49))|(1<<(OgParserT__56-49))|(1<<(OgParserT__57-49))|(1<<(OgParserT__58-49))|(1<<(OgParserT__67-49))|(1<<(OgParserIDENTIFIER-49))|(1<<(OgParserINT_LIT-49))|(1<<(OgParserFLOAT_LIT-49))|(1<<(OgParserIMAGINARY_LIT-49))|(1<<(OgParserRUNE_LIT-49))|(1<<(OgParserSTRING_LIT-49)))) != 0) {
		{
			p.SetState(488)
			p.ExprCaseClause()
		}

		p.SetState(493)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(494)
		p.Match(OgParserT__3)
	}

	return localctx
}

// IExprCaseClauseContext is an interface to support dynamic dispatch.
type IExprCaseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprCaseClauseContext differentiates from other interfaces.
	IsExprCaseClauseContext()
}

type ExprCaseClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprCaseClauseContext() *ExprCaseClauseContext {
	var p = new(ExprCaseClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_exprCaseClause
	return p
}

func (*ExprCaseClauseContext) IsExprCaseClauseContext() {}

func NewExprCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprCaseClauseContext {
	var p = new(ExprCaseClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_exprCaseClause

	return p
}

func (s *ExprCaseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprCaseClauseContext) ExprSwitchCase() IExprSwitchCaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExprSwitchCaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExprSwitchCaseContext)
}

func (s *ExprCaseClauseContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *ExprCaseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprCaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprCaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterExprCaseClause(s)
	}
}

func (s *ExprCaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitExprCaseClause(s)
	}
}

func (s *ExprCaseClauseContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ExprCaseClauseVisitor:
		return t.VisitExprCaseClause(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ExprCaseClause() (localctx IExprCaseClauseContext) {
	localctx = NewExprCaseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, OgParserRULE_exprCaseClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(496)
		p.ExprSwitchCase()
	}
	{
		p.SetState(497)
		p.Match(OgParserT__41)
	}
	{
		p.SetState(498)
		p.StatementList()
	}

	return localctx
}

// IExprSwitchCaseContext is an interface to support dynamic dispatch.
type IExprSwitchCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExprSwitchCaseContext differentiates from other interfaces.
	IsExprSwitchCaseContext()
}

type ExprSwitchCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprSwitchCaseContext() *ExprSwitchCaseContext {
	var p = new(ExprSwitchCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_exprSwitchCase
	return p
}

func (*ExprSwitchCaseContext) IsExprSwitchCaseContext() {}

func NewExprSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprSwitchCaseContext {
	var p = new(ExprSwitchCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_exprSwitchCase

	return p
}

func (s *ExprSwitchCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprSwitchCaseContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ExprSwitchCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprSwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprSwitchCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterExprSwitchCase(s)
	}
}

func (s *ExprSwitchCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitExprSwitchCase(s)
	}
}

func (s *ExprSwitchCaseContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ExprSwitchCaseVisitor:
		return t.VisitExprSwitchCase(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ExprSwitchCase() (localctx IExprSwitchCaseContext) {
	localctx = NewExprSwitchCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, OgParserRULE_exprSwitchCase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(502)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(500)
			p.ExpressionList()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(501)
			p.Match(OgParserT__10)
		}

	}

	return localctx
}

// ITypeSwitchStmtContext is an interface to support dynamic dispatch.
type ITypeSwitchStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSwitchStmtContext differentiates from other interfaces.
	IsTypeSwitchStmtContext()
}

type TypeSwitchStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSwitchStmtContext() *TypeSwitchStmtContext {
	var p = new(TypeSwitchStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeSwitchStmt
	return p
}

func (*TypeSwitchStmtContext) IsTypeSwitchStmtContext() {}

func NewTypeSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSwitchStmtContext {
	var p = new(TypeSwitchStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeSwitchStmt

	return p
}

func (s *TypeSwitchStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSwitchStmtContext) TypeSwitchGuard() ITypeSwitchGuardContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSwitchGuardContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSwitchGuardContext)
}

func (s *TypeSwitchStmtContext) SimpleStmt() ISimpleStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *TypeSwitchStmtContext) AllTypeCaseClause() []ITypeCaseClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeCaseClauseContext)(nil)).Elem())
	var tst = make([]ITypeCaseClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeCaseClauseContext)
		}
	}

	return tst
}

func (s *TypeSwitchStmtContext) TypeCaseClause(i int) ITypeCaseClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeCaseClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeCaseClauseContext)
}

func (s *TypeSwitchStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeSwitchStmt(s)
	}
}

func (s *TypeSwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeSwitchStmt(s)
	}
}

func (s *TypeSwitchStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeSwitchStmtVisitor:
		return t.VisitTypeSwitchStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeSwitchStmt() (localctx ITypeSwitchStmtContext) {
	localctx = NewTypeSwitchStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, OgParserRULE_typeSwitchStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(504)
		p.Match(OgParserT__40)
	}
	p.SetState(508)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(505)
			p.SimpleStmt()
		}
		{
			p.SetState(506)
			p.Match(OgParserT__31)
		}

	}
	{
		p.SetState(510)
		p.TypeSwitchGuard()
	}
	{
		p.SetState(511)
		p.Match(OgParserT__2)
	}
	p.SetState(515)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__23))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__58-49))|(1<<(OgParserIDENTIFIER-49)))) != 0) {
		{
			p.SetState(512)
			p.TypeCaseClause()
		}

		p.SetState(517)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(518)
		p.Match(OgParserT__3)
	}

	return localctx
}

// ITypeSwitchGuardContext is an interface to support dynamic dispatch.
type ITypeSwitchGuardContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSwitchGuardContext differentiates from other interfaces.
	IsTypeSwitchGuardContext()
}

type TypeSwitchGuardContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSwitchGuardContext() *TypeSwitchGuardContext {
	var p = new(TypeSwitchGuardContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeSwitchGuard
	return p
}

func (*TypeSwitchGuardContext) IsTypeSwitchGuardContext() {}

func NewTypeSwitchGuardContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSwitchGuardContext {
	var p = new(TypeSwitchGuardContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeSwitchGuard

	return p
}

func (s *TypeSwitchGuardContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSwitchGuardContext) PrimaryExpr() IPrimaryExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExprContext)
}

func (s *TypeSwitchGuardContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *TypeSwitchGuardContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSwitchGuardContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSwitchGuardContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeSwitchGuard(s)
	}
}

func (s *TypeSwitchGuardContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeSwitchGuard(s)
	}
}

func (s *TypeSwitchGuardContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeSwitchGuardVisitor:
		return t.VisitTypeSwitchGuard(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeSwitchGuard() (localctx ITypeSwitchGuardContext) {
	localctx = NewTypeSwitchGuardContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, OgParserRULE_typeSwitchGuard)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(522)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(520)
			p.Match(OgParserIDENTIFIER)
		}
		{
			p.SetState(521)
			p.Match(OgParserT__9)
		}

	}
	{
		p.SetState(524)
		p.primaryExpr(0)
	}
	{
		p.SetState(525)
		p.Match(OgParserT__5)
	}
	{
		p.SetState(526)
		p.Match(OgParserT__7)
	}
	{
		p.SetState(527)
		p.Match(OgParserT__12)
	}
	{
		p.SetState(528)
		p.Match(OgParserT__8)
	}

	return localctx
}

// ITypeCaseClauseContext is an interface to support dynamic dispatch.
type ITypeCaseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeCaseClauseContext differentiates from other interfaces.
	IsTypeCaseClauseContext()
}

type TypeCaseClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeCaseClauseContext() *TypeCaseClauseContext {
	var p = new(TypeCaseClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeCaseClause
	return p
}

func (*TypeCaseClauseContext) IsTypeCaseClauseContext() {}

func NewTypeCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeCaseClauseContext {
	var p = new(TypeCaseClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeCaseClause

	return p
}

func (s *TypeCaseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeCaseClauseContext) TypeSwitchCase() ITypeSwitchCaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeSwitchCaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeSwitchCaseContext)
}

func (s *TypeCaseClauseContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *TypeCaseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeCaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeCaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeCaseClause(s)
	}
}

func (s *TypeCaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeCaseClause(s)
	}
}

func (s *TypeCaseClauseContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeCaseClauseVisitor:
		return t.VisitTypeCaseClause(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeCaseClause() (localctx ITypeCaseClauseContext) {
	localctx = NewTypeCaseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, OgParserRULE_typeCaseClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(530)
		p.TypeSwitchCase()
	}
	{
		p.SetState(531)
		p.Match(OgParserT__41)
	}
	{
		p.SetState(532)
		p.StatementList()
	}

	return localctx
}

// ITypeSwitchCaseContext is an interface to support dynamic dispatch.
type ITypeSwitchCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeSwitchCaseContext differentiates from other interfaces.
	IsTypeSwitchCaseContext()
}

type TypeSwitchCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeSwitchCaseContext() *TypeSwitchCaseContext {
	var p = new(TypeSwitchCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeSwitchCase
	return p
}

func (*TypeSwitchCaseContext) IsTypeSwitchCaseContext() {}

func NewTypeSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeSwitchCaseContext {
	var p = new(TypeSwitchCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeSwitchCase

	return p
}

func (s *TypeSwitchCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeSwitchCaseContext) TypeList() ITypeListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeListContext)
}

func (s *TypeSwitchCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeSwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeSwitchCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeSwitchCase(s)
	}
}

func (s *TypeSwitchCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeSwitchCase(s)
	}
}

func (s *TypeSwitchCaseContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeSwitchCaseVisitor:
		return t.VisitTypeSwitchCase(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeSwitchCase() (localctx ITypeSwitchCaseContext) {
	localctx = NewTypeSwitchCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, OgParserRULE_typeSwitchCase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(536)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserT__7, OgParserT__16, OgParserT__23, OgParserT__48, OgParserT__50, OgParserT__51, OgParserT__52, OgParserT__53, OgParserT__58, OgParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(534)
			p.TypeList()
		}

	case OgParserT__10:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(535)
			p.Match(OgParserT__10)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeListContext is an interface to support dynamic dispatch.
type ITypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeListContext differentiates from other interfaces.
	IsTypeListContext()
}

type TypeListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeListContext() *TypeListContext {
	var p = new(TypeListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeList
	return p
}

func (*TypeListContext) IsTypeListContext() {}

func NewTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeListContext {
	var p = new(TypeListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeList

	return p
}

func (s *TypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeListContext) AllType_() []IType_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_Context)(nil)).Elem())
	var tst = make([]IType_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_Context)
		}
	}

	return tst
}

func (s *TypeListContext) Type_(i int) IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeList(s)
	}
}

func (s *TypeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeList(s)
	}
}

func (s *TypeListContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeListVisitor:
		return t.VisitTypeList(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeList() (localctx ITypeListContext) {
	localctx = NewTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, OgParserRULE_typeList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(538)
		p.Type_()
	}
	p.SetState(543)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == OgParserT__11 {
		{
			p.SetState(539)
			p.Match(OgParserT__11)
		}
		{
			p.SetState(540)
			p.Type_()
		}

		p.SetState(545)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// ISelectStmtContext is an interface to support dynamic dispatch.
type ISelectStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectStmtContext differentiates from other interfaces.
	IsSelectStmtContext()
}

type SelectStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectStmtContext() *SelectStmtContext {
	var p = new(SelectStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_selectStmt
	return p
}

func (*SelectStmtContext) IsSelectStmtContext() {}

func NewSelectStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectStmtContext {
	var p = new(SelectStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_selectStmt

	return p
}

func (s *SelectStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectStmtContext) AllCommClause() []ICommClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICommClauseContext)(nil)).Elem())
	var tst = make([]ICommClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICommClauseContext)
		}
	}

	return tst
}

func (s *SelectStmtContext) CommClause(i int) ICommClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICommClauseContext)
}

func (s *SelectStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterSelectStmt(s)
	}
}

func (s *SelectStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitSelectStmt(s)
	}
}

func (s *SelectStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case SelectStmtVisitor:
		return t.VisitSelectStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) SelectStmt() (localctx ISelectStmtContext) {
	localctx = NewSelectStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, OgParserRULE_selectStmt)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(546)
		p.Match(OgParserT__42)
	}
	{
		p.SetState(547)
		p.Match(OgParserT__2)
	}
	p.SetState(551)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == OgParserT__43 || _la == OgParserT__44 {
		{
			p.SetState(548)
			p.CommClause()
		}

		p.SetState(553)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(554)
		p.Match(OgParserT__3)
	}

	return localctx
}

// ICommClauseContext is an interface to support dynamic dispatch.
type ICommClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommClauseContext differentiates from other interfaces.
	IsCommClauseContext()
}

type CommClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommClauseContext() *CommClauseContext {
	var p = new(CommClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_commClause
	return p
}

func (*CommClauseContext) IsCommClauseContext() {}

func NewCommClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommClauseContext {
	var p = new(CommClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_commClause

	return p
}

func (s *CommClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CommClauseContext) CommCase() ICommCaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICommCaseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICommCaseContext)
}

func (s *CommClauseContext) StatementList() IStatementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementListContext)
}

func (s *CommClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterCommClause(s)
	}
}

func (s *CommClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitCommClause(s)
	}
}

func (s *CommClauseContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case CommClauseVisitor:
		return t.VisitCommClause(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) CommClause() (localctx ICommClauseContext) {
	localctx = NewCommClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, OgParserRULE_commClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(556)
		p.CommCase()
	}
	{
		p.SetState(557)
		p.Match(OgParserT__4)
	}
	{
		p.SetState(558)
		p.StatementList()
	}

	return localctx
}

// ICommCaseContext is an interface to support dynamic dispatch.
type ICommCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCommCaseContext differentiates from other interfaces.
	IsCommCaseContext()
}

type CommCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCommCaseContext() *CommCaseContext {
	var p = new(CommCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_commCase
	return p
}

func (*CommCaseContext) IsCommCaseContext() {}

func NewCommCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CommCaseContext {
	var p = new(CommCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_commCase

	return p
}

func (s *CommCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *CommCaseContext) SendStmt() ISendStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISendStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISendStmtContext)
}

func (s *CommCaseContext) RecvStmt() IRecvStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRecvStmtContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRecvStmtContext)
}

func (s *CommCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CommCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CommCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterCommCase(s)
	}
}

func (s *CommCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitCommCase(s)
	}
}

func (s *CommCaseContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case CommCaseVisitor:
		return t.VisitCommCase(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) CommCase() (localctx ICommCaseContext) {
	localctx = NewCommCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, OgParserRULE_commCase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(566)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserT__43:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(560)
			p.Match(OgParserT__43)
		}
		p.SetState(563)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(561)
				p.SendStmt()
			}

		case 2:
			{
				p.SetState(562)
				p.RecvStmt()
			}

		}

	case OgParserT__44:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(565)
			p.Match(OgParserT__44)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IRecvStmtContext is an interface to support dynamic dispatch.
type IRecvStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRecvStmtContext differentiates from other interfaces.
	IsRecvStmtContext()
}

type RecvStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRecvStmtContext() *RecvStmtContext {
	var p = new(RecvStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_recvStmt
	return p
}

func (*RecvStmtContext) IsRecvStmtContext() {}

func NewRecvStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RecvStmtContext {
	var p = new(RecvStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_recvStmt

	return p
}

func (s *RecvStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *RecvStmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RecvStmtContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *RecvStmtContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *RecvStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RecvStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RecvStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterRecvStmt(s)
	}
}

func (s *RecvStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitRecvStmt(s)
	}
}

func (s *RecvStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case RecvStmtVisitor:
		return t.VisitRecvStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) RecvStmt() (localctx IRecvStmtContext) {
	localctx = NewRecvStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, OgParserRULE_recvStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(574)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(568)
			p.ExpressionList()
		}
		{
			p.SetState(569)
			p.Match(OgParserT__9)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 46, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(571)
			p.IdentifierList()
		}
		{
			p.SetState(572)
			p.Match(OgParserT__30)
		}

	}
	{
		p.SetState(576)
		p.expression(0)
	}

	return localctx
}

// IForStmtContext is an interface to support dynamic dispatch.
type IForStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStmtContext differentiates from other interfaces.
	IsForStmtContext()
}

type ForStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStmtContext() *ForStmtContext {
	var p = new(ForStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_forStmt
	return p
}

func (*ForStmtContext) IsForStmtContext() {}

func NewForStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStmtContext {
	var p = new(ForStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_forStmt

	return p
}

func (s *ForStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStmtContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForStmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStmtContext) ForClause() IForClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForClauseContext)
}

func (s *ForStmtContext) RangeClause() IRangeClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRangeClauseContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRangeClauseContext)
}

func (s *ForStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterForStmt(s)
	}
}

func (s *ForStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitForStmt(s)
	}
}

func (s *ForStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ForStmtVisitor:
		return t.VisitForStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ForStmt() (localctx IForStmtContext) {
	localctx = NewForStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, OgParserRULE_forStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(578)
		p.Match(OgParserT__45)
	}
	p.SetState(582)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(579)
			p.expression(0)
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 2 {
		{
			p.SetState(580)
			p.ForClause()
		}

	} else if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) == 3 {
		{
			p.SetState(581)
			p.RangeClause()
		}

	}
	{
		p.SetState(584)
		p.Block()
	}

	return localctx
}

// IForClauseContext is an interface to support dynamic dispatch.
type IForClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForClauseContext differentiates from other interfaces.
	IsForClauseContext()
}

type ForClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForClauseContext() *ForClauseContext {
	var p = new(ForClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_forClause
	return p
}

func (*ForClauseContext) IsForClauseContext() {}

func NewForClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForClauseContext {
	var p = new(ForClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_forClause

	return p
}

func (s *ForClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *ForClauseContext) AllSimpleStmt() []ISimpleStmtContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ISimpleStmtContext)(nil)).Elem())
	var tst = make([]ISimpleStmtContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ISimpleStmtContext)
		}
	}

	return tst
}

func (s *ForClauseContext) SimpleStmt(i int) ISimpleStmtContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStmtContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ISimpleStmtContext)
}

func (s *ForClauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterForClause(s)
	}
}

func (s *ForClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitForClause(s)
	}
}

func (s *ForClauseContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ForClauseVisitor:
		return t.VisitForClause(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ForClause() (localctx IForClauseContext) {
	localctx = NewForClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, OgParserRULE_forClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(587)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(586)
			p.SimpleStmt()
		}

	}
	{
		p.SetState(589)
		p.Match(OgParserT__31)
	}
	p.SetState(591)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__28))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__55-49))|(1<<(OgParserT__56-49))|(1<<(OgParserT__57-49))|(1<<(OgParserT__58-49))|(1<<(OgParserT__67-49))|(1<<(OgParserIDENTIFIER-49))|(1<<(OgParserINT_LIT-49))|(1<<(OgParserFLOAT_LIT-49))|(1<<(OgParserIMAGINARY_LIT-49))|(1<<(OgParserRUNE_LIT-49))|(1<<(OgParserSTRING_LIT-49)))) != 0) {
		{
			p.SetState(590)
			p.expression(0)
		}

	}
	{
		p.SetState(593)
		p.Match(OgParserT__31)
	}
	p.SetState(595)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-8)&-(0x1f+1)) == 0 && ((1<<uint((_la-8)))&((1<<(OgParserT__7-8))|(1<<(OgParserT__10-8))|(1<<(OgParserT__16-8))|(1<<(OgParserT__19-8))|(1<<(OgParserT__20-8))|(1<<(OgParserT__22-8))|(1<<(OgParserT__23-8))|(1<<(OgParserT__28-8))|(1<<(OgParserT__31-8)))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__55-49))|(1<<(OgParserT__56-49))|(1<<(OgParserT__57-49))|(1<<(OgParserT__58-49))|(1<<(OgParserT__67-49))|(1<<(OgParserIDENTIFIER-49))|(1<<(OgParserINT_LIT-49))|(1<<(OgParserFLOAT_LIT-49))|(1<<(OgParserIMAGINARY_LIT-49))|(1<<(OgParserRUNE_LIT-49))|(1<<(OgParserSTRING_LIT-49)))) != 0) {
		{
			p.SetState(594)
			p.SimpleStmt()
		}

	}

	return localctx
}

// IRangeClauseContext is an interface to support dynamic dispatch.
type IRangeClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRangeClauseContext differentiates from other interfaces.
	IsRangeClauseContext()
}

type RangeClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRangeClauseContext() *RangeClauseContext {
	var p = new(RangeClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_rangeClause
	return p
}

func (*RangeClauseContext) IsRangeClauseContext() {}

func NewRangeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RangeClauseContext {
	var p = new(RangeClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_rangeClause

	return p
}

func (s *RangeClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *RangeClauseContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RangeClauseContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *RangeClauseContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *RangeClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RangeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RangeClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterRangeClause(s)
	}
}

func (s *RangeClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitRangeClause(s)
	}
}

func (s *RangeClauseContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case RangeClauseVisitor:
		return t.VisitRangeClause(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) RangeClause() (localctx IRangeClauseContext) {
	localctx = NewRangeClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, OgParserRULE_rangeClause)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(599)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 51, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(597)
			p.ExpressionList()
		}

	case 2:
		{
			p.SetState(598)
			p.IdentifierList()
		}

	}
	{
		p.SetState(601)
		p.Match(OgParserT__46)
	}
	{
		p.SetState(602)
		p.expression(0)
	}

	return localctx
}

// IGoStmtContext is an interface to support dynamic dispatch.
type IGoStmtContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsGoStmtContext differentiates from other interfaces.
	IsGoStmtContext()
}

type GoStmtContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGoStmtContext() *GoStmtContext {
	var p = new(GoStmtContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_goStmt
	return p
}

func (*GoStmtContext) IsGoStmtContext() {}

func NewGoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GoStmtContext {
	var p = new(GoStmtContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_goStmt

	return p
}

func (s *GoStmtContext) GetParser() antlr.Parser { return s.parser }

func (s *GoStmtContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *GoStmtContext) Function() IFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionContext)
}

func (s *GoStmtContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GoStmtContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterGoStmt(s)
	}
}

func (s *GoStmtContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitGoStmt(s)
	}
}

func (s *GoStmtContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case GoStmtVisitor:
		return t.VisitGoStmt(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) GoStmt() (localctx IGoStmtContext) {
	localctx = NewGoStmtContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, OgParserRULE_goStmt)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(604)
		p.Match(OgParserT__47)
	}
	p.SetState(607)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(605)
			p.expression(0)
		}

	case 2:
		{
			p.SetState(606)
			p.Function()
		}

	}

	return localctx
}

// IType_Context is an interface to support dynamic dispatch.
type IType_Context interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsType_Context differentiates from other interfaces.
	IsType_Context()
}

type Type_Context struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyType_Context() *Type_Context {
	var p = new(Type_Context)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_type_
	return p
}

func (*Type_Context) IsType_Context() {}

func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Type_Context {
	var p = new(Type_Context)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_type_

	return p
}

func (s *Type_Context) GetParser() antlr.Parser { return s.parser }

func (s *Type_Context) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *Type_Context) TypeLit() ITypeLitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeLitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeLitContext)
}

func (s *Type_Context) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *Type_Context) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Type_Context) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterType_(s)
	}
}

func (s *Type_Context) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitType_(s)
	}
}

func (s *Type_Context) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case Type_Visitor:
		return t.VisitType_(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Type_() (localctx IType_Context) {
	localctx = NewType_Context(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, OgParserRULE_type_)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(615)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(609)
			p.TypeName()
		}

	case OgParserT__16, OgParserT__23, OgParserT__48, OgParserT__50, OgParserT__51, OgParserT__52, OgParserT__53, OgParserT__58:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(610)
			p.TypeLit()
		}

	case OgParserT__7:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(611)
			p.Match(OgParserT__7)
		}
		{
			p.SetState(612)
			p.Type_()
		}
		{
			p.SetState(613)
			p.Match(OgParserT__8)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *TypeNameContext) QualifiedIdent() IQualifiedIdentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedIdentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentContext)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeName(s)
	}
}

func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeName(s)
	}
}

func (s *TypeNameContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeNameVisitor:
		return t.VisitTypeName(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeName() (localctx ITypeNameContext) {
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, OgParserRULE_typeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(619)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(617)
			p.Match(OgParserIDENTIFIER)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(618)
			p.QualifiedIdent()
		}

	}

	return localctx
}

// ITypeLitContext is an interface to support dynamic dispatch.
type ITypeLitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeLitContext differentiates from other interfaces.
	IsTypeLitContext()
}

type TypeLitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeLitContext() *TypeLitContext {
	var p = new(TypeLitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeLit
	return p
}

func (*TypeLitContext) IsTypeLitContext() {}

func NewTypeLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeLitContext {
	var p = new(TypeLitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeLit

	return p
}

func (s *TypeLitContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeLitContext) ArrayType() IArrayTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *TypeLitContext) StructType() IStructTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructTypeContext)
}

func (s *TypeLitContext) PointerType() IPointerTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPointerTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPointerTypeContext)
}

func (s *TypeLitContext) FunctionType() IFunctionTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeContext)
}

func (s *TypeLitContext) InterfaceType() IInterfaceTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInterfaceTypeContext)
}

func (s *TypeLitContext) SliceType() ISliceTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceTypeContext)
}

func (s *TypeLitContext) MapType() IMapTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapTypeContext)
}

func (s *TypeLitContext) ChannelType() IChannelTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IChannelTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IChannelTypeContext)
}

func (s *TypeLitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeLitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeLit(s)
	}
}

func (s *TypeLitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeLit(s)
	}
}

func (s *TypeLitContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeLitVisitor:
		return t.VisitTypeLit(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeLit() (localctx ITypeLitContext) {
	localctx = NewTypeLitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, OgParserRULE_typeLit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(629)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 55, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(621)
			p.ArrayType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(622)
			p.StructType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(623)
			p.PointerType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(624)
			p.FunctionType()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(625)
			p.InterfaceType()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(626)
			p.SliceType()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(627)
			p.MapType()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(628)
			p.ChannelType()
		}

	}

	return localctx
}

// IArrayTypeContext is an interface to support dynamic dispatch.
type IArrayTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayTypeContext differentiates from other interfaces.
	IsArrayTypeContext()
}

type ArrayTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayTypeContext() *ArrayTypeContext {
	var p = new(ArrayTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_arrayType
	return p
}

func (*ArrayTypeContext) IsArrayTypeContext() {}

func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayTypeContext {
	var p = new(ArrayTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_arrayType

	return p
}

func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayTypeContext) ArrayLength() IArrayLengthContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayLengthContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayLengthContext)
}

func (s *ArrayTypeContext) ElementType() IElementTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterArrayType(s)
	}
}

func (s *ArrayTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitArrayType(s)
	}
}

func (s *ArrayTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ArrayTypeVisitor:
		return t.VisitArrayType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ArrayType() (localctx IArrayTypeContext) {
	localctx = NewArrayTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, OgParserRULE_arrayType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(631)
		p.Match(OgParserT__48)
	}
	{
		p.SetState(632)
		p.ArrayLength()
	}
	{
		p.SetState(633)
		p.Match(OgParserT__49)
	}
	{
		p.SetState(634)
		p.ElementType()
	}

	return localctx
}

// IArrayLengthContext is an interface to support dynamic dispatch.
type IArrayLengthContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArrayLengthContext differentiates from other interfaces.
	IsArrayLengthContext()
}

type ArrayLengthContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArrayLengthContext() *ArrayLengthContext {
	var p = new(ArrayLengthContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_arrayLength
	return p
}

func (*ArrayLengthContext) IsArrayLengthContext() {}

func NewArrayLengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArrayLengthContext {
	var p = new(ArrayLengthContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_arrayLength

	return p
}

func (s *ArrayLengthContext) GetParser() antlr.Parser { return s.parser }

func (s *ArrayLengthContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ArrayLengthContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArrayLengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArrayLengthContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterArrayLength(s)
	}
}

func (s *ArrayLengthContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitArrayLength(s)
	}
}

func (s *ArrayLengthContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ArrayLengthVisitor:
		return t.VisitArrayLength(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ArrayLength() (localctx IArrayLengthContext) {
	localctx = NewArrayLengthContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, OgParserRULE_arrayLength)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(636)
		p.expression(0)
	}

	return localctx
}

// IElementTypeContext is an interface to support dynamic dispatch.
type IElementTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementTypeContext differentiates from other interfaces.
	IsElementTypeContext()
}

type ElementTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementTypeContext() *ElementTypeContext {
	var p = new(ElementTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_elementType
	return p
}

func (*ElementTypeContext) IsElementTypeContext() {}

func NewElementTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementTypeContext {
	var p = new(ElementTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_elementType

	return p
}

func (s *ElementTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ElementTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterElementType(s)
	}
}

func (s *ElementTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitElementType(s)
	}
}

func (s *ElementTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ElementTypeVisitor:
		return t.VisitElementType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ElementType() (localctx IElementTypeContext) {
	localctx = NewElementTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, OgParserRULE_elementType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(638)
		p.Type_()
	}

	return localctx
}

// IPointerTypeContext is an interface to support dynamic dispatch.
type IPointerTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPointerTypeContext differentiates from other interfaces.
	IsPointerTypeContext()
}

type PointerTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPointerTypeContext() *PointerTypeContext {
	var p = new(PointerTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_pointerType
	return p
}

func (*PointerTypeContext) IsPointerTypeContext() {}

func NewPointerTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PointerTypeContext {
	var p = new(PointerTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_pointerType

	return p
}

func (s *PointerTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *PointerTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *PointerTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PointerTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PointerTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterPointerType(s)
	}
}

func (s *PointerTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitPointerType(s)
	}
}

func (s *PointerTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case PointerTypeVisitor:
		return t.VisitPointerType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) PointerType() (localctx IPointerTypeContext) {
	localctx = NewPointerTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, OgParserRULE_pointerType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(640)
		p.Match(OgParserT__23)
	}
	{
		p.SetState(641)
		p.Type_()
	}

	return localctx
}

// IInterfaceTypeContext is an interface to support dynamic dispatch.
type IInterfaceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInterfaceTypeContext differentiates from other interfaces.
	IsInterfaceTypeContext()
}

type InterfaceTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceTypeContext() *InterfaceTypeContext {
	var p = new(InterfaceTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_interfaceType
	return p
}

func (*InterfaceTypeContext) IsInterfaceTypeContext() {}

func NewInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceTypeContext {
	var p = new(InterfaceTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_interfaceType

	return p
}

func (s *InterfaceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceTypeContext) AllMethodSpec() []IMethodSpecContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IMethodSpecContext)(nil)).Elem())
	var tst = make([]IMethodSpecContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IMethodSpecContext)
		}
	}

	return tst
}

func (s *InterfaceTypeContext) MethodSpec(i int) IMethodSpecContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodSpecContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IMethodSpecContext)
}

func (s *InterfaceTypeContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *InterfaceTypeContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *InterfaceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterInterfaceType(s)
	}
}

func (s *InterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitInterfaceType(s)
	}
}

func (s *InterfaceTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case InterfaceTypeVisitor:
		return t.VisitInterfaceType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) InterfaceType() (localctx IInterfaceTypeContext) {
	localctx = NewInterfaceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, OgParserRULE_interfaceType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(643)
		p.Match(OgParserT__50)
	}
	{
		p.SetState(644)
		p.Match(OgParserT__2)
	}
	p.SetState(650)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(645)
				p.MethodSpec()
			}
			{
				p.SetState(646)
				p.Eos()
			}

		}
		p.SetState(652)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())
	}
	{
		p.SetState(653)
		p.Match(OgParserT__3)
	}

	return localctx
}

// ISliceTypeContext is an interface to support dynamic dispatch.
type ISliceTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceTypeContext differentiates from other interfaces.
	IsSliceTypeContext()
}

type SliceTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceTypeContext() *SliceTypeContext {
	var p = new(SliceTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_sliceType
	return p
}

func (*SliceTypeContext) IsSliceTypeContext() {}

func NewSliceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceTypeContext {
	var p = new(SliceTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_sliceType

	return p
}

func (s *SliceTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceTypeContext) ElementType() IElementTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *SliceTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterSliceType(s)
	}
}

func (s *SliceTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitSliceType(s)
	}
}

func (s *SliceTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case SliceTypeVisitor:
		return t.VisitSliceType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) SliceType() (localctx ISliceTypeContext) {
	localctx = NewSliceTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, OgParserRULE_sliceType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(655)
		p.Match(OgParserT__48)
	}
	{
		p.SetState(656)
		p.Match(OgParserT__49)
	}
	{
		p.SetState(657)
		p.ElementType()
	}

	return localctx
}

// IMapTypeContext is an interface to support dynamic dispatch.
type IMapTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMapTypeContext differentiates from other interfaces.
	IsMapTypeContext()
}

type MapTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapTypeContext() *MapTypeContext {
	var p = new(MapTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_mapType
	return p
}

func (*MapTypeContext) IsMapTypeContext() {}

func NewMapTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapTypeContext {
	var p = new(MapTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_mapType

	return p
}

func (s *MapTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *MapTypeContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *MapTypeContext) ElementType() IElementTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *MapTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterMapType(s)
	}
}

func (s *MapTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitMapType(s)
	}
}

func (s *MapTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case MapTypeVisitor:
		return t.VisitMapType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) MapType() (localctx IMapTypeContext) {
	localctx = NewMapTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, OgParserRULE_mapType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(659)
		p.Match(OgParserT__51)
	}
	{
		p.SetState(660)
		p.Match(OgParserT__48)
	}
	{
		p.SetState(661)
		p.Type_()
	}
	{
		p.SetState(662)
		p.Match(OgParserT__49)
	}
	{
		p.SetState(663)
		p.ElementType()
	}

	return localctx
}

// IChannelTypeContext is an interface to support dynamic dispatch.
type IChannelTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsChannelTypeContext differentiates from other interfaces.
	IsChannelTypeContext()
}

type ChannelTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyChannelTypeContext() *ChannelTypeContext {
	var p = new(ChannelTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_channelType
	return p
}

func (*ChannelTypeContext) IsChannelTypeContext() {}

func NewChannelTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ChannelTypeContext {
	var p = new(ChannelTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_channelType

	return p
}

func (s *ChannelTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ChannelTypeContext) ElementType() IElementTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *ChannelTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ChannelTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ChannelTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterChannelType(s)
	}
}

func (s *ChannelTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitChannelType(s)
	}
}

func (s *ChannelTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ChannelTypeVisitor:
		return t.VisitChannelType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ChannelType() (localctx IChannelTypeContext) {
	localctx = NewChannelTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, OgParserRULE_channelType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(670)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(665)
			p.Match(OgParserT__52)
		}

	case 2:
		{
			p.SetState(666)
			p.Match(OgParserT__52)
		}
		{
			p.SetState(667)
			p.Match(OgParserT__16)
		}

	case 3:
		{
			p.SetState(668)
			p.Match(OgParserT__16)
		}
		{
			p.SetState(669)
			p.Match(OgParserT__52)
		}

	}
	{
		p.SetState(672)
		p.ElementType()
	}

	return localctx
}

// IMethodSpecContext is an interface to support dynamic dispatch.
type IMethodSpecContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethodSpecContext differentiates from other interfaces.
	IsMethodSpecContext()
}

type MethodSpecContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodSpecContext() *MethodSpecContext {
	var p = new(MethodSpecContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_methodSpec
	return p
}

func (*MethodSpecContext) IsMethodSpecContext() {}

func NewMethodSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodSpecContext {
	var p = new(MethodSpecContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_methodSpec

	return p
}

func (s *MethodSpecContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodSpecContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *MethodSpecContext) Parameters() IParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersContext)
}

func (s *MethodSpecContext) Result() IResultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResultContext)
}

func (s *MethodSpecContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MethodSpecContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodSpecContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterMethodSpec(s)
	}
}

func (s *MethodSpecContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitMethodSpec(s)
	}
}

func (s *MethodSpecContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case MethodSpecVisitor:
		return t.VisitMethodSpec(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) MethodSpec() (localctx IMethodSpecContext) {
	localctx = NewMethodSpecContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, OgParserRULE_methodSpec)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(682)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(674)

		if !(p.noTerminatorAfterParams(2)) {
			panic(antlr.NewFailedPredicateException(p, "p.noTerminatorAfterParams(2)", ""))
		}
		{
			p.SetState(675)
			p.Match(OgParserIDENTIFIER)
		}
		{
			p.SetState(676)
			p.Parameters()
		}
		{
			p.SetState(677)
			p.Result()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(679)
			p.TypeName()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(680)
			p.Match(OgParserIDENTIFIER)
		}
		{
			p.SetState(681)
			p.Parameters()
		}

	}

	return localctx
}

// IFunctionTypeContext is an interface to support dynamic dispatch.
type IFunctionTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeContext differentiates from other interfaces.
	IsFunctionTypeContext()
}

type FunctionTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeContext() *FunctionTypeContext {
	var p = new(FunctionTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_functionType
	return p
}

func (*FunctionTypeContext) IsFunctionTypeContext() {}

func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeContext {
	var p = new(FunctionTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_functionType

	return p
}

func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeContext) Signature() ISignatureContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISignatureContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISignatureContext)
}

func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterFunctionType(s)
	}
}

func (s *FunctionTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitFunctionType(s)
	}
}

func (s *FunctionTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case FunctionTypeVisitor:
		return t.VisitFunctionType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) FunctionType() (localctx IFunctionTypeContext) {
	localctx = NewFunctionTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, OgParserRULE_functionType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(684)
		p.Match(OgParserT__53)
	}
	{
		p.SetState(685)
		p.Signature()
	}

	return localctx
}

// ISignatureContext is an interface to support dynamic dispatch.
type ISignatureContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSignatureContext differentiates from other interfaces.
	IsSignatureContext()
}

type SignatureContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySignatureContext() *SignatureContext {
	var p = new(SignatureContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_signature
	return p
}

func (*SignatureContext) IsSignatureContext() {}

func NewSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SignatureContext {
	var p = new(SignatureContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_signature

	return p
}

func (s *SignatureContext) GetParser() antlr.Parser { return s.parser }

func (s *SignatureContext) Parameters() IParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParametersContext)
}

func (s *SignatureContext) Result() IResultContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IResultContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IResultContext)
}

func (s *SignatureContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SignatureContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterSignature(s)
	}
}

func (s *SignatureContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitSignature(s)
	}
}

func (s *SignatureContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case SignatureVisitor:
		return t.VisitSignature(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Signature() (localctx ISignatureContext) {
	localctx = NewSignatureContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, OgParserRULE_signature)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(693)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 59, p.GetParserRuleContext()) {
	case 1:
		p.SetState(687)

		if !(p.noTerminatorAfterParams(1)) {
			panic(antlr.NewFailedPredicateException(p, "p.noTerminatorAfterParams(1)", ""))
		}
		{
			p.SetState(688)
			p.Parameters()
		}
		{
			p.SetState(689)
			p.Match(OgParserT__4)
		}
		{
			p.SetState(690)
			p.Result()
		}

	case 2:
		{
			p.SetState(692)
			p.Parameters()
		}

	}

	return localctx
}

// IResultContext is an interface to support dynamic dispatch.
type IResultContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsResultContext differentiates from other interfaces.
	IsResultContext()
}

type ResultContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyResultContext() *ResultContext {
	var p = new(ResultContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_result
	return p
}

func (*ResultContext) IsResultContext() {}

func NewResultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ResultContext {
	var p = new(ResultContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_result

	return p
}

func (s *ResultContext) GetParser() antlr.Parser { return s.parser }

func (s *ResultContext) AllType_() []IType_Context {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IType_Context)(nil)).Elem())
	var tst = make([]IType_Context, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IType_Context)
		}
	}

	return tst
}

func (s *ResultContext) Type_(i int) IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ResultContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ResultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ResultContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterResult(s)
	}
}

func (s *ResultContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitResult(s)
	}
}

func (s *ResultContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ResultVisitor:
		return t.VisitResult(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Result() (localctx IResultContext) {
	localctx = NewResultContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, OgParserRULE_result)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(695)
		p.Type_()
	}
	p.SetState(700)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(696)
				p.Match(OgParserT__11)
			}
			{
				p.SetState(697)
				p.Type_()
			}

		}
		p.SetState(702)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext())
	}

	return localctx
}

// IParametersContext is an interface to support dynamic dispatch.
type IParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParametersContext differentiates from other interfaces.
	IsParametersContext()
}

type ParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParametersContext() *ParametersContext {
	var p = new(ParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_parameters
	return p
}

func (*ParametersContext) IsParametersContext() {}

func NewParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParametersContext {
	var p = new(ParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_parameters

	return p
}

func (s *ParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ParametersContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParametersContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterParameters(s)
	}
}

func (s *ParametersContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitParameters(s)
	}
}

func (s *ParametersContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ParametersVisitor:
		return t.VisitParameters(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Parameters() (localctx IParametersContext) {
	localctx = NewParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, OgParserRULE_parameters)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(711)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(703)
			p.Match(OgParserT__7)
		}
		p.SetState(708)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__23))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__54-49))|(1<<(OgParserT__58-49))|(1<<(OgParserIDENTIFIER-49)))) != 0) {
			{
				p.SetState(704)
				p.ParameterList()
			}
			p.SetState(706)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == OgParserT__11 {
				{
					p.SetState(705)
					p.Match(OgParserT__11)
				}

			}

		}
		{
			p.SetState(710)
			p.Match(OgParserT__8)
		}

	}

	return localctx
}

// IParameterListContext is an interface to support dynamic dispatch.
type IParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterListContext differentiates from other interfaces.
	IsParameterListContext()
}

type ParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterListContext() *ParameterListContext {
	var p = new(ParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_parameterList
	return p
}

func (*ParameterListContext) IsParameterListContext() {}

func NewParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterListContext {
	var p = new(ParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_parameterList

	return p
}

func (s *ParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterListContext) AllParameterDecl() []IParameterDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterDeclContext)(nil)).Elem())
	var tst = make([]IParameterDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterDeclContext)
		}
	}

	return tst
}

func (s *ParameterListContext) ParameterDecl(i int) IParameterDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterDeclContext)
}

func (s *ParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterParameterList(s)
	}
}

func (s *ParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitParameterList(s)
	}
}

func (s *ParameterListContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ParameterListVisitor:
		return t.VisitParameterList(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ParameterList() (localctx IParameterListContext) {
	localctx = NewParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, OgParserRULE_parameterList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(713)
		p.ParameterDecl()
	}
	p.SetState(718)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(714)
				p.Match(OgParserT__11)
			}
			{
				p.SetState(715)
				p.ParameterDecl()
			}

		}
		p.SetState(720)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext())
	}

	return localctx
}

// IParameterDeclContext is an interface to support dynamic dispatch.
type IParameterDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterDeclContext differentiates from other interfaces.
	IsParameterDeclContext()
}

type ParameterDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterDeclContext() *ParameterDeclContext {
	var p = new(ParameterDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_parameterDecl
	return p
}

func (*ParameterDeclContext) IsParameterDeclContext() {}

func NewParameterDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclContext {
	var p = new(ParameterDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_parameterDecl

	return p
}

func (s *ParameterDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ParameterDeclContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *ParameterDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterParameterDecl(s)
	}
}

func (s *ParameterDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitParameterDecl(s)
	}
}

func (s *ParameterDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ParameterDeclVisitor:
		return t.VisitParameterDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ParameterDecl() (localctx IParameterDeclContext) {
	localctx = NewParameterDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, OgParserRULE_parameterDecl)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(722)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(721)
			p.IdentifierList()
		}

	}
	p.SetState(725)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == OgParserT__54 {
		{
			p.SetState(724)
			p.Match(OgParserT__54)
		}

	}
	{
		p.SetState(727)
		p.Type_()
	}

	return localctx
}

// IOperandContext is an interface to support dynamic dispatch.
type IOperandContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperandContext differentiates from other interfaces.
	IsOperandContext()
}

type OperandContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperandContext() *OperandContext {
	var p = new(OperandContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_operand
	return p
}

func (*OperandContext) IsOperandContext() {}

func NewOperandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperandContext {
	var p = new(OperandContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_operand

	return p
}

func (s *OperandContext) GetParser() antlr.Parser { return s.parser }

func (s *OperandContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *OperandContext) OperandName() IOperandNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperandNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperandNameContext)
}

func (s *OperandContext) MethodExpr() IMethodExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMethodExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMethodExprContext)
}

func (s *OperandContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OperandContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperandContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterOperand(s)
	}
}

func (s *OperandContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitOperand(s)
	}
}

func (s *OperandContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case OperandVisitor:
		return t.VisitOperand(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Operand() (localctx IOperandContext) {
	localctx = NewOperandContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, OgParserRULE_operand)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(736)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(729)
			p.Literal()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(730)
			p.OperandName()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(731)
			p.MethodExpr()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(732)
			p.Match(OgParserT__7)
		}
		{
			p.SetState(733)
			p.expression(0)
		}
		{
			p.SetState(734)
			p.Match(OgParserT__8)
		}

	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) BasicLit() IBasicLitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBasicLitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBasicLitContext)
}

func (s *LiteralContext) CompositeLit() ICompositeLitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICompositeLitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICompositeLitContext)
}

func (s *LiteralContext) FunctionLit() IFunctionLitContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionLitContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionLitContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (s *LiteralContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case LiteralVisitor:
		return t.VisitLiteral(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, OgParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(741)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserT__55, OgParserT__56, OgParserT__57, OgParserINT_LIT, OgParserFLOAT_LIT, OgParserIMAGINARY_LIT, OgParserRUNE_LIT, OgParserSTRING_LIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(738)
			p.BasicLit()
		}

	case OgParserT__48, OgParserT__51, OgParserT__58, OgParserIDENTIFIER:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(739)
			p.CompositeLit()
		}

	case OgParserT__53:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(740)
			p.FunctionLit()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBasicLitContext is an interface to support dynamic dispatch.
type IBasicLitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBasicLitContext differentiates from other interfaces.
	IsBasicLitContext()
}

type BasicLitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBasicLitContext() *BasicLitContext {
	var p = new(BasicLitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_basicLit
	return p
}

func (*BasicLitContext) IsBasicLitContext() {}

func NewBasicLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BasicLitContext {
	var p = new(BasicLitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_basicLit

	return p
}

func (s *BasicLitContext) GetParser() antlr.Parser { return s.parser }

func (s *BasicLitContext) INT_LIT() antlr.TerminalNode {
	return s.GetToken(OgParserINT_LIT, 0)
}

func (s *BasicLitContext) FLOAT_LIT() antlr.TerminalNode {
	return s.GetToken(OgParserFLOAT_LIT, 0)
}

func (s *BasicLitContext) IMAGINARY_LIT() antlr.TerminalNode {
	return s.GetToken(OgParserIMAGINARY_LIT, 0)
}

func (s *BasicLitContext) RUNE_LIT() antlr.TerminalNode {
	return s.GetToken(OgParserRUNE_LIT, 0)
}

func (s *BasicLitContext) STRING_LIT() antlr.TerminalNode {
	return s.GetToken(OgParserSTRING_LIT, 0)
}

func (s *BasicLitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BasicLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BasicLitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterBasicLit(s)
	}
}

func (s *BasicLitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitBasicLit(s)
	}
}

func (s *BasicLitContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case BasicLitVisitor:
		return t.VisitBasicLit(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) BasicLit() (localctx IBasicLitContext) {
	localctx = NewBasicLitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, OgParserRULE_basicLit)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(750)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserINT_LIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(743)
			p.Match(OgParserINT_LIT)
		}

	case OgParserFLOAT_LIT:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(744)
			p.Match(OgParserFLOAT_LIT)
		}

	case OgParserIMAGINARY_LIT:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(745)
			p.Match(OgParserIMAGINARY_LIT)
		}

	case OgParserRUNE_LIT:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(746)
			p.Match(OgParserRUNE_LIT)
		}

	case OgParserSTRING_LIT:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(747)
			p.Match(OgParserSTRING_LIT)
		}

	case OgParserT__55, OgParserT__56:
		p.EnterOuterAlt(localctx, 6)
		p.SetState(748)
		_la = p.GetTokenStream().LA(1)

		if !(_la == OgParserT__55 || _la == OgParserT__56) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}

	case OgParserT__57:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(749)
			p.Match(OgParserT__57)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IOperandNameContext is an interface to support dynamic dispatch.
type IOperandNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOperandNameContext differentiates from other interfaces.
	IsOperandNameContext()
}

type OperandNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOperandNameContext() *OperandNameContext {
	var p = new(OperandNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_operandName
	return p
}

func (*OperandNameContext) IsOperandNameContext() {}

func NewOperandNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OperandNameContext {
	var p = new(OperandNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_operandName

	return p
}

func (s *OperandNameContext) GetParser() antlr.Parser { return s.parser }

func (s *OperandNameContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *OperandNameContext) QualifiedIdent() IQualifiedIdentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IQualifiedIdentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IQualifiedIdentContext)
}

func (s *OperandNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OperandNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OperandNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterOperandName(s)
	}
}

func (s *OperandNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitOperandName(s)
	}
}

func (s *OperandNameContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case OperandNameVisitor:
		return t.VisitOperandName(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) OperandName() (localctx IOperandNameContext) {
	localctx = NewOperandNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, OgParserRULE_operandName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(755)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(752)
			p.Match(OgParserT__10)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(753)
			p.Match(OgParserIDENTIFIER)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(754)
			p.QualifiedIdent()
		}

	}

	return localctx
}

// IQualifiedIdentContext is an interface to support dynamic dispatch.
type IQualifiedIdentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsQualifiedIdentContext differentiates from other interfaces.
	IsQualifiedIdentContext()
}

type QualifiedIdentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyQualifiedIdentContext() *QualifiedIdentContext {
	var p = new(QualifiedIdentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_qualifiedIdent
	return p
}

func (*QualifiedIdentContext) IsQualifiedIdentContext() {}

func NewQualifiedIdentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *QualifiedIdentContext {
	var p = new(QualifiedIdentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_qualifiedIdent

	return p
}

func (s *QualifiedIdentContext) GetParser() antlr.Parser { return s.parser }

func (s *QualifiedIdentContext) AllIDENTIFIER() []antlr.TerminalNode {
	return s.GetTokens(OgParserIDENTIFIER)
}

func (s *QualifiedIdentContext) IDENTIFIER(i int) antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, i)
}

func (s *QualifiedIdentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *QualifiedIdentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *QualifiedIdentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterQualifiedIdent(s)
	}
}

func (s *QualifiedIdentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitQualifiedIdent(s)
	}
}

func (s *QualifiedIdentContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case QualifiedIdentVisitor:
		return t.VisitQualifiedIdent(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) QualifiedIdent() (localctx IQualifiedIdentContext) {
	localctx = NewQualifiedIdentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, OgParserRULE_qualifiedIdent)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(757)
		p.Match(OgParserIDENTIFIER)
	}
	{
		p.SetState(758)
		p.Match(OgParserT__5)
	}
	{
		p.SetState(759)
		p.Match(OgParserIDENTIFIER)
	}

	return localctx
}

// ICompositeLitContext is an interface to support dynamic dispatch.
type ICompositeLitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCompositeLitContext differentiates from other interfaces.
	IsCompositeLitContext()
}

type CompositeLitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCompositeLitContext() *CompositeLitContext {
	var p = new(CompositeLitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_compositeLit
	return p
}

func (*CompositeLitContext) IsCompositeLitContext() {}

func NewCompositeLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CompositeLitContext {
	var p = new(CompositeLitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_compositeLit

	return p
}

func (s *CompositeLitContext) GetParser() antlr.Parser { return s.parser }

func (s *CompositeLitContext) LiteralType() ILiteralTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralTypeContext)
}

func (s *CompositeLitContext) LiteralValue() ILiteralValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralValueContext)
}

func (s *CompositeLitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CompositeLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CompositeLitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterCompositeLit(s)
	}
}

func (s *CompositeLitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitCompositeLit(s)
	}
}

func (s *CompositeLitContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case CompositeLitVisitor:
		return t.VisitCompositeLit(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) CompositeLit() (localctx ICompositeLitContext) {
	localctx = NewCompositeLitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, OgParserRULE_compositeLit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(761)
		p.LiteralType()
	}
	{
		p.SetState(762)
		p.LiteralValue()
	}

	return localctx
}

// ILiteralTypeContext is an interface to support dynamic dispatch.
type ILiteralTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralTypeContext differentiates from other interfaces.
	IsLiteralTypeContext()
}

type LiteralTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralTypeContext() *LiteralTypeContext {
	var p = new(LiteralTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_literalType
	return p
}

func (*LiteralTypeContext) IsLiteralTypeContext() {}

func NewLiteralTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralTypeContext {
	var p = new(LiteralTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_literalType

	return p
}

func (s *LiteralTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralTypeContext) StructType() IStructTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructTypeContext)
}

func (s *LiteralTypeContext) ArrayType() IArrayTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArrayTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArrayTypeContext)
}

func (s *LiteralTypeContext) ElementType() IElementTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementTypeContext)
}

func (s *LiteralTypeContext) SliceType() ISliceTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceTypeContext)
}

func (s *LiteralTypeContext) MapType() IMapTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMapTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMapTypeContext)
}

func (s *LiteralTypeContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *LiteralTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterLiteralType(s)
	}
}

func (s *LiteralTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitLiteralType(s)
	}
}

func (s *LiteralTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case LiteralTypeVisitor:
		return t.VisitLiteralType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) LiteralType() (localctx ILiteralTypeContext) {
	localctx = NewLiteralTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, OgParserRULE_literalType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(773)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(764)
			p.StructType()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(765)
			p.ArrayType()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(766)
			p.Match(OgParserT__48)
		}
		{
			p.SetState(767)
			p.Match(OgParserT__54)
		}
		{
			p.SetState(768)
			p.Match(OgParserT__49)
		}
		{
			p.SetState(769)
			p.ElementType()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(770)
			p.SliceType()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(771)
			p.MapType()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(772)
			p.TypeName()
		}

	}

	return localctx
}

// ILiteralValueContext is an interface to support dynamic dispatch.
type ILiteralValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralValueContext differentiates from other interfaces.
	IsLiteralValueContext()
}

type LiteralValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralValueContext() *LiteralValueContext {
	var p = new(LiteralValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_literalValue
	return p
}

func (*LiteralValueContext) IsLiteralValueContext() {}

func NewLiteralValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralValueContext {
	var p = new(LiteralValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_literalValue

	return p
}

func (s *LiteralValueContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralValueContext) ElementList() IElementListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementListContext)
}

func (s *LiteralValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterLiteralValue(s)
	}
}

func (s *LiteralValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitLiteralValue(s)
	}
}

func (s *LiteralValueContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case LiteralValueVisitor:
		return t.VisitLiteralValue(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) LiteralValue() (localctx ILiteralValueContext) {
	localctx = NewLiteralValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, OgParserRULE_literalValue)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(775)
		p.Match(OgParserT__2)
	}
	p.SetState(780)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__2)|(1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__28))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__55-49))|(1<<(OgParserT__56-49))|(1<<(OgParserT__57-49))|(1<<(OgParserT__58-49))|(1<<(OgParserT__67-49))|(1<<(OgParserIDENTIFIER-49))|(1<<(OgParserINT_LIT-49))|(1<<(OgParserFLOAT_LIT-49))|(1<<(OgParserIMAGINARY_LIT-49))|(1<<(OgParserRUNE_LIT-49))|(1<<(OgParserSTRING_LIT-49)))) != 0) {
		{
			p.SetState(776)
			p.ElementList()
		}
		p.SetState(778)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == OgParserT__11 {
			{
				p.SetState(777)
				p.Match(OgParserT__11)
			}

		}

	}
	{
		p.SetState(782)
		p.Match(OgParserT__3)
	}

	return localctx
}

// IElementListContext is an interface to support dynamic dispatch.
type IElementListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementListContext differentiates from other interfaces.
	IsElementListContext()
}

type ElementListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementListContext() *ElementListContext {
	var p = new(ElementListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_elementList
	return p
}

func (*ElementListContext) IsElementListContext() {}

func NewElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementListContext {
	var p = new(ElementListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_elementList

	return p
}

func (s *ElementListContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementListContext) AllKeyedElement() []IKeyedElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IKeyedElementContext)(nil)).Elem())
	var tst = make([]IKeyedElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IKeyedElementContext)
		}
	}

	return tst
}

func (s *ElementListContext) KeyedElement(i int) IKeyedElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyedElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IKeyedElementContext)
}

func (s *ElementListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterElementList(s)
	}
}

func (s *ElementListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitElementList(s)
	}
}

func (s *ElementListContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ElementListVisitor:
		return t.VisitElementList(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ElementList() (localctx IElementListContext) {
	localctx = NewElementListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, OgParserRULE_elementList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(784)
		p.KeyedElement()
	}
	p.SetState(791)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(786)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			if _la == OgParserT__11 {
				{
					p.SetState(785)
					p.Match(OgParserT__11)
				}

			}
			{
				p.SetState(788)
				p.KeyedElement()
			}

		}
		p.SetState(793)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext())
	}

	return localctx
}

// IKeyedElementContext is an interface to support dynamic dispatch.
type IKeyedElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyedElementContext differentiates from other interfaces.
	IsKeyedElementContext()
}

type KeyedElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyedElementContext() *KeyedElementContext {
	var p = new(KeyedElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_keyedElement
	return p
}

func (*KeyedElementContext) IsKeyedElementContext() {}

func NewKeyedElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyedElementContext {
	var p = new(KeyedElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_keyedElement

	return p
}

func (s *KeyedElementContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyedElementContext) Element() IElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementContext)
}

func (s *KeyedElementContext) Key() IKeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IKeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IKeyContext)
}

func (s *KeyedElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyedElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyedElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterKeyedElement(s)
	}
}

func (s *KeyedElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitKeyedElement(s)
	}
}

func (s *KeyedElementContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case KeyedElementVisitor:
		return t.VisitKeyedElement(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) KeyedElement() (localctx IKeyedElementContext) {
	localctx = NewKeyedElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, OgParserRULE_keyedElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(797)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(794)
			p.Key()
		}
		{
			p.SetState(795)
			p.Match(OgParserT__4)
		}

	}
	{
		p.SetState(799)
		p.Element()
	}

	return localctx
}

// IKeyContext is an interface to support dynamic dispatch.
type IKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsKeyContext differentiates from other interfaces.
	IsKeyContext()
}

type KeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyContext() *KeyContext {
	var p = new(KeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_key
	return p
}

func (*KeyContext) IsKeyContext() {}

func NewKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyContext {
	var p = new(KeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_key

	return p
}

func (s *KeyContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *KeyContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *KeyContext) LiteralValue() ILiteralValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralValueContext)
}

func (s *KeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterKey(s)
	}
}

func (s *KeyContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitKey(s)
	}
}

func (s *KeyContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case KeyVisitor:
		return t.VisitKey(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Key() (localctx IKeyContext) {
	localctx = NewKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, OgParserRULE_key)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(804)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(801)
			p.Match(OgParserIDENTIFIER)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(802)
			p.expression(0)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(803)
			p.LiteralValue()
		}

	}

	return localctx
}

// IElementContext is an interface to support dynamic dispatch.
type IElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementContext differentiates from other interfaces.
	IsElementContext()
}

type ElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementContext() *ElementContext {
	var p = new(ElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_element
	return p
}

func (*ElementContext) IsElementContext() {}

func NewElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementContext {
	var p = new(ElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_element

	return p
}

func (s *ElementContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ElementContext) LiteralValue() ILiteralValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralValueContext)
}

func (s *ElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterElement(s)
	}
}

func (s *ElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitElement(s)
	}
}

func (s *ElementContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ElementVisitor:
		return t.VisitElement(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Element() (localctx IElementContext) {
	localctx = NewElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, OgParserRULE_element)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(808)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case OgParserT__7, OgParserT__10, OgParserT__16, OgParserT__19, OgParserT__20, OgParserT__22, OgParserT__23, OgParserT__28, OgParserT__48, OgParserT__50, OgParserT__51, OgParserT__52, OgParserT__53, OgParserT__55, OgParserT__56, OgParserT__57, OgParserT__58, OgParserT__67, OgParserIDENTIFIER, OgParserINT_LIT, OgParserFLOAT_LIT, OgParserIMAGINARY_LIT, OgParserRUNE_LIT, OgParserSTRING_LIT:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(806)
			p.expression(0)
		}

	case OgParserT__2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(807)
			p.LiteralValue()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStructTypeContext is an interface to support dynamic dispatch.
type IStructTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructTypeContext differentiates from other interfaces.
	IsStructTypeContext()
}

type StructTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructTypeContext() *StructTypeContext {
	var p = new(StructTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_structType
	return p
}

func (*StructTypeContext) IsStructTypeContext() {}

func NewStructTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructTypeContext {
	var p = new(StructTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_structType

	return p
}

func (s *StructTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *StructTypeContext) AllFieldDecl() []IFieldDeclContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFieldDeclContext)(nil)).Elem())
	var tst = make([]IFieldDeclContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFieldDeclContext)
		}
	}

	return tst
}

func (s *StructTypeContext) FieldDecl(i int) IFieldDeclContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFieldDeclContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFieldDeclContext)
}

func (s *StructTypeContext) AllEos() []IEosContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEosContext)(nil)).Elem())
	var tst = make([]IEosContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEosContext)
		}
	}

	return tst
}

func (s *StructTypeContext) Eos(i int) IEosContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEosContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEosContext)
}

func (s *StructTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterStructType(s)
	}
}

func (s *StructTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitStructType(s)
	}
}

func (s *StructTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case StructTypeVisitor:
		return t.VisitStructType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) StructType() (localctx IStructTypeContext) {
	localctx = NewStructTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, OgParserRULE_structType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(810)
		p.Match(OgParserT__58)
	}
	{
		p.SetState(811)
		p.Match(OgParserT__2)
	}
	p.SetState(817)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(812)
				p.FieldDecl()
			}
			{
				p.SetState(813)
				p.Eos()
			}

		}
		p.SetState(819)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext())
	}
	{
		p.SetState(820)
		p.Match(OgParserT__3)
	}

	return localctx
}

// IFieldDeclContext is an interface to support dynamic dispatch.
type IFieldDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFieldDeclContext differentiates from other interfaces.
	IsFieldDeclContext()
}

type FieldDeclContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldDeclContext() *FieldDeclContext {
	var p = new(FieldDeclContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_fieldDecl
	return p
}

func (*FieldDeclContext) IsFieldDeclContext() {}

func NewFieldDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldDeclContext {
	var p = new(FieldDeclContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_fieldDecl

	return p
}

func (s *FieldDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldDeclContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *FieldDeclContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *FieldDeclContext) AnonymousField() IAnonymousFieldContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAnonymousFieldContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAnonymousFieldContext)
}

func (s *FieldDeclContext) STRING_LIT() antlr.TerminalNode {
	return s.GetToken(OgParserSTRING_LIT, 0)
}

func (s *FieldDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterFieldDecl(s)
	}
}

func (s *FieldDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitFieldDecl(s)
	}
}

func (s *FieldDeclContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case FieldDeclVisitor:
		return t.VisitFieldDecl(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) FieldDecl() (localctx IFieldDeclContext) {
	localctx = NewFieldDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, OgParserRULE_fieldDecl)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(827)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) {
	case 1:
		p.SetState(822)

		if !(p.noTerminatorBetween(2)) {
			panic(antlr.NewFailedPredicateException(p, "p.noTerminatorBetween(2)", ""))
		}
		{
			p.SetState(823)
			p.IdentifierList()
		}
		{
			p.SetState(824)
			p.Type_()
		}

	case 2:
		{
			p.SetState(826)
			p.AnonymousField()
		}

	}
	p.SetState(830)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(829)
			p.Match(OgParserSTRING_LIT)
		}

	}

	return localctx
}

// IAnonymousFieldContext is an interface to support dynamic dispatch.
type IAnonymousFieldContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAnonymousFieldContext differentiates from other interfaces.
	IsAnonymousFieldContext()
}

type AnonymousFieldContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAnonymousFieldContext() *AnonymousFieldContext {
	var p = new(AnonymousFieldContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_anonymousField
	return p
}

func (*AnonymousFieldContext) IsAnonymousFieldContext() {}

func NewAnonymousFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AnonymousFieldContext {
	var p = new(AnonymousFieldContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_anonymousField

	return p
}

func (s *AnonymousFieldContext) GetParser() antlr.Parser { return s.parser }

func (s *AnonymousFieldContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *AnonymousFieldContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AnonymousFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AnonymousFieldContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterAnonymousField(s)
	}
}

func (s *AnonymousFieldContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitAnonymousField(s)
	}
}

func (s *AnonymousFieldContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case AnonymousFieldVisitor:
		return t.VisitAnonymousField(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) AnonymousField() (localctx IAnonymousFieldContext) {
	localctx = NewAnonymousFieldContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, OgParserRULE_anonymousField)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(833)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == OgParserT__23 {
		{
			p.SetState(832)
			p.Match(OgParserT__23)
		}

	}
	{
		p.SetState(835)
		p.TypeName()
	}

	return localctx
}

// IFunctionLitContext is an interface to support dynamic dispatch.
type IFunctionLitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionLitContext differentiates from other interfaces.
	IsFunctionLitContext()
}

type FunctionLitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionLitContext() *FunctionLitContext {
	var p = new(FunctionLitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_functionLit
	return p
}

func (*FunctionLitContext) IsFunctionLitContext() {}

func NewFunctionLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionLitContext {
	var p = new(FunctionLitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_functionLit

	return p
}

func (s *FunctionLitContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionLitContext) Function() IFunctionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionContext)
}

func (s *FunctionLitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionLitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterFunctionLit(s)
	}
}

func (s *FunctionLitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitFunctionLit(s)
	}
}

func (s *FunctionLitContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case FunctionLitVisitor:
		return t.VisitFunctionLit(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) FunctionLit() (localctx IFunctionLitContext) {
	localctx = NewFunctionLitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, OgParserRULE_functionLit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(837)
		p.Match(OgParserT__53)
	}
	{
		p.SetState(838)
		p.Function()
	}

	return localctx
}

// IPrimaryExprContext is an interface to support dynamic dispatch.
type IPrimaryExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExprContext differentiates from other interfaces.
	IsPrimaryExprContext()
}

type PrimaryExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExprContext() *PrimaryExprContext {
	var p = new(PrimaryExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_primaryExpr
	return p
}

func (*PrimaryExprContext) IsPrimaryExprContext() {}

func NewPrimaryExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExprContext {
	var p = new(PrimaryExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_primaryExpr

	return p
}

func (s *PrimaryExprContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExprContext) Operand() IOperandContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOperandContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IOperandContext)
}

func (s *PrimaryExprContext) Conversion() IConversionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConversionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConversionContext)
}

func (s *PrimaryExprContext) PrimaryExpr() IPrimaryExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExprContext)
}

func (s *PrimaryExprContext) Selector() ISelectorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISelectorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISelectorContext)
}

func (s *PrimaryExprContext) Index() IIndexContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIndexContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIndexContext)
}

func (s *PrimaryExprContext) Slice() ISliceContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISliceContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISliceContext)
}

func (s *PrimaryExprContext) TypeAssertion() ITypeAssertionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeAssertionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeAssertionContext)
}

func (s *PrimaryExprContext) Arguments() IArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IArgumentsContext)
}

func (s *PrimaryExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterPrimaryExpr(s)
	}
}

func (s *PrimaryExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitPrimaryExpr(s)
	}
}

func (s *PrimaryExprContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case PrimaryExprVisitor:
		return t.VisitPrimaryExpr(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) PrimaryExpr() (localctx IPrimaryExprContext) {
	return p.primaryExpr(0)
}

func (p *OgParser) primaryExpr(_p int) (localctx IPrimaryExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewPrimaryExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPrimaryExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 180
	p.EnterRecursionRule(localctx, 180, OgParserRULE_primaryExpr, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(843)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(841)
			p.Operand()
		}

	case 2:
		{
			p.SetState(842)
			p.Conversion()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(857)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(855)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) {
			case 1:
				localctx = NewPrimaryExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, OgParserRULE_primaryExpr)
				p.SetState(845)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(846)
					p.Selector()
				}

			case 2:
				localctx = NewPrimaryExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, OgParserRULE_primaryExpr)
				p.SetState(847)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(848)
					p.Index()
				}

			case 3:
				localctx = NewPrimaryExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, OgParserRULE_primaryExpr)
				p.SetState(849)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(850)
					p.Slice()
				}

			case 4:
				localctx = NewPrimaryExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, OgParserRULE_primaryExpr)
				p.SetState(851)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(852)
					p.TypeAssertion()
				}

			case 5:
				localctx = NewPrimaryExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, OgParserRULE_primaryExpr)
				p.SetState(853)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
				}
				{
					p.SetState(854)
					p.Arguments()
				}

			}

		}
		p.SetState(859)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())
	}

	return localctx
}

// ISelectorContext is an interface to support dynamic dispatch.
type ISelectorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSelectorContext differentiates from other interfaces.
	IsSelectorContext()
}

type SelectorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySelectorContext() *SelectorContext {
	var p = new(SelectorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_selector
	return p
}

func (*SelectorContext) IsSelectorContext() {}

func NewSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SelectorContext {
	var p = new(SelectorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_selector

	return p
}

func (s *SelectorContext) GetParser() antlr.Parser { return s.parser }

func (s *SelectorContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *SelectorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SelectorContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterSelector(s)
	}
}

func (s *SelectorContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitSelector(s)
	}
}

func (s *SelectorContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case SelectorVisitor:
		return t.VisitSelector(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Selector() (localctx ISelectorContext) {
	localctx = NewSelectorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, OgParserRULE_selector)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(860)
		p.Match(OgParserT__5)
	}
	{
		p.SetState(861)
		p.Match(OgParserIDENTIFIER)
	}

	return localctx
}

// IIndexContext is an interface to support dynamic dispatch.
type IIndexContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIndexContext differentiates from other interfaces.
	IsIndexContext()
}

type IndexContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIndexContext() *IndexContext {
	var p = new(IndexContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_index
	return p
}

func (*IndexContext) IsIndexContext() {}

func NewIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IndexContext {
	var p = new(IndexContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_index

	return p
}

func (s *IndexContext) GetParser() antlr.Parser { return s.parser }

func (s *IndexContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IndexContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterIndex(s)
	}
}

func (s *IndexContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitIndex(s)
	}
}

func (s *IndexContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case IndexVisitor:
		return t.VisitIndex(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Index() (localctx IIndexContext) {
	localctx = NewIndexContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, OgParserRULE_index)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(863)
		p.Match(OgParserT__48)
	}
	{
		p.SetState(864)
		p.expression(0)
	}
	{
		p.SetState(865)
		p.Match(OgParserT__49)
	}

	return localctx
}

// ISliceContext is an interface to support dynamic dispatch.
type ISliceContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSliceContext differentiates from other interfaces.
	IsSliceContext()
}

type SliceContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySliceContext() *SliceContext {
	var p = new(SliceContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_slice
	return p
}

func (*SliceContext) IsSliceContext() {}

func NewSliceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SliceContext {
	var p = new(SliceContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_slice

	return p
}

func (s *SliceContext) GetParser() antlr.Parser { return s.parser }

func (s *SliceContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *SliceContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *SliceContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SliceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SliceContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterSlice(s)
	}
}

func (s *SliceContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitSlice(s)
	}
}

func (s *SliceContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case SliceVisitor:
		return t.VisitSlice(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Slice() (localctx ISliceContext) {
	localctx = NewSliceContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, OgParserRULE_slice)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(867)
		p.Match(OgParserT__48)
	}
	p.SetState(883)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) {
	case 1:
		p.SetState(869)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__28))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__55-49))|(1<<(OgParserT__56-49))|(1<<(OgParserT__57-49))|(1<<(OgParserT__58-49))|(1<<(OgParserT__67-49))|(1<<(OgParserIDENTIFIER-49))|(1<<(OgParserINT_LIT-49))|(1<<(OgParserFLOAT_LIT-49))|(1<<(OgParserIMAGINARY_LIT-49))|(1<<(OgParserRUNE_LIT-49))|(1<<(OgParserSTRING_LIT-49)))) != 0) {
			{
				p.SetState(868)
				p.expression(0)
			}

		}
		{
			p.SetState(871)
			p.Match(OgParserT__4)
		}
		p.SetState(873)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__28))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__55-49))|(1<<(OgParserT__56-49))|(1<<(OgParserT__57-49))|(1<<(OgParserT__58-49))|(1<<(OgParserT__67-49))|(1<<(OgParserIDENTIFIER-49))|(1<<(OgParserINT_LIT-49))|(1<<(OgParserFLOAT_LIT-49))|(1<<(OgParserIMAGINARY_LIT-49))|(1<<(OgParserRUNE_LIT-49))|(1<<(OgParserSTRING_LIT-49)))) != 0) {
			{
				p.SetState(872)
				p.expression(0)
			}

		}

	case 2:
		p.SetState(876)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__28))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__55-49))|(1<<(OgParserT__56-49))|(1<<(OgParserT__57-49))|(1<<(OgParserT__58-49))|(1<<(OgParserT__67-49))|(1<<(OgParserIDENTIFIER-49))|(1<<(OgParserINT_LIT-49))|(1<<(OgParserFLOAT_LIT-49))|(1<<(OgParserIMAGINARY_LIT-49))|(1<<(OgParserRUNE_LIT-49))|(1<<(OgParserSTRING_LIT-49)))) != 0) {
			{
				p.SetState(875)
				p.expression(0)
			}

		}
		{
			p.SetState(878)
			p.Match(OgParserT__4)
		}
		{
			p.SetState(879)
			p.expression(0)
		}
		{
			p.SetState(880)
			p.Match(OgParserT__4)
		}
		{
			p.SetState(881)
			p.expression(0)
		}

	}
	{
		p.SetState(885)
		p.Match(OgParserT__49)
	}

	return localctx
}

// ITypeAssertionContext is an interface to support dynamic dispatch.
type ITypeAssertionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeAssertionContext differentiates from other interfaces.
	IsTypeAssertionContext()
}

type TypeAssertionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAssertionContext() *TypeAssertionContext {
	var p = new(TypeAssertionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_typeAssertion
	return p
}

func (*TypeAssertionContext) IsTypeAssertionContext() {}

func NewTypeAssertionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAssertionContext {
	var p = new(TypeAssertionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_typeAssertion

	return p
}

func (s *TypeAssertionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAssertionContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *TypeAssertionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAssertionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAssertionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterTypeAssertion(s)
	}
}

func (s *TypeAssertionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitTypeAssertion(s)
	}
}

func (s *TypeAssertionContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case TypeAssertionVisitor:
		return t.VisitTypeAssertion(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) TypeAssertion() (localctx ITypeAssertionContext) {
	localctx = NewTypeAssertionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, OgParserRULE_typeAssertion)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(887)
		p.Match(OgParserT__5)
	}
	{
		p.SetState(888)
		p.Match(OgParserT__7)
	}
	{
		p.SetState(889)
		p.Type_()
	}
	{
		p.SetState(890)
		p.Match(OgParserT__8)
	}

	return localctx
}

// IArgumentsContext is an interface to support dynamic dispatch.
type IArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsArgumentsContext differentiates from other interfaces.
	IsArgumentsContext()
}

type ArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgumentsContext() *ArgumentsContext {
	var p = new(ArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_arguments
	return p
}

func (*ArgumentsContext) IsArgumentsContext() {}

func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgumentsContext {
	var p = new(ArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_arguments

	return p
}

func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgumentsContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ArgumentsContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterArguments(s)
	}
}

func (s *ArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitArguments(s)
	}
}

func (s *ArgumentsContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ArgumentsVisitor:
		return t.VisitArguments(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Arguments() (localctx IArgumentsContext) {
	localctx = NewArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, OgParserRULE_arguments)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(892)
		p.Match(OgParserT__7)
	}
	p.SetState(907)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__7)|(1<<OgParserT__10)|(1<<OgParserT__16)|(1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__28))) != 0) || (((_la-49)&-(0x1f+1)) == 0 && ((1<<uint((_la-49)))&((1<<(OgParserT__48-49))|(1<<(OgParserT__50-49))|(1<<(OgParserT__51-49))|(1<<(OgParserT__52-49))|(1<<(OgParserT__53-49))|(1<<(OgParserT__55-49))|(1<<(OgParserT__56-49))|(1<<(OgParserT__57-49))|(1<<(OgParserT__58-49))|(1<<(OgParserT__67-49))|(1<<(OgParserIDENTIFIER-49))|(1<<(OgParserINT_LIT-49))|(1<<(OgParserFLOAT_LIT-49))|(1<<(OgParserIMAGINARY_LIT-49))|(1<<(OgParserRUNE_LIT-49))|(1<<(OgParserSTRING_LIT-49)))) != 0) {
		p.SetState(899)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(893)
				p.ExpressionList()
			}

		case 2:
			{
				p.SetState(894)
				p.Type_()
			}
			p.SetState(897)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(895)
					p.Match(OgParserT__11)
				}
				{
					p.SetState(896)
					p.ExpressionList()
				}

			}

		}
		p.SetState(902)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == OgParserT__54 {
			{
				p.SetState(901)
				p.Match(OgParserT__54)
			}

		}
		p.SetState(905)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == OgParserT__11 {
			{
				p.SetState(904)
				p.Match(OgParserT__11)
			}

		}

	}
	{
		p.SetState(909)
		p.Match(OgParserT__8)
	}

	return localctx
}

// IMethodExprContext is an interface to support dynamic dispatch.
type IMethodExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMethodExprContext differentiates from other interfaces.
	IsMethodExprContext()
}

type MethodExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMethodExprContext() *MethodExprContext {
	var p = new(MethodExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_methodExpr
	return p
}

func (*MethodExprContext) IsMethodExprContext() {}

func NewMethodExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MethodExprContext {
	var p = new(MethodExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_methodExpr

	return p
}

func (s *MethodExprContext) GetParser() antlr.Parser { return s.parser }

func (s *MethodExprContext) ReceiverType() IReceiverTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReceiverTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReceiverTypeContext)
}

func (s *MethodExprContext) IDENTIFIER() antlr.TerminalNode {
	return s.GetToken(OgParserIDENTIFIER, 0)
}

func (s *MethodExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MethodExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MethodExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterMethodExpr(s)
	}
}

func (s *MethodExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitMethodExpr(s)
	}
}

func (s *MethodExprContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case MethodExprVisitor:
		return t.VisitMethodExpr(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) MethodExpr() (localctx IMethodExprContext) {
	localctx = NewMethodExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, OgParserRULE_methodExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(911)
		p.ReceiverType()
	}
	{
		p.SetState(912)
		p.Match(OgParserT__5)
	}
	{
		p.SetState(913)
		p.Match(OgParserIDENTIFIER)
	}

	return localctx
}

// IReceiverTypeContext is an interface to support dynamic dispatch.
type IReceiverTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReceiverTypeContext differentiates from other interfaces.
	IsReceiverTypeContext()
}

type ReceiverTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReceiverTypeContext() *ReceiverTypeContext {
	var p = new(ReceiverTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_receiverType
	return p
}

func (*ReceiverTypeContext) IsReceiverTypeContext() {}

func NewReceiverTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReceiverTypeContext {
	var p = new(ReceiverTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_receiverType

	return p
}

func (s *ReceiverTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *ReceiverTypeContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ReceiverTypeContext) ReceiverType() IReceiverTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReceiverTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReceiverTypeContext)
}

func (s *ReceiverTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReceiverTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReceiverTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterReceiverType(s)
	}
}

func (s *ReceiverTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitReceiverType(s)
	}
}

func (s *ReceiverTypeContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ReceiverTypeVisitor:
		return t.VisitReceiverType(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) ReceiverType() (localctx IReceiverTypeContext) {
	localctx = NewReceiverTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 194, OgParserRULE_receiverType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(925)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(915)
			p.TypeName()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(916)
			p.Match(OgParserT__7)
		}
		{
			p.SetState(917)
			p.Match(OgParserT__23)
		}
		{
			p.SetState(918)
			p.TypeName()
		}
		{
			p.SetState(919)
			p.Match(OgParserT__8)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(921)
			p.Match(OgParserT__7)
		}
		{
			p.SetState(922)
			p.ReceiverType()
		}
		{
			p.SetState(923)
			p.Match(OgParserT__8)
		}

	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) UnaryExpr() IUnaryExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExprContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) Binary_op() IBinary_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBinary_opContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBinary_opContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterExpression(s)
	}
}

func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitExpression(s)
	}
}

func (s *ExpressionContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ExpressionVisitor:
		return t.VisitExpression(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *OgParser) expression(_p int) (localctx IExpressionContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 196
	p.EnterRecursionRule(localctx, 196, OgParserRULE_expression, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(928)
		p.UnaryExpr()
	}

	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(936)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewExpressionContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, OgParserRULE_expression)
			p.SetState(930)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(931)
				p.Binary_op()
			}
			{
				p.SetState(932)
				p.expression(2)
			}

		}
		p.SetState(938)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())
	}

	return localctx
}

// IBinary_opContext is an interface to support dynamic dispatch.
type IBinary_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBinary_opContext differentiates from other interfaces.
	IsBinary_opContext()
}

type Binary_opContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBinary_opContext() *Binary_opContext {
	var p = new(Binary_opContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_binary_op
	return p
}

func (*Binary_opContext) IsBinary_opContext() {}

func NewBinary_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Binary_opContext {
	var p = new(Binary_opContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_binary_op

	return p
}

func (s *Binary_opContext) GetParser() antlr.Parser { return s.parser }
func (s *Binary_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Binary_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Binary_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterBinary_op(s)
	}
}

func (s *Binary_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitBinary_op(s)
	}
}

func (s *Binary_opContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case Binary_opVisitor:
		return t.VisitBinary_op(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Binary_op() (localctx IBinary_opContext) {
	localctx = NewBinary_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 198, OgParserRULE_binary_op)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(939)
	_la = p.GetTokenStream().LA(1)

	if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__21)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__24)|(1<<OgParserT__25)|(1<<OgParserT__26)|(1<<OgParserT__27)|(1<<OgParserT__28)|(1<<OgParserT__29))) != 0) || (((_la-60)&-(0x1f+1)) == 0 && ((1<<uint((_la-60)))&((1<<(OgParserT__59-60))|(1<<(OgParserT__60-60))|(1<<(OgParserT__61-60))|(1<<(OgParserT__62-60))|(1<<(OgParserT__63-60))|(1<<(OgParserT__64-60))|(1<<(OgParserT__65-60))|(1<<(OgParserT__66-60)))) != 0)) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IUnaryExprContext is an interface to support dynamic dispatch.
type IUnaryExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnaryExprContext differentiates from other interfaces.
	IsUnaryExprContext()
}

type UnaryExprContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnaryExprContext() *UnaryExprContext {
	var p = new(UnaryExprContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_unaryExpr
	return p
}

func (*UnaryExprContext) IsUnaryExprContext() {}

func NewUnaryExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnaryExprContext {
	var p = new(UnaryExprContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_unaryExpr

	return p
}

func (s *UnaryExprContext) GetParser() antlr.Parser { return s.parser }

func (s *UnaryExprContext) PrimaryExpr() IPrimaryExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExprContext)
}

func (s *UnaryExprContext) Unary_op() IUnary_opContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnary_opContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnary_opContext)
}

func (s *UnaryExprContext) UnaryExpr() IUnaryExprContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnaryExprContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnaryExprContext)
}

func (s *UnaryExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnaryExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterUnaryExpr(s)
	}
}

func (s *UnaryExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitUnaryExpr(s)
	}
}

func (s *UnaryExprContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case UnaryExprVisitor:
		return t.VisitUnaryExpr(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) UnaryExpr() (localctx IUnaryExprContext) {
	localctx = NewUnaryExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 200, OgParserRULE_unaryExpr)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(945)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(941)
			p.primaryExpr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(942)
			p.Unary_op()
		}
		{
			p.SetState(943)
			p.UnaryExpr()
		}

	}

	return localctx
}

// IUnary_opContext is an interface to support dynamic dispatch.
type IUnary_opContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnary_opContext differentiates from other interfaces.
	IsUnary_opContext()
}

type Unary_opContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnary_opContext() *Unary_opContext {
	var p = new(Unary_opContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_unary_op
	return p
}

func (*Unary_opContext) IsUnary_opContext() {}

func NewUnary_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Unary_opContext {
	var p = new(Unary_opContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_unary_op

	return p
}

func (s *Unary_opContext) GetParser() antlr.Parser { return s.parser }
func (s *Unary_opContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *Unary_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *Unary_opContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterUnary_op(s)
	}
}

func (s *Unary_opContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitUnary_op(s)
	}
}

func (s *Unary_opContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case Unary_opVisitor:
		return t.VisitUnary_op(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Unary_op() (localctx IUnary_opContext) {
	localctx = NewUnary_opContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 202, OgParserRULE_unary_op)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(947)
	_la = p.GetTokenStream().LA(1)

	if !((((_la)&-(0x1f+1)) == 0 && ((1<<uint(_la))&((1<<OgParserT__16)|(1<<OgParserT__19)|(1<<OgParserT__20)|(1<<OgParserT__22)|(1<<OgParserT__23)|(1<<OgParserT__28))) != 0) || _la == OgParserT__67) {
		p.GetErrorHandler().RecoverInline(p)
	} else {
		p.GetErrorHandler().ReportMatch(p)
		p.Consume()
	}

	return localctx
}

// IConversionContext is an interface to support dynamic dispatch.
type IConversionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsConversionContext differentiates from other interfaces.
	IsConversionContext()
}

type ConversionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConversionContext() *ConversionContext {
	var p = new(ConversionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_conversion
	return p
}

func (*ConversionContext) IsConversionContext() {}

func NewConversionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConversionContext {
	var p = new(ConversionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_conversion

	return p
}

func (s *ConversionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConversionContext) Type_() IType_Context {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IType_Context)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IType_Context)
}

func (s *ConversionContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConversionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConversionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConversionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterConversion(s)
	}
}

func (s *ConversionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitConversion(s)
	}
}

func (s *ConversionContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case ConversionVisitor:
		return t.VisitConversion(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Conversion() (localctx IConversionContext) {
	localctx = NewConversionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 204, OgParserRULE_conversion)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(949)
		p.Type_()
	}
	{
		p.SetState(950)
		p.Match(OgParserT__7)
	}
	{
		p.SetState(951)
		p.expression(0)
	}
	p.SetState(953)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == OgParserT__11 {
		{
			p.SetState(952)
			p.Match(OgParserT__11)
		}

	}
	{
		p.SetState(955)
		p.Match(OgParserT__8)
	}

	return localctx
}

// IEosContext is an interface to support dynamic dispatch.
type IEosContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEosContext differentiates from other interfaces.
	IsEosContext()
}

type EosContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEosContext() *EosContext {
	var p = new(EosContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = OgParserRULE_eos
	return p
}

func (*EosContext) IsEosContext() {}

func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosContext {
	var p = new(EosContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = OgParserRULE_eos

	return p
}

func (s *EosContext) GetParser() antlr.Parser { return s.parser }

func (s *EosContext) EOF() antlr.TerminalNode {
	return s.GetToken(OgParserEOF, 0)
}

func (s *EosContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EosContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.EnterEos(s)
	}
}

func (s *EosContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(OgListener); ok {
		listenerT.ExitEos(s)
	}
}

func (s *EosContext) Accept(delegate antlr.ParseTreeVisitor) interface{} {
	switch t := delegate.(type) {
	case EosVisitor:
		return t.VisitEos(s, delegate)
	default:
		return delegate.VisitChildren(s, delegate)
	}
}

func (p *OgParser) Eos() (localctx IEosContext) {
	localctx = NewEosContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 206, OgParserRULE_eos)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(961)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(957)
			p.Match(OgParserT__31)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(958)
			p.Match(OgParserEOF)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		p.SetState(959)

		if !(p.lineTerminatorAhead()) {
			panic(antlr.NewFailedPredicateException(p, "p.lineTerminatorAhead()", ""))
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		p.SetState(960)

		if !(p.GetTokenStream().LT(1).GetText() == "}") {
			panic(antlr.NewFailedPredicateException(p, "p.GetTokenStream().LT(1).GetText() == \"}\"", ""))
		}

	}

	return localctx
}

func (p *OgParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 67:
		var t *MethodSpecContext = nil
		if localctx != nil {
			t = localctx.(*MethodSpecContext)
		}
		return p.MethodSpec_Sempred(t, predIndex)

	case 69:
		var t *SignatureContext = nil
		if localctx != nil {
			t = localctx.(*SignatureContext)
		}
		return p.Signature_Sempred(t, predIndex)

	case 87:
		var t *FieldDeclContext = nil
		if localctx != nil {
			t = localctx.(*FieldDeclContext)
		}
		return p.FieldDecl_Sempred(t, predIndex)

	case 90:
		var t *PrimaryExprContext = nil
		if localctx != nil {
			t = localctx.(*PrimaryExprContext)
		}
		return p.PrimaryExpr_Sempred(t, predIndex)

	case 98:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	case 103:
		var t *EosContext = nil
		if localctx != nil {
			t = localctx.(*EosContext)
		}
		return p.Eos_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *OgParser) MethodSpec_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.noTerminatorAfterParams(2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *OgParser) Signature_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 1:
		return p.noTerminatorAfterParams(1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *OgParser) FieldDecl_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.noTerminatorBetween(2)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *OgParser) PrimaryExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 4)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 2)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *OgParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 8:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *OgParser) Eos_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 9:
		return p.lineTerminatorAhead()

	case 10:
		return p.GetTokenStream().LT(1).GetText() == "}"

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
