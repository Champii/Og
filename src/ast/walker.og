!ast

import
	reflect

struct AstWalker
	type_ interface

	*callDelegate(name string, arg reflect.Value) ->
		method := reflect.ValueOf(@type_).MethodByName(name)

		if method.IsValid()
			method.Call([]reflect.Value{arg})

	*Walk(ast INode): INode ->
		val := reflect.ValueOf(ast).Elem()

		for i := 0; i < val.NumField(); i++
			valueField := val.Field(i)
			valueType := val.Type().Field(i)

			valueKind := valueField.Kind()

			if valueKind == reflect.String || valueKind == reflect.Bool || valueType.Name == "Node"
				continue

			if valueKind == reflect.Slice
				for i := 0; i < valueField.Len(); i++
					if valueField.Index(i).Kind() == reflect.String
						continue

					node := valueField.Index(i).Interface().(INode)

					if node == nil
						continue

					node.SetParent(ast)

					valueField.Index(i).Set(reflect.ValueOf(@Walk(node)))

				continue

			if valueField.IsNil()
				continue

			name := valueField.Type().String()[5:]

			node := valueField.Interface().(INode)

			node.SetParent(ast)

			@callDelegate("Before", valueField)
			@callDelegate("Each", valueField)
			@callDelegate(name, valueField)

			val.Field(i).Set(reflect.ValueOf(@Walk(node)))

			@callDelegate("After", valueField)

		ast
