!translator

import
  strings
  "github.com/champii/og/parser"
  "github.com/antlr/antlr4/runtime/Go/antlr"

struct OgVisitor
  *antlr.BaseParseTreeVisitor

  Aggregate(resultSoFar interface, childResult interface): interface ->
    switch childResult.(type)
      _      => return resultSoFar
      string =>
        switch resultSoFar.(type)
          string => return resultSoFar.(string) + childResult.(string)
          _      => return childResult

    return nil

  // *parser.SourceFileContext -> antlr.ParseTreeVisitor -> interface
  // VisitSourceFile(ctx, delegate) -> @VisitChildren(ctx, delegate)

  VisitSourceFile(ctx *parser.SourceFileContext, delegate antlr.ParseTreeVisitor)             : interface -> return @VisitChildren(ctx, delegate)
  VisitPackageClause(ctx *parser.PackageClauseContext, delegate antlr.ParseTreeVisitor)       : interface -> return "package " + ctx.IDENTIFIER().GetText() + "\n"
  VisitImportDecl(ctx *parser.ImportDeclContext, delegate antlr.ParseTreeVisitor)             : interface -> return "import (\n" + @VisitChildren(ctx, delegate).(string) + ")\n"
  VisitImportSpec(ctx *parser.ImportSpecContext, delegate antlr.ParseTreeVisitor)             : interface -> return @VisitChildren(ctx, delegate)
  VisitImportPath(ctx *parser.ImportPathContext, delegate antlr.ParseTreeVisitor)             : interface ->
    txt := ctx.GetText()

    if txt[0] == '"'
      return txt + "\n"
    else
      return "\"" + txt + "\"\n"

  VisitTopLevelDecl(ctx *parser.TopLevelDeclContext, delegate antlr.ParseTreeVisitor)         : interface -> return @VisitChildren(ctx, delegate).(string) + "\n"
  VisitDeclaration(ctx *parser.DeclarationContext, delegate antlr.ParseTreeVisitor)           : interface -> return @VisitChildren(ctx, delegate)
  VisitConstDecl(ctx *parser.ConstDeclContext, delegate antlr.ParseTreeVisitor)               : interface -> return "const " + @VisitChildren(ctx, delegate).(string)
  VisitConstSpec(ctx *parser.ConstSpecContext, delegate antlr.ParseTreeVisitor)               : interface ->
    res := ""

    if ctx.IdentifierList() != nil
      res += @VisitIdentifierList(ctx.IdentifierList().(*parser.IdentifierListContext), delegate).(string)

    if ctx.Type_() != nil
      res += " " + @VisitType_(ctx.Type_().(*parser.Type_Context), delegate).(string)


    if ctx.ExpressionList() != nil
      res += " = " + @VisitExpressionList(ctx.ExpressionList().(*parser.ExpressionListContext), delegate).(string)

    return res

  VisitIdentifierList(ctx *parser.IdentifierListContext, delegate antlr.ParseTreeVisitor)     : interface -> return ctx.GetText()
  VisitExpressionList(ctx *parser.ExpressionListContext, delegate antlr.ParseTreeVisitor)     : interface ->
    r := @VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)

    if ctx.GetChildCount() > 1
      r += "," + @VisitExpressionList(ctx.ExpressionList().(*parser.ExpressionListContext), delegate).(string)

    return r

  VisitTypeDecl(ctx *parser.TypeDeclContext, delegate antlr.ParseTreeVisitor)                 : interface -> return "type " + @VisitChildren(ctx, delegate).(string)
  VisitTypeSpec(ctx *parser.TypeSpecContext, delegate antlr.ParseTreeVisitor)                 : interface -> return ctx.IDENTIFIER().GetText() + " " + @VisitChildren(ctx, delegate).(string)
  VisitFunctionDecl(ctx *parser.FunctionDeclContext, delegate antlr.ParseTreeVisitor)         : interface -> return "func " + ctx.IDENTIFIER().GetText() + @VisitChildren(ctx, delegate).(string)
  VisitFunction(ctx *parser.FunctionContext, delegate antlr.ParseTreeVisitor)                 : interface -> return @VisitChildren(ctx, delegate)
  VisitMethodDecl(ctx *parser.MethodDeclContext, delegate antlr.ParseTreeVisitor)             : interface -> return "func " + @VisitChildren(ctx, delegate).(string)
  VisitReceiver(ctx *parser.ReceiverContext, delegate antlr.ParseTreeVisitor)                 : interface ->
    c := ctx.IDENTIFIER(0).GetText()
    method := ctx.IDENTIFIER(1).GetText()
    return "(this *" + c + ") " + method

  VisitVarDecl(ctx *parser.VarDeclContext, delegate antlr.ParseTreeVisitor)                   : interface -> return "var " + @VisitChildren(ctx, delegate).(string)
  VisitVarSpec(ctx *parser.VarSpecContext, delegate antlr.ParseTreeVisitor)                   : interface ->
    res := ""

    res += @VisitIdentifierList(ctx.IdentifierList().(*parser.IdentifierListContext), delegate).(string)

    if ctx.Type_() != nil
      res += @VisitType_(ctx.Type_().(*parser.Type_Context), delegate).(string)

    if ctx.ExpressionList() != nil
      res += " = " + @VisitExpressionList(ctx.ExpressionList().(*parser.ExpressionListContext), delegate).(string)

    return res

  VisitBlock(ctx *parser.BlockContext, delegate antlr.ParseTreeVisitor)                       : interface -> return "{\n" + @VisitChildren(ctx, delegate).(string) + "}"
  VisitStatementList(ctx *parser.StatementListContext, delegate antlr.ParseTreeVisitor)       : interface -> return @VisitChildren(ctx, delegate)
  VisitStatement(ctx *parser.StatementContext, delegate antlr.ParseTreeVisitor)               : interface -> return @VisitChildren(ctx, delegate).(string) + "\n"
  VisitStatementNoBlock(ctx *parser.StatementNoBlockContext, delegate antlr.ParseTreeVisitor) : interface -> return "{" + @VisitChildren(ctx, delegate).(string) + "}"
  VisitSimpleStmt(ctx *parser.SimpleStmtContext, delegate antlr.ParseTreeVisitor)             : interface -> return @VisitChildren(ctx, delegate)
  VisitExpressionStmt(ctx *parser.ExpressionStmtContext, delegate antlr.ParseTreeVisitor)     : interface -> return @VisitChildren(ctx, delegate)
  VisitSendStmt(ctx *parser.SendStmtContext, delegate antlr.ParseTreeVisitor)                 : interface -> return @VisitChildren(ctx, delegate)
  VisitIncDecStmt(ctx *parser.IncDecStmtContext, delegate antlr.ParseTreeVisitor)             : interface -> return ctx.GetText()
  VisitAssignment(ctx *parser.AssignmentContext, delegate antlr.ParseTreeVisitor)             : interface -> return @VisitChildren(ctx, delegate)
  VisitAssign_op(ctx *parser.Assign_opContext, delegate antlr.ParseTreeVisitor)               : interface ->
    if len(ctx.GetText()) == 1
      return "="

    return ctx.GetText()

  VisitBinary_op(ctx *parser.Binary_opContext, delegate antlr.ParseTreeVisitor)               : interface -> return ctx.GetText()
  VisitShortVarDecl(ctx *parser.ShortVarDeclContext, delegate antlr.ParseTreeVisitor)         : interface ->
    idList := @VisitIdentifierList(ctx.IdentifierList().(*parser.IdentifierListContext), delegate).(string)
    exprList := @VisitExpressionList(ctx.ExpressionList().(*parser.ExpressionListContext), delegate).(string)
    return idList + " := " + exprList

  VisitEmptyStmt(ctx *parser.EmptyStmtContext, delegate antlr.ParseTreeVisitor)               : interface -> return "\n"
  VisitLabeledStmt(ctx *parser.LabeledStmtContext, delegate antlr.ParseTreeVisitor)           : interface ->
    return ctx.IDENTIFIER().GetText() + ":" + @VisitStatement(ctx.Statement().(*parser.StatementContext), delegate).(string)

  VisitReturnStmt(ctx *parser.ReturnStmtContext, delegate antlr.ParseTreeVisitor)             : interface ->
    if ctx.GetChildCount() == 0 {
      return "return"
    }

    return "return " + @VisitChildren(ctx, delegate).(string)

  VisitBreakStmt(ctx *parser.BreakStmtContext, delegate antlr.ParseTreeVisitor)               : interface ->
    res := "break "

    if ctx.IDENTIFIER() != nil
      res += ctx.IDENTIFIER().GetText()

    return res

  VisitContinueStmt(ctx *parser.ContinueStmtContext, delegate antlr.ParseTreeVisitor)         : interface ->
    res := "continue "

    if ctx.IDENTIFIER() != nil
      res += ctx.IDENTIFIER().GetText()

    return res

  VisitGotoStmt(ctx *parser.GotoStmtContext, delegate antlr.ParseTreeVisitor)                 : interface -> return "goto " + ctx.IDENTIFIER().GetText()
  VisitFallthroughStmt(ctx *parser.FallthroughStmtContext, delegate antlr.ParseTreeVisitor)   : interface -> return "fallthrough"
  VisitDeferStmt(ctx *parser.DeferStmtContext, delegate antlr.ParseTreeVisitor)               : interface -> return "defer " + @VisitChildren(ctx, delegate).(string)
  VisitIfStmt(ctx *parser.IfStmtContext, delegate antlr.ParseTreeVisitor)                     : interface ->
    r := "if "

    if ctx.SimpleStmt() != nil
      r += @VisitSimpleStmt(ctx.SimpleStmt().(*parser.SimpleStmtContext), delegate).(string) + ";"

    r += @VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)
    r += @VisitBlock(ctx.Block(0).(*parser.BlockContext), delegate).(string)

    if ctx.Block(1) != nil
      r += "else " + @VisitBlock(ctx.Block(1).(*parser.BlockContext), delegate).(string)
    else if ctx.IfStmt() != nil
      r += "else " + @VisitIfStmt(ctx.IfStmt().(*parser.IfStmtContext), delegate).(string)

    return r

  VisitSwitchStmt(ctx *parser.SwitchStmtContext, delegate antlr.ParseTreeVisitor)             : interface -> return @VisitChildren(ctx, delegate)
  VisitExprSwitchStmt(ctx *parser.ExprSwitchStmtContext, delegate antlr.ParseTreeVisitor)     : interface ->
    r := "switch "

    if ctx.Expression() != nil
      r += @VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)

    r += "{\n"

    for _, c in ctx.AllExprCaseClause()
      r += @VisitExprCaseClause(c.(*parser.ExprCaseClauseContext), delegate).(string)

    r += "}"

    return r

  VisitExprCaseClause(ctx *parser.ExprCaseClauseContext, delegate antlr.ParseTreeVisitor)     : interface ->
    sCase := @VisitExprSwitchCase(ctx.ExprSwitchCase().(*parser.ExprSwitchCaseContext), delegate).(string)
    stmts := @VisitStatementList(ctx.StatementList().(*parser.StatementListContext), delegate).(string)

    return sCase + ":" + stmts

  VisitExprSwitchCase(ctx *parser.ExprSwitchCaseContext, delegate antlr.ParseTreeVisitor)     : interface ->
    if ctx.GetText() == "_"
      return "default"

    return "case " + @VisitChildren(ctx, delegate).(string)

  VisitTypeSwitchStmt(ctx *parser.TypeSwitchStmtContext, delegate antlr.ParseTreeVisitor)     : interface ->
    r := "switch "

    r += @VisitTypeSwitchGuard(ctx.TypeSwitchGuard().(*parser.TypeSwitchGuardContext), delegate).(string)

    r += "{"

    for _, c in ctx.AllTypeCaseClause()
      r += @VisitTypeCaseClause(c.(*parser.TypeCaseClauseContext), delegate).(string)

    r += "}"

    return r

  VisitTypeSwitchGuard(ctx *parser.TypeSwitchGuardContext, delegate antlr.ParseTreeVisitor)   : interface ->
    r := ""

    if ctx.IDENTIFIER() != nil
      r += ctx.IDENTIFIER().GetText() + "="

    expr := @VisitPrimaryExpr(ctx.PrimaryExpr().(*parser.PrimaryExprContext), delegate).(string)

    return r + expr + ".(type)"

  VisitTypeCaseClause(ctx *parser.TypeCaseClauseContext, delegate antlr.ParseTreeVisitor)     : interface ->
    sCase := @VisitTypeSwitchCase(ctx.TypeSwitchCase().(*parser.TypeSwitchCaseContext), delegate).(string)
    stmts := @VisitStatementList(ctx.StatementList().(*parser.StatementListContext), delegate).(string)

    return sCase + ":" + stmts

  VisitTypeSwitchCase(ctx *parser.TypeSwitchCaseContext, delegate antlr.ParseTreeVisitor)     : interface ->
    if ctx.GetText() == "_"
      return "default"

    return "case " + @VisitChildren(ctx, delegate).(string)

  VisitTypeList(ctx *parser.TypeListContext, delegate antlr.ParseTreeVisitor)                 : interface -> return @VisitChildren(ctx, delegate)
  VisitSelectStmt(ctx *parser.SelectStmtContext, delegate antlr.ParseTreeVisitor)             : interface -> return @VisitChildren(ctx, delegate)
  VisitCommClause(ctx *parser.CommClauseContext, delegate antlr.ParseTreeVisitor)             : interface -> return @VisitChildren(ctx, delegate)
  VisitCommCase(ctx *parser.CommCaseContext, delegate antlr.ParseTreeVisitor)                 : interface -> return @VisitChildren(ctx, delegate)
  VisitRecvStmt(ctx *parser.RecvStmtContext, delegate antlr.ParseTreeVisitor)                 : interface -> return @VisitChildren(ctx, delegate)
  VisitForStmt(ctx *parser.ForStmtContext, delegate antlr.ParseTreeVisitor)                   : interface -> return "for " + @VisitChildren(ctx, delegate).(string)
  VisitForClause(ctx *parser.ForClauseContext, delegate antlr.ParseTreeVisitor)               : interface -> return @VisitChildren(ctx, delegate)
  VisitRangeClause(ctx *parser.RangeClauseContext, delegate antlr.ParseTreeVisitor)           : interface ->
    r := ""

    if ctx.IdentifierList() != nil
      r = @VisitIdentifierList(ctx.IdentifierList().(*parser.IdentifierListContext), delegate).(string)
    else if ctx.ExpressionList() != nil
      r = @VisitExpressionList(ctx.ExpressionList().(*parser.ExpressionListContext), delegate).(string)

    return r + " := range " + @VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)

  VisitGoStmt(ctx *parser.GoStmtContext, delegate antlr.ParseTreeVisitor)                     : interface ->
    expr := @VisitChildren(ctx, delegate).(string)

    if ctx.Function() != nil
      return "go func " + expr + "()"

    return "go " + expr

  VisitType_(ctx *parser.Type_Context, delegate antlr.ParseTreeVisitor)                       : interface -> return " " + @VisitChildren(ctx, delegate).(string)
  VisitTypeName(ctx *parser.TypeNameContext, delegate antlr.ParseTreeVisitor)                 : interface -> return ctx.GetText()
  VisitTypeLit(ctx *parser.TypeLitContext, delegate antlr.ParseTreeVisitor)                   : interface -> return @VisitChildren(ctx, delegate)
  VisitArrayType(ctx *parser.ArrayTypeContext, delegate antlr.ParseTreeVisitor)               : interface -> return @VisitChildren(ctx, delegate)
  VisitArrayLength(ctx *parser.ArrayLengthContext, delegate antlr.ParseTreeVisitor)           : interface -> return @VisitChildren(ctx, delegate)
  VisitElementType(ctx *parser.ElementTypeContext, delegate antlr.ParseTreeVisitor)           : interface -> return @VisitChildren(ctx, delegate)
  VisitPointerType(ctx *parser.PointerTypeContext, delegate antlr.ParseTreeVisitor)           : interface -> return "*" + @VisitChildren(ctx, delegate).(string)
  VisitInterfaceType(ctx *parser.InterfaceTypeContext, delegate antlr.ParseTreeVisitor)       : interface ->
    idx := ""
    methods := ""

    if ctx.IDENTIFIER() != nil
      idx = ctx.IDENTIFIER().GetText() + " "

    if len(ctx.AllMethodSpec()) != 0
      methods = "\n" + @VisitChildren(ctx, delegate).(string)

    return  idx + "interface" + "{" + methods + "}"

  VisitSliceType(ctx *parser.SliceTypeContext, delegate antlr.ParseTreeVisitor)               : interface -> return "[]" + @VisitChildren(ctx, delegate).(string)

  VisitMapType(ctx *parser.MapTypeContext, delegate antlr.ParseTreeVisitor)                   : interface ->
    res := "map["
    res += @VisitType_(ctx.Type_().(*parser.Type_Context), delegate).(string) + "]"
    res += @VisitElementType(ctx.ElementType().(*parser.ElementTypeContext), delegate).(string)

    return res

  VisitChannelType(ctx *parser.ChannelTypeContext, delegate antlr.ParseTreeVisitor)           : interface -> return @VisitChildren(ctx, delegate)
  VisitChannelDecl(ctx *parser.ChannelDeclContext, delegate antlr.ParseTreeVisitor)           : interface -> return ctx.GetText()
  VisitMethodSpec(ctx *parser.MethodSpecContext, delegate antlr.ParseTreeVisitor)             : interface ->
    idx := ""

    if ctx.IDENTIFIER() != nil
      idx = ctx.IDENTIFIER().GetText()

    return idx + @VisitChildren(ctx, delegate).(string) + "\n"

  VisitFunctionType(ctx *parser.FunctionTypeContext, delegate antlr.ParseTreeVisitor)         : interface -> return @VisitChildren(ctx, delegate)
  VisitSignature(ctx *parser.SignatureContext, delegate antlr.ParseTreeVisitor)               : interface -> return @VisitChildren(ctx, delegate)
  VisitResult(ctx *parser.ResultContext, delegate antlr.ParseTreeVisitor)                     : interface ->
    res := ""

    for _, t in ctx.AllType_()
      res += @VisitType_(t.(*parser.Type_Context), delegate).(string) + ","

    return "(" + res + ")"

  VisitParameters(ctx *parser.ParametersContext, delegate antlr.ParseTreeVisitor)             : interface ->
    if ctx.ParameterList() == nil
      return "()"

    return "(" + @VisitChildren(ctx, delegate).(string) + ")"

  VisitParameterList(ctx *parser.ParameterListContext, delegate antlr.ParseTreeVisitor)       : interface -> return @VisitChildren(ctx, delegate)
  VisitParameterDecl(ctx *parser.ParameterDeclContext, delegate antlr.ParseTreeVisitor)       : interface -> return @VisitChildren(ctx, delegate).(string) + ","
  VisitOperand(ctx *parser.OperandContext, delegate antlr.ParseTreeVisitor)                   : interface ->
    if ctx.Expression() != nil
      return "(" + @VisitChildren(ctx, delegate).(string) + ")"

    return @VisitChildren(ctx, delegate)

  VisitLiteral(ctx *parser.LiteralContext, delegate antlr.ParseTreeVisitor)                   : interface -> return @VisitChildren(ctx, delegate)
  VisitBasicLit(ctx *parser.BasicLitContext, delegate antlr.ParseTreeVisitor)                 : interface -> return ctx.GetText()
  VisitOperandName(ctx *parser.OperandNameContext, delegate antlr.ParseTreeVisitor)           : interface ->
    if ctx.IDENTIFIER() != nil
      return ctx.IDENTIFIER().GetText()

    if ctx.QualifiedIdent() != nil || ctx.This_() != nil
      return @VisitChildren(ctx, delegate)

    return ctx.GetText()

  VisitThis_(ctx *parser.This_Context, delegate antlr.ParseTreeVisitor)                       : interface -> return "this"
  VisitQualifiedIdent(ctx *parser.QualifiedIdentContext, delegate antlr.ParseTreeVisitor)     : interface ->
    if ctx.This_() != nil
      return "this." + ctx.IDENTIFIER(0).GetText()

    return ctx.IDENTIFIER(0).GetText() + "." + ctx.IDENTIFIER(1).GetText()

  VisitCompositeLit(ctx *parser.CompositeLitContext, delegate antlr.ParseTreeVisitor)         : interface -> return @VisitChildren(ctx, delegate)
  VisitLiteralType(ctx *parser.LiteralTypeContext, delegate antlr.ParseTreeVisitor)           : interface -> return @VisitChildren(ctx, delegate)
  VisitLiteralValue(ctx *parser.LiteralValueContext, delegate antlr.ParseTreeVisitor)         : interface ->
    if ctx.ElementList() == nil
      return "{}"

    return "{\n" + @VisitChildren(ctx, delegate).(string) + "\n}"

  VisitElementList(ctx *parser.ElementListContext, delegate antlr.ParseTreeVisitor)           : interface -> return @VisitChildren(ctx, delegate)
  VisitKeyedElement(ctx *parser.KeyedElementContext, delegate antlr.ParseTreeVisitor)         : interface ->
    r := ""
    if ctx.Key() != nil
      r += @VisitKey(ctx.Key().(*parser.KeyContext), delegate).(string) + ":"

    r += @VisitElement(ctx.Element().(*parser.ElementContext), delegate).(string) + ",\n"

    return r

  VisitKey(ctx *parser.KeyContext, delegate antlr.ParseTreeVisitor)                           : interface ->
    if ctx.IDENTIFIER() != nil
      return ctx.GetText()

    return @VisitChildren(ctx, delegate)

  VisitElement(ctx *parser.ElementContext, delegate antlr.ParseTreeVisitor)                   : interface -> return @VisitChildren(ctx, delegate)
  VisitStructType(ctx *parser.StructTypeContext, delegate antlr.ParseTreeVisitor)             : interface ->
    idx := ""
    res := ""
    methods := ""

    if ctx.IDENTIFIER() != nil
      idx = ctx.IDENTIFIER().GetText()

    for _, f in ctx.AllFieldDecl()
      t := @VisitFieldDecl(f.(*parser.FieldDeclContext), delegate).(string)

      if t[:5] == "func "
        methods += "\nfunc (this *" + idx + ") " + t[5:]
      else
        res += t

    return  idx + " struct {\n" + res + "}" + methods

  VisitFieldDecl(ctx *parser.FieldDeclContext, delegate antlr.ParseTreeVisitor)               : interface ->
    if ctx.IdentifierList() != nil
      idList := @VisitIdentifierList(ctx.IdentifierList().(*parser.IdentifierListContext), delegate).(string)
      type_ := @VisitType_(ctx.Type_().(*parser.Type_Context), delegate).(string)

      tag := ""

      if ctx.STRING_LIT() != nil
        tag = ctx.STRING_LIT().GetText()

      return idList + type_ + " " + tag + "\n"
    else if ctx.InlineStructMethod() != nil
      return  @VisitInlineStructMethod(ctx.InlineStructMethod().(*parser.InlineStructMethodContext), delegate).(string)
    else
      return ctx.GetText()

    return @VisitChildren(ctx, delegate)

  VisitInlineStructMethod(ctx *parser.InlineStructMethodContext, delegate antlr.ParseTreeVisitor) : interface -> return @VisitChildren(ctx, delegate)
  VisitAnonymousField(ctx *parser.AnonymousFieldContext, delegate antlr.ParseTreeVisitor)     : interface -> return @VisitChildren(ctx, delegate)
  VisitFunctionLit(ctx *parser.FunctionLitContext, delegate antlr.ParseTreeVisitor)           : interface -> return @VisitChildren(ctx, delegate)
  VisitPrimaryExpr(ctx *parser.PrimaryExprContext, delegate antlr.ParseTreeVisitor)           : interface -> return @VisitChildren(ctx, delegate)
  VisitSelector(ctx *parser.SelectorContext, delegate antlr.ParseTreeVisitor)                 : interface -> return "." + ctx.IDENTIFIER().GetText()
  VisitIndex(ctx *parser.IndexContext, delegate antlr.ParseTreeVisitor)                       : interface -> return "[" + @VisitChildren(ctx, delegate).(string) + "]"
  VisitSlice(ctx *parser.SliceContext, delegate antlr.ParseTreeVisitor)                       : interface ->
    txt := ctx.GetText()
    splited := strings.Split(txt, ":")
    res := "["
    i := 0

    if len(splited) == 2
      if splited[0] != "["
        res += @VisitExpression(ctx.Expression(i).(*parser.ExpressionContext), delegate).(string)
        i++
      res += ":"
      if splited[1] != "]"
        res += @VisitExpression(ctx.Expression(i).(*parser.ExpressionContext), delegate).(string)
        i++

    if len(splited) == 3
      if splited[0] != "["
        res += @VisitExpression(ctx.Expression(i).(*parser.ExpressionContext), delegate).(string)
        i++
      res += ":"
      if splited[1] != ""
        res += @VisitExpression(ctx.Expression(i).(*parser.ExpressionContext), delegate).(string)
        i++
      res += ":"
      if splited[2] != "]"
        res += @VisitExpression(ctx.Expression(i).(*parser.ExpressionContext), delegate).(string)
        i++

    return res + "]"

  VisitTypeAssertion(ctx *parser.TypeAssertionContext, delegate antlr.ParseTreeVisitor)       : interface -> return ".(" + @VisitChildren(ctx, delegate).(string) + ")"
  VisitArguments(ctx *parser.ArgumentsContext, delegate antlr.ParseTreeVisitor)               : interface ->
    if ctx.GetChildCount() == 2
      return "()"

    return "(" + @VisitChildren(ctx, delegate).(string) + ")"

  VisitMethodExpr(ctx *parser.MethodExprContext, delegate antlr.ParseTreeVisitor)             : interface -> return @VisitChildren(ctx, delegate)
  VisitReceiverType(ctx *parser.ReceiverTypeContext, delegate antlr.ParseTreeVisitor)         : interface -> return @VisitChildren(ctx, delegate)
  VisitExpression(ctx *parser.ExpressionContext, delegate antlr.ParseTreeVisitor)             : interface ->
    if ctx.GetChildCount() > 1
      exp1 := @VisitExpression(ctx.Expression(0).(*parser.ExpressionContext), delegate).(string)
      op := @VisitBinary_op(ctx.Binary_op().(*parser.Binary_opContext), delegate).(string)
      exp2 := @VisitExpression(ctx.Expression(1).(*parser.ExpressionContext), delegate).(string)

      return exp1 + op + exp2

    return @VisitChildren(ctx, delegate)

  VisitUnaryExpr(ctx *parser.UnaryExprContext, delegate antlr.ParseTreeVisitor)               : interface -> return @VisitChildren(ctx, delegate)
  VisitUnary_op(ctx *parser.Unary_opContext, delegate antlr.ParseTreeVisitor)                 : interface -> return ctx.GetText()
  VisitConversion(ctx *parser.ConversionContext, delegate antlr.ParseTreeVisitor)             : interface ->
    t := @VisitType_(ctx.Type_().(*parser.Type_Context), delegate).(string)
    exp := @VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)

    return t + "(" + exp + ")"

  VisitEos(ctx *parser.EosContext, delegate antlr.ParseTreeVisitor)                           : interface ->
    if ctx.EOF() != nil || ctx.GetText() == ";"
      return "\n"

    return ""
