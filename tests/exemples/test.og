package translator // Golang
import
	"Og/parser"

	"github.com/antlr/antlr4/runtime/Go/antlr"

type GolangVisitor struct
	*antlr.BaseParseTreeVisitor

GolangVisitor::Aggregate(resultSoFar, childResult interface{}): interface{} ->
	switch childResult.(type)
		_      => return resultSoFar
		string =>
			switch resultSoFar.(type)
				string => return resultSoFar.(string) + childResult.(string)
				_      => return childResult

	return nil

GolangVisitor::VisitSourceFile(ctx *parser.SourceFileContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitPackageClause(ctx *parser.PackageClauseContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "package " + ctx.IDENTIFIER().GetText() + "\n"

GolangVisitor::VisitImportDecl(ctx *parser.ImportDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "import (\n" + this.VisitChildren(ctx, delegate).(string) + ")\n"

GolangVisitor::VisitImportSpec(ctx *parser.ImportSpecContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitImportPath(ctx *parser.ImportPathContext, delegate antlr.ParseTreeVisitor): interface{} ->
	txt = ctx.GetText()

	if txt[0] == '"'
		return txt + "\n"
	else
		return "\"" + txt + "\"\n"

GolangVisitor::VisitTopLevelDecl(ctx *parser.TopLevelDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitDeclaration(ctx *parser.DeclarationContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitConstDecl(ctx *parser.ConstDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitConstSpec(ctx *parser.ConstSpecContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitIdentifierList(ctx *parser.IdentifierListContext, delegate antlr.ParseTreeVisitor): interface{} ->
	// return this.VisitChildren(ctx, delegate)
	return ctx.GetText()

GolangVisitor::VisitExpressionList(ctx *parser.ExpressionListContext, delegate antlr.ParseTreeVisitor): interface{} ->
	r = this.VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)

	if ctx.GetChildCount() > 1
		r += "," + this.VisitExpressionList(ctx.ExpressionList().(*parser.ExpressionListContext), delegate).(string)

	return r

GolangVisitor::VisitTypeDecl(ctx *parser.TypeDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "type " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitTypeSpec(ctx *parser.TypeSpecContext, delegate antlr.ParseTreeVisitor): interface{} ->
	// TODO: allow for multiple types declarations
	return ctx.IDENTIFIER().GetText() + " " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitFunctionDecl(ctx *parser.FunctionDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "\nfunc " + ctx.IDENTIFIER().GetText() + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitFunction(ctx *parser.FunctionContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitMethodDecl(ctx *parser.MethodDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "\nfunc " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitReceiver(ctx *parser.ReceiverContext, delegate antlr.ParseTreeVisitor): interface{} ->
	class = ctx.IDENTIFIER(0).GetText()
	method = ctx.IDENTIFIER(1).GetText()
	return "(this *" + class + ") " + method

GolangVisitor::VisitVarDecl(ctx *parser.VarDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "var " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitVarSpec(ctx *parser.VarSpecContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitBlock(ctx *parser.BlockContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "{\n" + this.VisitChildren(ctx, delegate).(string) + "}"
	// return "{}\n"

GolangVisitor::VisitStatementList(ctx *parser.StatementListContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitStatement(ctx *parser.StatementContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate).(string) + "\n"

GolangVisitor::VisitStatementNoBlock(ctx *parser.StatementNoBlockContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "{" + this.VisitChildren(ctx, delegate).(string) + "}"

GolangVisitor::VisitSimpleStmt(ctx *parser.SimpleStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitExpressionStmt(ctx *parser.ExpressionStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitSendStmt(ctx *parser.SendStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitIncDecStmt(ctx *parser.IncDecStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return ctx.GetText()

GolangVisitor::VisitAssignment(ctx *parser.AssignmentContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitAssign_op(ctx *parser.Assign_opContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return ctx.GetText()

GolangVisitor::VisitBinary_op(ctx *parser.Binary_opContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return ctx.GetText()

GolangVisitor::VisitShortVarDecl(ctx *parser.ShortVarDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	idList = this.VisitIdentifierList(ctx.IdentifierList().(*parser.IdentifierListContext), delegate).(string)

	exprList = this.VisitExpressionList(ctx.ExpressionList().(*parser.ExpressionListContext), delegate).(string)

	return idList + " = " + exprList

GolangVisitor::VisitEmptyStmt(ctx *parser.EmptyStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitLabeledStmt(ctx *parser.LabeledStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitReturnStmt(ctx *parser.ReturnStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "return " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitBreakStmt(ctx *parser.BreakStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitContinueStmt(ctx *parser.ContinueStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitGotoStmt(ctx *parser.GotoStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitFallthroughStmt(ctx *parser.FallthroughStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitDeferStmt(ctx *parser.DeferStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "defer " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitIfStmt(ctx *parser.IfStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	r = "if "

	if ctx.SimpleStmt() != nil
		r += this.VisitSimpleStmt(ctx.SimpleStmt().(*parser.SimpleStmtContext), delegate).(string) + ";"

	r += this.VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)
	r += this.VisitBlock(ctx.Block(0).(*parser.BlockContext), delegate).(string)

	if ctx.Block(1) != nil
		r += "else " + this.VisitBlock(ctx.Block(1).(*parser.BlockContext), delegate).(string)
	else if ctx.IfStmt() != nil
		r += "else " + this.VisitIfStmt(ctx.IfStmt().(*parser.IfStmtContext), delegate).(string)

	return r

GolangVisitor::VisitSwitchStmt(ctx *parser.SwitchStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitExprSwitchStmt(ctx *parser.ExprSwitchStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	r = "switch "

	if ctx.Expression() != nil
		r += this.VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)

	r += "{\n"

	for _, c in ctx.AllExprCaseClause()
		r += this.VisitExprCaseClause(c.(*parser.ExprCaseClauseContext), delegate).(string)

	r += "}"

	return r

GolangVisitor::VisitExprCaseClause(ctx *parser.ExprCaseClauseContext, delegate antlr.ParseTreeVisitor): interface{} ->
	sCase = this.VisitExprSwitchCase(ctx.ExprSwitchCase().(*parser.ExprSwitchCaseContext), delegate).(string)
	stmts = this.VisitStatementList(ctx.StatementList().(*parser.StatementListContext), delegate).(string)

	return sCase + ":" + stmts

GolangVisitor::VisitExprSwitchCase(ctx *parser.ExprSwitchCaseContext, delegate antlr.ParseTreeVisitor): interface{} ->
	if ctx.GetText() == "_"
		return "default"

	return "case " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitTypeSwitchStmt(ctx *parser.TypeSwitchStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	r = "switch "

	r += this.VisitTypeSwitchGuard(ctx.TypeSwitchGuard().(*parser.TypeSwitchGuardContext), delegate).(string)

	r += "{"

	for _, c in ctx.AllTypeCaseClause()
		r += this.VisitTypeCaseClause(c.(*parser.TypeCaseClauseContext), delegate).(string)

	r += "}"

	return r

GolangVisitor::VisitTypeSwitchGuard(ctx *parser.TypeSwitchGuardContext, delegate antlr.ParseTreeVisitor): interface{} ->
	r = ""

	if ctx.IDENTIFIER() != nil
		r += ctx.IDENTIFIER().GetText() + "="

	expr = this.VisitPrimaryExpr(ctx.PrimaryExpr().(*parser.PrimaryExprContext), delegate).(string)

	return r + expr + ".(type)"

GolangVisitor::VisitTypeCaseClause(ctx *parser.TypeCaseClauseContext, delegate antlr.ParseTreeVisitor): interface{} ->
	sCase = this.VisitTypeSwitchCase(ctx.TypeSwitchCase().(*parser.TypeSwitchCaseContext), delegate).(string)
	stmts = this.VisitStatementList(ctx.StatementList().(*parser.StatementListContext), delegate).(string)

	return sCase + ":" + stmts

GolangVisitor::VisitTypeSwitchCase(ctx *parser.TypeSwitchCaseContext, delegate antlr.ParseTreeVisitor): interface{} ->
	if ctx.GetText() == "_"
		return "default"

	return "case " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitTypeList(ctx *parser.TypeListContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitSelectStmt(ctx *parser.SelectStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitCommClause(ctx *parser.CommClauseContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitCommCase(ctx *parser.CommCaseContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitRecvStmt(ctx *parser.RecvStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitForStmt(ctx *parser.ForStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "for " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitForClause(ctx *parser.ForClauseContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitRangeClause(ctx *parser.RangeClauseContext, delegate antlr.ParseTreeVisitor): interface{} ->
	r = ""

	if ctx.IdentifierList() != nil
		r = this.VisitIdentifierList(ctx.IdentifierList().(*parser.IdentifierListContext), delegate).(string)
	else if ctx.ExpressionList() != nil
		r = this.VisitExpressionList(ctx.ExpressionList().(*parser.ExpressionListContext), delegate).(string)

	return r + " = range " + this.VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)

GolangVisitor::VisitGoStmt(ctx *parser.GoStmtContext, delegate antlr.ParseTreeVisitor): interface{} ->
	expr = this.VisitChildren(ctx, delegate).(string)

	if ctx.Function() != nil
		return "go func " + expr + "()"

	return "go " + expr

GolangVisitor::VisitType_(ctx *parser.Type_Context, delegate antlr.ParseTreeVisitor): interface{} ->
	return " " + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitTypeName(ctx *parser.TypeNameContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return ctx.GetText()

GolangVisitor::VisitTypeLit(ctx *parser.TypeLitContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitArrayType(ctx *parser.ArrayTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitArrayLength(ctx *parser.ArrayLengthContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitElementType(ctx *parser.ElementTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitPointerType(ctx *parser.PointerTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "*" + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitInterfaceType(ctx *parser.InterfaceTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "interface{}"

GolangVisitor::VisitSliceType(ctx *parser.SliceTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "[]" + this.VisitChildren(ctx, delegate).(string)

GolangVisitor::VisitMapType(ctx *parser.MapTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitChannelType(ctx *parser.ChannelTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitMethodSpec(ctx *parser.MethodSpecContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitFunctionType(ctx *parser.FunctionTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitSignature(ctx *parser.SignatureContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitResult(ctx *parser.ResultContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "(" + ctx.GetText() + ")"

GolangVisitor::VisitParameters(ctx *parser.ParametersContext, delegate antlr.ParseTreeVisitor): interface{} ->
	if ctx.ParameterList() == nil
		return "()"

	return "(" + this.VisitChildren(ctx, delegate).(string) + ")"

GolangVisitor::VisitParameterList(ctx *parser.ParameterListContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitParameterDecl(ctx *parser.ParameterDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate).(string) + ","

GolangVisitor::VisitOperand(ctx *parser.OperandContext, delegate antlr.ParseTreeVisitor): interface{} ->
	if ctx.Expression() != nil
		return "(" + this.VisitChildren(ctx, delegate).(string) + ")"

		return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitLiteral(ctx *parser.LiteralContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitBasicLit(ctx *parser.BasicLitContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return ctx.GetText()
	// return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitOperandName(ctx *parser.OperandNameContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return ctx.GetText()

GolangVisitor::VisitQualifiedIdent(ctx *parser.QualifiedIdentContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitCompositeLit(ctx *parser.CompositeLitContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitLiteralType(ctx *parser.LiteralTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitLiteralValue(ctx *parser.LiteralValueContext, delegate antlr.ParseTreeVisitor): interface{} ->
	if ctx.ElementList() == nil
		return "{}"

	return "{\n" + this.VisitChildren(ctx, delegate).(string) + "\n}"

GolangVisitor::VisitElementList(ctx *parser.ElementListContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitKeyedElement(ctx *parser.KeyedElementContext, delegate antlr.ParseTreeVisitor): interface{} ->
	r = ""
	if ctx.Key() != nil
		r += this.VisitKey(ctx.Key().(*parser.KeyContext), delegate).(string) + ":"

	r += this.VisitElement(ctx.Element().(*parser.ElementContext), delegate).(string) + ",\n"

	return r

GolangVisitor::VisitKey(ctx *parser.KeyContext, delegate antlr.ParseTreeVisitor): interface{} ->
	if ctx.IDENTIFIER() != nil
		return ctx.GetText()

	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitElement(ctx *parser.ElementContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitStructType(ctx *parser.StructTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "struct {\n" + this.VisitChildren(ctx, delegate).(string) + "}\n"

GolangVisitor::VisitFieldDecl(ctx *parser.FieldDeclContext, delegate antlr.ParseTreeVisitor): interface{} ->
	if ctx.IdentifierList() != nil
		idList = this.VisitIdentifierList(ctx.IdentifierList().(*parser.IdentifierListContext), delegate).(string)
		type_ = this.VisitType_(ctx.Type_().(*parser.Type_Context), delegate).(string)

		tag = ""

		if ctx.STRING_LIT() != nil
			tag = ctx.STRING_LIT().GetText()

		return idList + type_ + " " + tag + "\n"
	else
		return ctx.GetText()

	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitAnonymousField(ctx *parser.AnonymousFieldContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitFunctionLit(ctx *parser.FunctionLitContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitPrimaryExpr(ctx *parser.PrimaryExprContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitSelector(ctx *parser.SelectorContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "." + ctx.IDENTIFIER().GetText()

GolangVisitor::VisitIndex(ctx *parser.IndexContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return "[" + this.VisitChildren(ctx, delegate).(string) + "]"

GolangVisitor::VisitSlice(ctx *parser.SliceContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitTypeAssertion(ctx *parser.TypeAssertionContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return ".(" + this.VisitChildren(ctx, delegate).(string) + ")"

GolangVisitor::VisitArguments(ctx *parser.ArgumentsContext, delegate antlr.ParseTreeVisitor): interface{} ->
	if ctx.GetChildCount() == 2
		return "()"

	return "(" + this.VisitChildren(ctx, delegate).(string) + ")"

GolangVisitor::VisitMethodExpr(ctx *parser.MethodExprContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitReceiverType(ctx *parser.ReceiverTypeContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitExpression(ctx *parser.ExpressionContext, delegate antlr.ParseTreeVisitor): interface{} ->
	if ctx.GetChildCount() > 1
		exp1 = this.VisitExpression(ctx.Expression(0).(*parser.ExpressionContext), delegate).(string)
		op = this.VisitBinary_op(ctx.Binary_op().(*parser.Binary_opContext), delegate).(string)
		exp2 = this.VisitExpression(ctx.Expression(1).(*parser.ExpressionContext), delegate).(string)

		return exp1 + op + exp2

	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitUnaryExpr(ctx *parser.UnaryExprContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return this.VisitChildren(ctx, delegate)

GolangVisitor::VisitUnary_op(ctx *parser.Unary_opContext, delegate antlr.ParseTreeVisitor): interface{} ->
	return ctx.GetText()

GolangVisitor::VisitConversion(ctx *parser.ConversionContext, delegate antlr.ParseTreeVisitor): interface{} ->
	t = this.VisitType_(ctx.Type_().(*parser.Type_Context), delegate).(string)
	exp = this.VisitExpression(ctx.Expression().(*parser.ExpressionContext), delegate).(string)

	return t + "(" + exp + ")"

GolangVisitor::VisitEos(ctx *parser.EosContext, delegate antlr.ParseTreeVisitor): interface{} ->
	// return ctx.GetText()
	return this.VisitChildren(ctx, delegate)
